"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/ox";
exports.ids = ["vendor-chunks/ox"];
exports.modules = {

/***/ "(ssr)/./node_modules/ox/node_modules/@noble/curves/_shortw_utils.js":
/*!*********************************************************************!*\
  !*** ./node_modules/ox/node_modules/@noble/curves/_shortw_utils.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.getHash = getHash;\nexports.createCurve = createCurve;\n/**\n * Utilities for short weierstrass curves, combined with noble-hashes.\n * @module\n */ /*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */ const hmac_1 = __webpack_require__(/*! @noble/hashes/hmac */ \"(ssr)/./node_modules/ox/node_modules/@noble/hashes/hmac.js\");\nconst utils_1 = __webpack_require__(/*! @noble/hashes/utils */ \"(ssr)/./node_modules/ox/node_modules/@noble/hashes/utils.js\");\nconst weierstrass_ts_1 = __webpack_require__(/*! ./abstract/weierstrass.js */ \"(ssr)/./node_modules/ox/node_modules/@noble/curves/abstract/weierstrass.js\");\n/** connects noble-curves to noble-hashes */ function getHash(hash) {\n    return {\n        hash,\n        hmac: (key, ...msgs)=>(0, hmac_1.hmac)(hash, key, (0, utils_1.concatBytes)(...msgs)),\n        randomBytes: utils_1.randomBytes\n    };\n}\nfunction createCurve(curveDef, defHash) {\n    const create = (hash)=>(0, weierstrass_ts_1.weierstrass)({\n            ...curveDef,\n            ...getHash(hash)\n        });\n    return {\n        ...create(defHash),\n        create\n    };\n} //# sourceMappingURL=_shortw_utils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb3gvbm9kZV9tb2R1bGVzL0Bub2JsZS9jdXJ2ZXMvX3Nob3J0d191dGlscy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsZUFBZSxHQUFHRTtBQUNsQkYsbUJBQW1CLEdBQUdHO0FBQ3RCOzs7Q0FHQyxHQUNELG9FQUFvRSxHQUNwRSxNQUFNQyxTQUFTQyxtQkFBT0EsQ0FBQyxzRkFBb0I7QUFDM0MsTUFBTUMsVUFBVUQsbUJBQU9BLENBQUMsd0ZBQXFCO0FBQzdDLE1BQU1FLG1CQUFtQkYsbUJBQU9BLENBQUMsNkdBQTJCO0FBQzVELDBDQUEwQyxHQUMxQyxTQUFTSCxRQUFRTSxJQUFJO0lBQ2pCLE9BQU87UUFDSEE7UUFDQUMsTUFBTSxDQUFDQyxLQUFLLEdBQUdDLE9BQVMsQ0FBQyxHQUFHUCxPQUFPSyxJQUFJLEVBQUVELE1BQU1FLEtBQUssQ0FBQyxHQUFHSixRQUFRTSxXQUFXLEtBQUtEO1FBQ2hGRSxhQUFhUCxRQUFRTyxXQUFXO0lBQ3BDO0FBQ0o7QUFDQSxTQUFTVixZQUFZVyxRQUFRLEVBQUVDLE9BQU87SUFDbEMsTUFBTUMsU0FBUyxDQUFDUixPQUFTLENBQUMsR0FBR0QsaUJBQWlCVSxXQUFXLEVBQUU7WUFBRSxHQUFHSCxRQUFRO1lBQUUsR0FBR1osUUFBUU0sS0FBSztRQUFDO0lBQzNGLE9BQU87UUFBRSxHQUFHUSxPQUFPRCxRQUFRO1FBQUVDO0lBQU87QUFDeEMsRUFDQSx5Q0FBeUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93c3Rvbi11aS8uL25vZGVfbW9kdWxlcy9veC9ub2RlX21vZHVsZXMvQG5vYmxlL2N1cnZlcy9fc2hvcnR3X3V0aWxzLmpzP2M4MzAiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmdldEhhc2ggPSBnZXRIYXNoO1xuZXhwb3J0cy5jcmVhdGVDdXJ2ZSA9IGNyZWF0ZUN1cnZlO1xuLyoqXG4gKiBVdGlsaXRpZXMgZm9yIHNob3J0IHdlaWVyc3RyYXNzIGN1cnZlcywgY29tYmluZWQgd2l0aCBub2JsZS1oYXNoZXMuXG4gKiBAbW9kdWxlXG4gKi9cbi8qISBub2JsZS1jdXJ2ZXMgLSBNSVQgTGljZW5zZSAoYykgMjAyMiBQYXVsIE1pbGxlciAocGF1bG1pbGxyLmNvbSkgKi9cbmNvbnN0IGhtYWNfMSA9IHJlcXVpcmUoXCJAbm9ibGUvaGFzaGVzL2htYWNcIik7XG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIkBub2JsZS9oYXNoZXMvdXRpbHNcIik7XG5jb25zdCB3ZWllcnN0cmFzc190c18xID0gcmVxdWlyZShcIi4vYWJzdHJhY3Qvd2VpZXJzdHJhc3MuanNcIik7XG4vKiogY29ubmVjdHMgbm9ibGUtY3VydmVzIHRvIG5vYmxlLWhhc2hlcyAqL1xuZnVuY3Rpb24gZ2V0SGFzaChoYXNoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgaGFzaCxcbiAgICAgICAgaG1hYzogKGtleSwgLi4ubXNncykgPT4gKDAsIGhtYWNfMS5obWFjKShoYXNoLCBrZXksICgwLCB1dGlsc18xLmNvbmNhdEJ5dGVzKSguLi5tc2dzKSksXG4gICAgICAgIHJhbmRvbUJ5dGVzOiB1dGlsc18xLnJhbmRvbUJ5dGVzLFxuICAgIH07XG59XG5mdW5jdGlvbiBjcmVhdGVDdXJ2ZShjdXJ2ZURlZiwgZGVmSGFzaCkge1xuICAgIGNvbnN0IGNyZWF0ZSA9IChoYXNoKSA9PiAoMCwgd2VpZXJzdHJhc3NfdHNfMS53ZWllcnN0cmFzcykoeyAuLi5jdXJ2ZURlZiwgLi4uZ2V0SGFzaChoYXNoKSB9KTtcbiAgICByZXR1cm4geyAuLi5jcmVhdGUoZGVmSGFzaCksIGNyZWF0ZSB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9X3Nob3J0d191dGlscy5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJnZXRIYXNoIiwiY3JlYXRlQ3VydmUiLCJobWFjXzEiLCJyZXF1aXJlIiwidXRpbHNfMSIsIndlaWVyc3RyYXNzX3RzXzEiLCJoYXNoIiwiaG1hYyIsImtleSIsIm1zZ3MiLCJjb25jYXRCeXRlcyIsInJhbmRvbUJ5dGVzIiwiY3VydmVEZWYiLCJkZWZIYXNoIiwiY3JlYXRlIiwid2VpZXJzdHJhc3MiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ox/node_modules/@noble/curves/_shortw_utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ox/node_modules/@noble/curves/abstract/curve.js":
/*!**********************************************************************!*\
  !*** ./node_modules/ox/node_modules/@noble/curves/abstract/curve.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.wNAF = wNAF;\nexports.pippenger = pippenger;\nexports.precomputeMSMUnsafe = precomputeMSMUnsafe;\nexports.validateBasic = validateBasic;\n/**\n * Methods for elliptic curve multiplication by scalars.\n * Contains wNAF, pippenger\n * @module\n */ /*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */ const modular_ts_1 = __webpack_require__(/*! ./modular.js */ \"(ssr)/./node_modules/ox/node_modules/@noble/curves/abstract/modular.js\");\nconst utils_ts_1 = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/ox/node_modules/@noble/curves/abstract/utils.js\");\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nfunction constTimeNegate(condition, item) {\n    const neg = item.negate();\n    return condition ? neg : item;\n}\nfunction validateW(W, bits) {\n    if (!Number.isSafeInteger(W) || W <= 0 || W > bits) throw new Error(\"invalid window size, expected [1..\" + bits + \"], got W=\" + W);\n}\nfunction calcWOpts(W, scalarBits) {\n    validateW(W, scalarBits);\n    const windows = Math.ceil(scalarBits / W) + 1; // W=8 33. Not 32, because we skip zero\n    const windowSize = 2 ** (W - 1); // W=8 128. Not 256, because we skip zero\n    const maxNumber = 2 ** W; // W=8 256\n    const mask = (0, utils_ts_1.bitMask)(W); // W=8 255 == mask 0b11111111\n    const shiftBy = BigInt(W); // W=8 8\n    return {\n        windows,\n        windowSize,\n        mask,\n        maxNumber,\n        shiftBy\n    };\n}\nfunction calcOffsets(n, window, wOpts) {\n    const { windowSize, mask, maxNumber, shiftBy } = wOpts;\n    let wbits = Number(n & mask); // extract W bits.\n    let nextN = n >> shiftBy; // shift number by W bits.\n    // What actually happens here:\n    // const highestBit = Number(mask ^ (mask >> 1n));\n    // let wbits2 = wbits - 1; // skip zero\n    // if (wbits2 & highestBit) { wbits2 ^= Number(mask); // (~);\n    // split if bits > max: +224 => 256-32\n    if (wbits > windowSize) {\n        // we skip zero, which means instead of `>= size-1`, we do `> size`\n        wbits -= maxNumber; // -32, can be maxNumber - wbits, but then we need to set isNeg here.\n        nextN += _1n; // +256 (carry)\n    }\n    const offsetStart = window * windowSize;\n    const offset = offsetStart + Math.abs(wbits) - 1; // -1 because we skip zero\n    const isZero = wbits === 0; // is current window slice a 0?\n    const isNeg = wbits < 0; // is current window slice negative?\n    const isNegF = window % 2 !== 0; // fake random statement for noise\n    const offsetF = offsetStart; // fake offset for noise\n    return {\n        nextN,\n        offset,\n        isZero,\n        isNeg,\n        isNegF,\n        offsetF\n    };\n}\nfunction validateMSMPoints(points, c) {\n    if (!Array.isArray(points)) throw new Error(\"array expected\");\n    points.forEach((p, i)=>{\n        if (!(p instanceof c)) throw new Error(\"invalid point at index \" + i);\n    });\n}\nfunction validateMSMScalars(scalars, field) {\n    if (!Array.isArray(scalars)) throw new Error(\"array of scalars expected\");\n    scalars.forEach((s, i)=>{\n        if (!field.isValid(s)) throw new Error(\"invalid scalar at index \" + i);\n    });\n}\n// Since points in different groups cannot be equal (different object constructor),\n// we can have single place to store precomputes.\n// Allows to make points frozen / immutable.\nconst pointPrecomputes = new WeakMap();\nconst pointWindowSizes = new WeakMap();\nfunction getW(P) {\n    return pointWindowSizes.get(P) || 1;\n}\n/**\n * Elliptic curve multiplication of Point by scalar. Fragile.\n * Scalars should always be less than curve order: this should be checked inside of a curve itself.\n * Creates precomputation tables for fast multiplication:\n * - private scalar is split by fixed size windows of W bits\n * - every window point is collected from window's table & added to accumulator\n * - since windows are different, same point inside tables won't be accessed more than once per calc\n * - each multiplication is 'Math.ceil(CURVE_ORDER / ùëä) + 1' point additions (fixed for any scalar)\n * - +1 window is neccessary for wNAF\n * - wNAF reduces table size: 2x less memory + 2x faster generation, but 10% slower multiplication\n *\n * @todo Research returning 2d JS array of windows, instead of a single window.\n * This would allow windows to be in different memory locations\n */ function wNAF(c, bits) {\n    return {\n        constTimeNegate,\n        hasPrecomputes (elm) {\n            return getW(elm) !== 1;\n        },\n        // non-const time multiplication ladder\n        unsafeLadder (elm, n, p = c.ZERO) {\n            let d = elm;\n            while(n > _0n){\n                if (n & _1n) p = p.add(d);\n                d = d.double();\n                n >>= _1n;\n            }\n            return p;\n        },\n        /**\n         * Creates a wNAF precomputation window. Used for caching.\n         * Default window size is set by `utils.precompute()` and is equal to 8.\n         * Number of precomputed points depends on the curve size:\n         * 2^(ùëä‚àí1) * (Math.ceil(ùëõ / ùëä) + 1), where:\n         * - ùëä is the window size\n         * - ùëõ is the bitlength of the curve order.\n         * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.\n         * @param elm Point instance\n         * @param W window size\n         * @returns precomputed point tables flattened to a single array\n         */ precomputeWindow (elm, W) {\n            const { windows, windowSize } = calcWOpts(W, bits);\n            const points = [];\n            let p = elm;\n            let base = p;\n            for(let window = 0; window < windows; window++){\n                base = p;\n                points.push(base);\n                // i=1, bc we skip 0\n                for(let i = 1; i < windowSize; i++){\n                    base = base.add(p);\n                    points.push(base);\n                }\n                p = base.double();\n            }\n            return points;\n        },\n        /**\n         * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.\n         * @param W window size\n         * @param precomputes precomputed tables\n         * @param n scalar (we don't check here, but should be less than curve order)\n         * @returns real and fake (for const-time) points\n         */ wNAF (W, precomputes, n) {\n            // Smaller version:\n            // https://github.com/paulmillr/noble-secp256k1/blob/47cb1669b6e506ad66b35fe7d76132ae97465da2/index.ts#L502-L541\n            // TODO: check the scalar is less than group order?\n            // wNAF behavior is undefined otherwise. But have to carefully remove\n            // other checks before wNAF. ORDER == bits here.\n            // Accumulators\n            let p = c.ZERO;\n            let f = c.BASE;\n            // This code was first written with assumption that 'f' and 'p' will never be infinity point:\n            // since each addition is multiplied by 2 ** W, it cannot cancel each other. However,\n            // there is negate now: it is possible that negated element from low value\n            // would be the same as high element, which will create carry into next window.\n            // It's not obvious how this can fail, but still worth investigating later.\n            const wo = calcWOpts(W, bits);\n            for(let window = 0; window < wo.windows; window++){\n                // (n === _0n) is handled and not early-exited. isEven and offsetF are used for noise\n                const { nextN, offset, isZero, isNeg, isNegF, offsetF } = calcOffsets(n, window, wo);\n                n = nextN;\n                if (isZero) {\n                    // bits are 0: add garbage to fake point\n                    // Important part for const-time getPublicKey: add random \"noise\" point to f.\n                    f = f.add(constTimeNegate(isNegF, precomputes[offsetF]));\n                } else {\n                    // bits are 1: add to result point\n                    p = p.add(constTimeNegate(isNeg, precomputes[offset]));\n                }\n            }\n            // Return both real and fake points: JIT won't eliminate f.\n            // At this point there is a way to F be infinity-point even if p is not,\n            // which makes it less const-time: around 1 bigint multiply.\n            return {\n                p,\n                f\n            };\n        },\n        /**\n         * Implements ec unsafe (non const-time) multiplication using precomputed tables and w-ary non-adjacent form.\n         * @param W window size\n         * @param precomputes precomputed tables\n         * @param n scalar (we don't check here, but should be less than curve order)\n         * @param acc accumulator point to add result of multiplication\n         * @returns point\n         */ wNAFUnsafe (W, precomputes, n, acc = c.ZERO) {\n            const wo = calcWOpts(W, bits);\n            for(let window = 0; window < wo.windows; window++){\n                if (n === _0n) break; // Early-exit, skip 0 value\n                const { nextN, offset, isZero, isNeg } = calcOffsets(n, window, wo);\n                n = nextN;\n                if (isZero) {\n                    continue;\n                } else {\n                    const item = precomputes[offset];\n                    acc = acc.add(isNeg ? item.negate() : item); // Re-using acc allows to save adds in MSM\n                }\n            }\n            return acc;\n        },\n        getPrecomputes (W, P, transform) {\n            // Calculate precomputes on a first run, reuse them after\n            let comp = pointPrecomputes.get(P);\n            if (!comp) {\n                comp = this.precomputeWindow(P, W);\n                if (W !== 1) pointPrecomputes.set(P, transform(comp));\n            }\n            return comp;\n        },\n        wNAFCached (P, n, transform) {\n            const W = getW(P);\n            return this.wNAF(W, this.getPrecomputes(W, P, transform), n);\n        },\n        wNAFCachedUnsafe (P, n, transform, prev) {\n            const W = getW(P);\n            if (W === 1) return this.unsafeLadder(P, n, prev); // For W=1 ladder is ~x2 faster\n            return this.wNAFUnsafe(W, this.getPrecomputes(W, P, transform), n, prev);\n        },\n        // We calculate precomputes for elliptic curve point multiplication\n        // using windowed method. This specifies window size and\n        // stores precomputed values. Usually only base point would be precomputed.\n        setWindowSize (P, W) {\n            validateW(W, bits);\n            pointWindowSizes.set(P, W);\n            pointPrecomputes.delete(P);\n        }\n    };\n}\n/**\n * Pippenger algorithm for multi-scalar multiplication (MSM, Pa + Qb + Rc + ...).\n * 30x faster vs naive addition on L=4096, 10x faster than precomputes.\n * For N=254bit, L=1, it does: 1024 ADD + 254 DBL. For L=5: 1536 ADD + 254 DBL.\n * Algorithmically constant-time (for same L), even when 1 point + scalar, or when scalar = 0.\n * @param c Curve Point constructor\n * @param fieldN field over CURVE.N - important that it's not over CURVE.P\n * @param points array of L curve points\n * @param scalars array of L scalars (aka private keys / bigints)\n */ function pippenger(c, fieldN, points, scalars) {\n    // If we split scalars by some window (let's say 8 bits), every chunk will only\n    // take 256 buckets even if there are 4096 scalars, also re-uses double.\n    // TODO:\n    // - https://eprint.iacr.org/2024/750.pdf\n    // - https://tches.iacr.org/index.php/TCHES/article/view/10287\n    // 0 is accepted in scalars\n    validateMSMPoints(points, c);\n    validateMSMScalars(scalars, fieldN);\n    const plength = points.length;\n    const slength = scalars.length;\n    if (plength !== slength) throw new Error(\"arrays of points and scalars must have equal length\");\n    // if (plength === 0) throw new Error('array must be of length >= 2');\n    const zero = c.ZERO;\n    const wbits = (0, utils_ts_1.bitLen)(BigInt(plength));\n    let windowSize = 1; // bits\n    if (wbits > 12) windowSize = wbits - 3;\n    else if (wbits > 4) windowSize = wbits - 2;\n    else if (wbits > 0) windowSize = 2;\n    const MASK = (0, utils_ts_1.bitMask)(windowSize);\n    const buckets = new Array(Number(MASK) + 1).fill(zero); // +1 for zero array\n    const lastBits = Math.floor((fieldN.BITS - 1) / windowSize) * windowSize;\n    let sum = zero;\n    for(let i = lastBits; i >= 0; i -= windowSize){\n        buckets.fill(zero);\n        for(let j = 0; j < slength; j++){\n            const scalar = scalars[j];\n            const wbits = Number(scalar >> BigInt(i) & MASK);\n            buckets[wbits] = buckets[wbits].add(points[j]);\n        }\n        let resI = zero; // not using this will do small speed-up, but will lose ct\n        // Skip first bucket, because it is zero\n        for(let j = buckets.length - 1, sumI = zero; j > 0; j--){\n            sumI = sumI.add(buckets[j]);\n            resI = resI.add(sumI);\n        }\n        sum = sum.add(resI);\n        if (i !== 0) for(let j = 0; j < windowSize; j++)sum = sum.double();\n    }\n    return sum;\n}\n/**\n * Precomputed multi-scalar multiplication (MSM, Pa + Qb + Rc + ...).\n * @param c Curve Point constructor\n * @param fieldN field over CURVE.N - important that it's not over CURVE.P\n * @param points array of L curve points\n * @returns function which multiplies points with scaars\n */ function precomputeMSMUnsafe(c, fieldN, points, windowSize) {\n    /**\n     * Performance Analysis of Window-based Precomputation\n     *\n     * Base Case (256-bit scalar, 8-bit window):\n     * - Standard precomputation requires:\n     *   - 31 additions per scalar √ó 256 scalars = 7,936 ops\n     *   - Plus 255 summary additions = 8,191 total ops\n     *   Note: Summary additions can be optimized via accumulator\n     *\n     * Chunked Precomputation Analysis:\n     * - Using 32 chunks requires:\n     *   - 255 additions per chunk\n     *   - 256 doublings\n     *   - Total: (255 √ó 32) + 256 = 8,416 ops\n     *\n     * Memory Usage Comparison:\n     * Window Size | Standard Points | Chunked Points\n     * ------------|-----------------|---------------\n     *     4-bit   |     520         |      15\n     *     8-bit   |    4,224        |     255\n     *    10-bit   |   13,824        |   1,023\n     *    16-bit   |  557,056        |  65,535\n     *\n     * Key Advantages:\n     * 1. Enables larger window sizes due to reduced memory overhead\n     * 2. More efficient for smaller scalar counts:\n     *    - 16 chunks: (16 √ó 255) + 256 = 4,336 ops\n     *    - ~2x faster than standard 8,191 ops\n     *\n     * Limitations:\n     * - Not suitable for plain precomputes (requires 256 constant doublings)\n     * - Performance degrades with larger scalar counts:\n     *   - Optimal for ~256 scalars\n     *   - Less efficient for 4096+ scalars (Pippenger preferred)\n     */ validateW(windowSize, fieldN.BITS);\n    validateMSMPoints(points, c);\n    const zero = c.ZERO;\n    const tableSize = 2 ** windowSize - 1; // table size (without zero)\n    const chunks = Math.ceil(fieldN.BITS / windowSize); // chunks of item\n    const MASK = (0, utils_ts_1.bitMask)(windowSize);\n    const tables = points.map((p)=>{\n        const res = [];\n        for(let i = 0, acc = p; i < tableSize; i++){\n            res.push(acc);\n            acc = acc.add(p);\n        }\n        return res;\n    });\n    return (scalars)=>{\n        validateMSMScalars(scalars, fieldN);\n        if (scalars.length > points.length) throw new Error(\"array of scalars must be smaller than array of points\");\n        let res = zero;\n        for(let i = 0; i < chunks; i++){\n            // No need to double if accumulator is still zero.\n            if (res !== zero) for(let j = 0; j < windowSize; j++)res = res.double();\n            const shiftBy = BigInt(chunks * windowSize - (i + 1) * windowSize);\n            for(let j = 0; j < scalars.length; j++){\n                const n = scalars[j];\n                const curr = Number(n >> shiftBy & MASK);\n                if (!curr) continue; // skip zero scalars chunks\n                res = res.add(tables[j][curr - 1]);\n            }\n        }\n        return res;\n    };\n}\nfunction validateBasic(curve) {\n    (0, modular_ts_1.validateField)(curve.Fp);\n    (0, utils_ts_1.validateObject)(curve, {\n        n: \"bigint\",\n        h: \"bigint\",\n        Gx: \"field\",\n        Gy: \"field\"\n    }, {\n        nBitLength: \"isSafeInteger\",\n        nByteLength: \"isSafeInteger\"\n    });\n    // Set defaults\n    return Object.freeze({\n        ...(0, modular_ts_1.nLength)(curve.n, curve.nBitLength),\n        ...curve,\n        ...{\n            p: curve.Fp.ORDER\n        }\n    });\n} //# sourceMappingURL=curve.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb3gvbm9kZV9tb2R1bGVzL0Bub2JsZS9jdXJ2ZXMvYWJzdHJhY3QvY3VydmUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELFlBQVksR0FBR0U7QUFDZkYsaUJBQWlCLEdBQUdHO0FBQ3BCSCwyQkFBMkIsR0FBR0k7QUFDOUJKLHFCQUFxQixHQUFHSztBQUN4Qjs7OztDQUlDLEdBQ0Qsb0VBQW9FLEdBQ3BFLE1BQU1DLGVBQWVDLG1CQUFPQSxDQUFDLDRGQUFjO0FBQzNDLE1BQU1DLGFBQWFELG1CQUFPQSxDQUFDLHdGQUFZO0FBQ3ZDLE1BQU1FLE1BQU1DLE9BQU87QUFDbkIsTUFBTUMsTUFBTUQsT0FBTztBQUNuQixTQUFTRSxnQkFBZ0JDLFNBQVMsRUFBRUMsSUFBSTtJQUNwQyxNQUFNQyxNQUFNRCxLQUFLRSxNQUFNO0lBQ3ZCLE9BQU9ILFlBQVlFLE1BQU1EO0FBQzdCO0FBQ0EsU0FBU0csVUFBVUMsQ0FBQyxFQUFFQyxJQUFJO0lBQ3RCLElBQUksQ0FBQ0MsT0FBT0MsYUFBYSxDQUFDSCxNQUFNQSxLQUFLLEtBQUtBLElBQUlDLE1BQzFDLE1BQU0sSUFBSUcsTUFBTSx1Q0FBdUNILE9BQU8sY0FBY0Q7QUFDcEY7QUFDQSxTQUFTSyxVQUFVTCxDQUFDLEVBQUVNLFVBQVU7SUFDNUJQLFVBQVVDLEdBQUdNO0lBQ2IsTUFBTUMsVUFBVUMsS0FBS0MsSUFBSSxDQUFDSCxhQUFhTixLQUFLLEdBQUcsdUNBQXVDO0lBQ3RGLE1BQU1VLGFBQWEsS0FBTVYsQ0FBQUEsSUFBSSxJQUFJLHlDQUF5QztJQUMxRSxNQUFNVyxZQUFZLEtBQUtYLEdBQUcsVUFBVTtJQUNwQyxNQUFNWSxPQUFPLENBQUMsR0FBR3RCLFdBQVd1QixPQUFPLEVBQUViLElBQUksNkJBQTZCO0lBQ3RFLE1BQU1jLFVBQVV0QixPQUFPUSxJQUFJLFFBQVE7SUFDbkMsT0FBTztRQUFFTztR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LFNBQVNoRixhQUFhLENBQUN5QixJQUFJLEtBQUt6QjtZQUN2RCxJQUFLLElBQUkyRSxJQUFJLEdBQUdBLElBQUloRCxRQUFRcUMsTUFBTSxFQUFFVyxJQUFLO2dCQUNyQyxNQUFNckUsSUFBSXFCLE9BQU8sQ0FBQ2dELEVBQUU7Z0JBQ3BCLE1BQU1TLE9BQU81RixPQUFPLEtBQU1ZLFVBQVdnRTtnQkFDckMsSUFBSSxDQUFDZ0IsTUFDRCxVQUFVLDJCQUEyQjtnQkFDekNELE1BQU1BLElBQUl6QyxHQUFHLENBQUN1QyxNQUFNLENBQUNOLEVBQUUsQ0FBQ1MsT0FBTyxFQUFFO1lBQ3JDO1FBQ0o7UUFDQSxPQUFPRDtJQUNYO0FBQ0o7QUFDQSxTQUFTMUcsY0FBYzRHLEtBQUs7SUFDdkIsSUFBRzNHLGFBQWE0RyxhQUFhLEVBQUVELE1BQU1FLEVBQUU7SUFDdkMsSUFBRzNHLFdBQVc0RyxjQUFjLEVBQUVILE9BQU87UUFDbEMvRSxHQUFHO1FBQ0htRixHQUFHO1FBQ0hDLElBQUk7UUFDSkMsSUFBSTtJQUNSLEdBQUc7UUFDQ0MsWUFBWTtRQUNaQyxhQUFhO0lBQ2pCO0lBQ0EsZUFBZTtJQUNmLE9BQU8zSCxPQUFPNEgsTUFBTSxDQUFDO1FBQ2pCLEdBQUcsQ0FBQyxHQUFHcEgsYUFBYXFILE9BQU8sRUFBRVYsTUFBTS9FLENBQUMsRUFBRStFLE1BQU1PLFVBQVUsQ0FBQztRQUN2RCxHQUFHUCxLQUFLO1FBQ1IsR0FBRztZQUFFN0QsR0FBRzZELE1BQU1FLEVBQUUsQ0FBQ1MsS0FBSztRQUFDLENBQUM7SUFDNUI7QUFDSixFQUNBLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL3dzdG9uLXVpLy4vbm9kZV9tb2R1bGVzL294L25vZGVfbW9kdWxlcy9Abm9ibGUvY3VydmVzL2Fic3RyYWN0L2N1cnZlLmpzPzA2YWIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLndOQUYgPSB3TkFGO1xuZXhwb3J0cy5waXBwZW5nZXIgPSBwaXBwZW5nZXI7XG5leHBvcnRzLnByZWNvbXB1dGVNU01VbnNhZmUgPSBwcmVjb21wdXRlTVNNVW5zYWZlO1xuZXhwb3J0cy52YWxpZGF0ZUJhc2ljID0gdmFsaWRhdGVCYXNpYztcbi8qKlxuICogTWV0aG9kcyBmb3IgZWxsaXB0aWMgY3VydmUgbXVsdGlwbGljYXRpb24gYnkgc2NhbGFycy5cbiAqIENvbnRhaW5zIHdOQUYsIHBpcHBlbmdlclxuICogQG1vZHVsZVxuICovXG4vKiEgbm9ibGUtY3VydmVzIC0gTUlUIExpY2Vuc2UgKGMpIDIwMjIgUGF1bCBNaWxsZXIgKHBhdWxtaWxsci5jb20pICovXG5jb25zdCBtb2R1bGFyX3RzXzEgPSByZXF1aXJlKFwiLi9tb2R1bGFyLmpzXCIpO1xuY29uc3QgdXRpbHNfdHNfMSA9IHJlcXVpcmUoXCIuL3V0aWxzLmpzXCIpO1xuY29uc3QgXzBuID0gQmlnSW50KDApO1xuY29uc3QgXzFuID0gQmlnSW50KDEpO1xuZnVuY3Rpb24gY29uc3RUaW1lTmVnYXRlKGNvbmRpdGlvbiwgaXRlbSkge1xuICAgIGNvbnN0IG5lZyA9IGl0ZW0ubmVnYXRlKCk7XG4gICAgcmV0dXJuIGNvbmRpdGlvbiA/IG5lZyA6IGl0ZW07XG59XG5mdW5jdGlvbiB2YWxpZGF0ZVcoVywgYml0cykge1xuICAgIGlmICghTnVtYmVyLmlzU2FmZUludGVnZXIoVykgfHwgVyA8PSAwIHx8IFcgPiBiaXRzKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgd2luZG93IHNpemUsIGV4cGVjdGVkIFsxLi4nICsgYml0cyArICddLCBnb3QgVz0nICsgVyk7XG59XG5mdW5jdGlvbiBjYWxjV09wdHMoVywgc2NhbGFyQml0cykge1xuICAgIHZhbGlkYXRlVyhXLCBzY2FsYXJCaXRzKTtcbiAgICBjb25zdCB3aW5kb3dzID0gTWF0aC5jZWlsKHNjYWxhckJpdHMgLyBXKSArIDE7IC8vIFc9OCAzMy4gTm90IDMyLCBiZWNhdXNlIHdlIHNraXAgemVyb1xuICAgIGNvbnN0IHdpbmRvd1NpemUgPSAyICoqIChXIC0gMSk7IC8vIFc9OCAxMjguIE5vdCAyNTYsIGJlY2F1c2Ugd2Ugc2tpcCB6ZXJvXG4gICAgY29uc3QgbWF4TnVtYmVyID0gMiAqKiBXOyAvLyBXPTggMjU2XG4gICAgY29uc3QgbWFzayA9ICgwLCB1dGlsc190c18xLmJpdE1hc2spKFcpOyAvLyBXPTggMjU1ID09IG1hc2sgMGIxMTExMTExMVxuICAgIGNvbnN0IHNoaWZ0QnkgPSBCaWdJbnQoVyk7IC8vIFc9OCA4XG4gICAgcmV0dXJuIHsgd2luZG93cywgd2luZG93U2l6ZSwgbWFzaywgbWF4TnVtYmVyLCBzaGlmdEJ5IH07XG59XG5mdW5jdGlvbiBjYWxjT2Zmc2V0cyhuLCB3aW5kb3csIHdPcHRzKSB7XG4gICAgY29uc3QgeyB3aW5kb3dTaXplLCBtYXNrLCBtYXhOdW1iZXIsIHNoaWZ0QnkgfSA9IHdPcHRzO1xuICAgIGxldCB3Yml0cyA9IE51bWJlcihuICYgbWFzayk7IC8vIGV4dHJhY3QgVyBiaXRzLlxuICAgIGxldCBuZXh0TiA9IG4gPj4gc2hpZnRCeTsgLy8gc2hpZnQgbnVtYmVyIGJ5IFcgYml0cy5cbiAgICAvLyBXaGF0IGFjdHVhbGx5IGhhcHBlbnMgaGVyZTpcbiAgICAvLyBjb25zdCBoaWdoZXN0Qml0ID0gTnVtYmVyKG1hc2sgXiAobWFzayA+PiAxbikpO1xuICAgIC8vIGxldCB3Yml0czIgPSB3Yml0cyAtIDE7IC8vIHNraXAgemVyb1xuICAgIC8vIGlmICh3Yml0czIgJiBoaWdoZXN0Qml0KSB7IHdiaXRzMiBePSBOdW1iZXIobWFzayk7IC8vICh+KTtcbiAgICAvLyBzcGxpdCBpZiBiaXRzID4gbWF4OiArMjI0ID0+IDI1Ni0zMlxuICAgIGlmICh3Yml0cyA+IHdpbmRvd1NpemUpIHtcbiAgICAgICAgLy8gd2Ugc2tpcCB6ZXJvLCB3aGljaCBtZWFucyBpbnN0ZWFkIG9mIGA+PSBzaXplLTFgLCB3ZSBkbyBgPiBzaXplYFxuICAgICAgICB3Yml0cyAtPSBtYXhOdW1iZXI7IC8vIC0zMiwgY2FuIGJlIG1heE51bWJlciAtIHdiaXRzLCBidXQgdGhlbiB3ZSBuZWVkIHRvIHNldCBpc05lZyBoZXJlLlxuICAgICAgICBuZXh0TiArPSBfMW47IC8vICsyNTYgKGNhcnJ5KVxuICAgIH1cbiAgICBjb25zdCBvZmZzZXRTdGFydCA9IHdpbmRvdyAqIHdpbmRvd1NpemU7XG4gICAgY29uc3Qgb2Zmc2V0ID0gb2Zmc2V0U3RhcnQgKyBNYXRoLmFicyh3Yml0cykgLSAxOyAvLyAtMSBiZWNhdXNlIHdlIHNraXAgemVyb1xuICAgIGNvbnN0IGlzWmVybyA9IHdiaXRzID09PSAwOyAvLyBpcyBjdXJyZW50IHdpbmRvdyBzbGljZSBhIDA/XG4gICAgY29uc3QgaXNOZWcgPSB3Yml0cyA8IDA7IC8vIGlzIGN1cnJlbnQgd2luZG93IHNsaWNlIG5lZ2F0aXZlP1xuICAgIGNvbnN0IGlzTmVnRiA9IHdpbmRvdyAlIDIgIT09IDA7IC8vIGZha2UgcmFuZG9tIHN0YXRlbWVudCBmb3Igbm9pc2VcbiAgICBjb25zdCBvZmZzZXRGID0gb2Zmc2V0U3RhcnQ7IC8vIGZha2Ugb2Zmc2V0IGZvciBub2lzZVxuICAgIHJldHVybiB7IG5leHROLCBvZmZzZXQsIGlzWmVybywgaXNOZWcsIGlzTmVnRiwgb2Zmc2V0RiB9O1xufVxuZnVuY3Rpb24gdmFsaWRhdGVNU01Qb2ludHMocG9pbnRzLCBjKSB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KHBvaW50cykpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignYXJyYXkgZXhwZWN0ZWQnKTtcbiAgICBwb2ludHMuZm9yRWFjaCgocCwgaSkgPT4ge1xuICAgICAgICBpZiAoIShwIGluc3RhbmNlb2YgYykpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgcG9pbnQgYXQgaW5kZXggJyArIGkpO1xuICAgIH0pO1xufVxuZnVuY3Rpb24gdmFsaWRhdGVNU01TY2FsYXJzKHNjYWxhcnMsIGZpZWxkKSB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KHNjYWxhcnMpKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2FycmF5IG9mIHNjYWxhcnMgZXhwZWN0ZWQnKTtcbiAgICBzY2FsYXJzLmZvckVhY2goKHMsIGkpID0+IHtcbiAgICAgICAgaWYgKCFmaWVsZC5pc1ZhbGlkKHMpKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIHNjYWxhciBhdCBpbmRleCAnICsgaSk7XG4gICAgfSk7XG59XG4vLyBTaW5jZSBwb2ludHMgaW4gZGlmZmVyZW50IGdyb3VwcyBjYW5ub3QgYmUgZXF1YWwgKGRpZmZlcmVudCBvYmplY3QgY29uc3RydWN0b3IpLFxuLy8gd2UgY2FuIGhhdmUgc2luZ2xlIHBsYWNlIHRvIHN0b3JlIHByZWNvbXB1dGVzLlxuLy8gQWxsb3dzIHRvIG1ha2UgcG9pbnRzIGZyb3plbiAvIGltbXV0YWJsZS5cbmNvbnN0IHBvaW50UHJlY29tcHV0ZXMgPSBuZXcgV2Vha01hcCgpO1xuY29uc3QgcG9pbnRXaW5kb3dTaXplcyA9IG5ldyBXZWFrTWFwKCk7XG5mdW5jdGlvbiBnZXRXKFApIHtcbiAgICByZXR1cm4gcG9pbnRXaW5kb3dTaXplcy5nZXQoUCkgfHwgMTtcbn1cbi8qKlxuICogRWxsaXB0aWMgY3VydmUgbXVsdGlwbGljYXRpb24gb2YgUG9pbnQgYnkgc2NhbGFyLiBGcmFnaWxlLlxuICogU2NhbGFycyBzaG91bGQgYWx3YXlzIGJlIGxlc3MgdGhhbiBjdXJ2ZSBvcmRlcjogdGhpcyBzaG91bGQgYmUgY2hlY2tlZCBpbnNpZGUgb2YgYSBjdXJ2ZSBpdHNlbGYuXG4gKiBDcmVhdGVzIHByZWNvbXB1dGF0aW9uIHRhYmxlcyBmb3IgZmFzdCBtdWx0aXBsaWNhdGlvbjpcbiAqIC0gcHJpdmF0ZSBzY2FsYXIgaXMgc3BsaXQgYnkgZml4ZWQgc2l6ZSB3aW5kb3dzIG9mIFcgYml0c1xuICogLSBldmVyeSB3aW5kb3cgcG9pbnQgaXMgY29sbGVjdGVkIGZyb20gd2luZG93J3MgdGFibGUgJiBhZGRlZCB0byBhY2N1bXVsYXRvclxuICogLSBzaW5jZSB3aW5kb3dzIGFyZSBkaWZmZXJlbnQsIHNhbWUgcG9pbnQgaW5zaWRlIHRhYmxlcyB3b24ndCBiZSBhY2Nlc3NlZCBtb3JlIHRoYW4gb25jZSBwZXIgY2FsY1xuICogLSBlYWNoIG11bHRpcGxpY2F0aW9uIGlzICdNYXRoLmNlaWwoQ1VSVkVfT1JERVIgLyDwnZGKKSArIDEnIHBvaW50IGFkZGl0aW9ucyAoZml4ZWQgZm9yIGFueSBzY2FsYXIpXG4gKiAtICsxIHdpbmRvdyBpcyBuZWNjZXNzYXJ5IGZvciB3TkFGXG4gKiAtIHdOQUYgcmVkdWNlcyB0YWJsZSBzaXplOiAyeCBsZXNzIG1lbW9yeSArIDJ4IGZhc3RlciBnZW5lcmF0aW9uLCBidXQgMTAlIHNsb3dlciBtdWx0aXBsaWNhdGlvblxuICpcbiAqIEB0b2RvIFJlc2VhcmNoIHJldHVybmluZyAyZCBKUyBhcnJheSBvZiB3aW5kb3dzLCBpbnN0ZWFkIG9mIGEgc2luZ2xlIHdpbmRvdy5cbiAqIFRoaXMgd291bGQgYWxsb3cgd2luZG93cyB0byBiZSBpbiBkaWZmZXJlbnQgbWVtb3J5IGxvY2F0aW9uc1xuICovXG5mdW5jdGlvbiB3TkFGKGMsIGJpdHMpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBjb25zdFRpbWVOZWdhdGUsXG4gICAgICAgIGhhc1ByZWNvbXB1dGVzKGVsbSkge1xuICAgICAgICAgICAgcmV0dXJuIGdldFcoZWxtKSAhPT0gMTtcbiAgICAgICAgfSxcbiAgICAgICAgLy8gbm9uLWNvbnN0IHRpbWUgbXVsdGlwbGljYXRpb24gbGFkZGVyXG4gICAgICAgIHVuc2FmZUxhZGRlcihlbG0sIG4sIHAgPSBjLlpFUk8pIHtcbiAgICAgICAgICAgIGxldCBkID0gZWxtO1xuICAgICAgICAgICAgd2hpbGUgKG4gPiBfMG4pIHtcbiAgICAgICAgICAgICAgICBpZiAobiAmIF8xbilcbiAgICAgICAgICAgICAgICAgICAgcCA9IHAuYWRkKGQpO1xuICAgICAgICAgICAgICAgIGQgPSBkLmRvdWJsZSgpO1xuICAgICAgICAgICAgICAgIG4gPj49IF8xbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBwO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogQ3JlYXRlcyBhIHdOQUYgcHJlY29tcHV0YXRpb24gd2luZG93LiBVc2VkIGZvciBjYWNoaW5nLlxuICAgICAgICAgKiBEZWZhdWx0IHdpbmRvdyBzaXplIGlzIHNldCBieSBgdXRpbHMucHJlY29tcHV0ZSgpYCBhbmQgaXMgZXF1YWwgdG8gOC5cbiAgICAgICAgICogTnVtYmVyIG9mIHByZWNvbXB1dGVkIHBvaW50cyBkZXBlbmRzIG9uIHRoZSBjdXJ2ZSBzaXplOlxuICAgICAgICAgKiAyXijwnZGK4oiSMSkgKiAoTWF0aC5jZWlsKPCdkZsgLyDwnZGKKSArIDEpLCB3aGVyZTpcbiAgICAgICAgICogLSDwnZGKIGlzIHRoZSB3aW5kb3cgc2l6ZVxuICAgICAgICAgKiAtIPCdkZsgaXMgdGhlIGJpdGxlbmd0aCBvZiB0aGUgY3VydmUgb3JkZXIuXG4gICAgICAgICAqIEZvciBhIDI1Ni1iaXQgY3VydmUgYW5kIHdpbmRvdyBzaXplIDgsIHRoZSBudW1iZXIgb2YgcHJlY29tcHV0ZWQgcG9pbnRzIGlzIDEyOCAqIDMzID0gNDIyNC5cbiAgICAgICAgICogQHBhcmFtIGVsbSBQb2ludCBpbnN0YW5jZVxuICAgICAgICAgKiBAcGFyYW0gVyB3aW5kb3cgc2l6ZVxuICAgICAgICAgKiBAcmV0dXJucyBwcmVjb21wdXRlZCBwb2ludCB0YWJsZXMgZmxhdHRlbmVkIHRvIGEgc2luZ2xlIGFycmF5XG4gICAgICAgICAqL1xuICAgICAgICBwcmVjb21wdXRlV2luZG93KGVsbSwgVykge1xuICAgICAgICAgICAgY29uc3QgeyB3aW5kb3dzLCB3aW5kb3dTaXplIH0gPSBjYWxjV09wdHMoVywgYml0cyk7XG4gICAgICAgICAgICBjb25zdCBwb2ludHMgPSBbXTtcbiAgICAgICAgICAgIGxldCBwID0gZWxtO1xuICAgICAgICAgICAgbGV0IGJhc2UgPSBwO1xuICAgICAgICAgICAgZm9yIChsZXQgd2luZG93ID0gMDsgd2luZG93IDwgd2luZG93czsgd2luZG93KyspIHtcbiAgICAgICAgICAgICAgICBiYXNlID0gcDtcbiAgICAgICAgICAgICAgICBwb2ludHMucHVzaChiYXNlKTtcbiAgICAgICAgICAgICAgICAvLyBpPTEsIGJjIHdlIHNraXAgMFxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDwgd2luZG93U2l6ZTsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGJhc2UgPSBiYXNlLmFkZChwKTtcbiAgICAgICAgICAgICAgICAgICAgcG9pbnRzLnB1c2goYmFzZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHAgPSBiYXNlLmRvdWJsZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHBvaW50cztcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEltcGxlbWVudHMgZWMgbXVsdGlwbGljYXRpb24gdXNpbmcgcHJlY29tcHV0ZWQgdGFibGVzIGFuZCB3LWFyeSBub24tYWRqYWNlbnQgZm9ybS5cbiAgICAgICAgICogQHBhcmFtIFcgd2luZG93IHNpemVcbiAgICAgICAgICogQHBhcmFtIHByZWNvbXB1dGVzIHByZWNvbXB1dGVkIHRhYmxlc1xuICAgICAgICAgKiBAcGFyYW0gbiBzY2FsYXIgKHdlIGRvbid0IGNoZWNrIGhlcmUsIGJ1dCBzaG91bGQgYmUgbGVzcyB0aGFuIGN1cnZlIG9yZGVyKVxuICAgICAgICAgKiBAcmV0dXJucyByZWFsIGFuZCBmYWtlIChmb3IgY29uc3QtdGltZSkgcG9pbnRzXG4gICAgICAgICAqL1xuICAgICAgICB3TkFGKFcsIHByZWNvbXB1dGVzLCBuKSB7XG4gICAgICAgICAgICAvLyBTbWFsbGVyIHZlcnNpb246XG4gICAgICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vcGF1bG1pbGxyL25vYmxlLXNlY3AyNTZrMS9ibG9iLzQ3Y2IxNjY5YjZlNTA2YWQ2NmIzNWZlN2Q3NjEzMmFlOTc0NjVkYTIvaW5kZXgudHMjTDUwMi1MNTQxXG4gICAgICAgICAgICAvLyBUT0RPOiBjaGVjayB0aGUgc2NhbGFyIGlzIGxlc3MgdGhhbiBncm91cCBvcmRlcj9cbiAgICAgICAgICAgIC8vIHdOQUYgYmVoYXZpb3IgaXMgdW5kZWZpbmVkIG90aGVyd2lzZS4gQnV0IGhhdmUgdG8gY2FyZWZ1bGx5IHJlbW92ZVxuICAgICAgICAgICAgLy8gb3RoZXIgY2hlY2tzIGJlZm9yZSB3TkFGLiBPUkRFUiA9PSBiaXRzIGhlcmUuXG4gICAgICAgICAgICAvLyBBY2N1bXVsYXRvcnNcbiAgICAgICAgICAgIGxldCBwID0gYy5aRVJPO1xuICAgICAgICAgICAgbGV0IGYgPSBjLkJBU0U7XG4gICAgICAgICAgICAvLyBUaGlzIGNvZGUgd2FzIGZpcnN0IHdyaXR0ZW4gd2l0aCBhc3N1bXB0aW9uIHRoYXQgJ2YnIGFuZCAncCcgd2lsbCBuZXZlciBiZSBpbmZpbml0eSBwb2ludDpcbiAgICAgICAgICAgIC8vIHNpbmNlIGVhY2ggYWRkaXRpb24gaXMgbXVsdGlwbGllZCBieSAyICoqIFcsIGl0IGNhbm5vdCBjYW5jZWwgZWFjaCBvdGhlci4gSG93ZXZlcixcbiAgICAgICAgICAgIC8vIHRoZXJlIGlzIG5lZ2F0ZSBub3c6IGl0IGlzIHBvc3NpYmxlIHRoYXQgbmVnYXRlZCBlbGVtZW50IGZyb20gbG93IHZhbHVlXG4gICAgICAgICAgICAvLyB3b3VsZCBiZSB0aGUgc2FtZSBhcyBoaWdoIGVsZW1lbnQsIHdoaWNoIHdpbGwgY3JlYXRlIGNhcnJ5IGludG8gbmV4dCB3aW5kb3cuXG4gICAgICAgICAgICAvLyBJdCdzIG5vdCBvYnZpb3VzIGhvdyB0aGlzIGNhbiBmYWlsLCBidXQgc3RpbGwgd29ydGggaW52ZXN0aWdhdGluZyBsYXRlci5cbiAgICAgICAgICAgIGNvbnN0IHdvID0gY2FsY1dPcHRzKFcsIGJpdHMpO1xuICAgICAgICAgICAgZm9yIChsZXQgd2luZG93ID0gMDsgd2luZG93IDwgd28ud2luZG93czsgd2luZG93KyspIHtcbiAgICAgICAgICAgICAgICAvLyAobiA9PT0gXzBuKSBpcyBoYW5kbGVkIGFuZCBub3QgZWFybHktZXhpdGVkLiBpc0V2ZW4gYW5kIG9mZnNldEYgYXJlIHVzZWQgZm9yIG5vaXNlXG4gICAgICAgICAgICAgICAgY29uc3QgeyBuZXh0Tiwgb2Zmc2V0LCBpc1plcm8sIGlzTmVnLCBpc05lZ0YsIG9mZnNldEYgfSA9IGNhbGNPZmZzZXRzKG4sIHdpbmRvdywgd28pO1xuICAgICAgICAgICAgICAgIG4gPSBuZXh0TjtcbiAgICAgICAgICAgICAgICBpZiAoaXNaZXJvKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGJpdHMgYXJlIDA6IGFkZCBnYXJiYWdlIHRvIGZha2UgcG9pbnRcbiAgICAgICAgICAgICAgICAgICAgLy8gSW1wb3J0YW50IHBhcnQgZm9yIGNvbnN0LXRpbWUgZ2V0UHVibGljS2V5OiBhZGQgcmFuZG9tIFwibm9pc2VcIiBwb2ludCB0byBmLlxuICAgICAgICAgICAgICAgICAgICBmID0gZi5hZGQoY29uc3RUaW1lTmVnYXRlKGlzTmVnRiwgcHJlY29tcHV0ZXNbb2Zmc2V0Rl0pKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGJpdHMgYXJlIDE6IGFkZCB0byByZXN1bHQgcG9pbnRcbiAgICAgICAgICAgICAgICAgICAgcCA9IHAuYWRkKGNvbnN0VGltZU5lZ2F0ZShpc05lZywgcHJlY29tcHV0ZXNbb2Zmc2V0XSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFJldHVybiBib3RoIHJlYWwgYW5kIGZha2UgcG9pbnRzOiBKSVQgd29uJ3QgZWxpbWluYXRlIGYuXG4gICAgICAgICAgICAvLyBBdCB0aGlzIHBvaW50IHRoZXJlIGlzIGEgd2F5IHRvIEYgYmUgaW5maW5pdHktcG9pbnQgZXZlbiBpZiBwIGlzIG5vdCxcbiAgICAgICAgICAgIC8vIHdoaWNoIG1ha2VzIGl0IGxlc3MgY29uc3QtdGltZTogYXJvdW5kIDEgYmlnaW50IG11bHRpcGx5LlxuICAgICAgICAgICAgcmV0dXJuIHsgcCwgZiB9O1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogSW1wbGVtZW50cyBlYyB1bnNhZmUgKG5vbiBjb25zdC10aW1lKSBtdWx0aXBsaWNhdGlvbiB1c2luZyBwcmVjb21wdXRlZCB0YWJsZXMgYW5kIHctYXJ5IG5vbi1hZGphY2VudCBmb3JtLlxuICAgICAgICAgKiBAcGFyYW0gVyB3aW5kb3cgc2l6ZVxuICAgICAgICAgKiBAcGFyYW0gcHJlY29tcHV0ZXMgcHJlY29tcHV0ZWQgdGFibGVzXG4gICAgICAgICAqIEBwYXJhbSBuIHNjYWxhciAod2UgZG9uJ3QgY2hlY2sgaGVyZSwgYnV0IHNob3VsZCBiZSBsZXNzIHRoYW4gY3VydmUgb3JkZXIpXG4gICAgICAgICAqIEBwYXJhbSBhY2MgYWNjdW11bGF0b3IgcG9pbnQgdG8gYWRkIHJlc3VsdCBvZiBtdWx0aXBsaWNhdGlvblxuICAgICAgICAgKiBAcmV0dXJucyBwb2ludFxuICAgICAgICAgKi9cbiAgICAgICAgd05BRlVuc2FmZShXLCBwcmVjb21wdXRlcywgbiwgYWNjID0gYy5aRVJPKSB7XG4gICAgICAgICAgICBjb25zdCB3byA9IGNhbGNXT3B0cyhXLCBiaXRzKTtcbiAgICAgICAgICAgIGZvciAobGV0IHdpbmRvdyA9IDA7IHdpbmRvdyA8IHdvLndpbmRvd3M7IHdpbmRvdysrKSB7XG4gICAgICAgICAgICAgICAgaWYgKG4gPT09IF8wbilcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7IC8vIEVhcmx5LWV4aXQsIHNraXAgMCB2YWx1ZVxuICAgICAgICAgICAgICAgIGNvbnN0IHsgbmV4dE4sIG9mZnNldCwgaXNaZXJvLCBpc05lZyB9ID0gY2FsY09mZnNldHMobiwgd2luZG93LCB3byk7XG4gICAgICAgICAgICAgICAgbiA9IG5leHROO1xuICAgICAgICAgICAgICAgIGlmIChpc1plcm8pIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gV2luZG93IGJpdHMgYXJlIDA6IHNraXAgcHJvY2Vzc2luZy5cbiAgICAgICAgICAgICAgICAgICAgLy8gTW92ZSB0byBuZXh0IHdpbmRvdy5cbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBpdGVtID0gcHJlY29tcHV0ZXNbb2Zmc2V0XTtcbiAgICAgICAgICAgICAgICAgICAgYWNjID0gYWNjLmFkZChpc05lZyA/IGl0ZW0ubmVnYXRlKCkgOiBpdGVtKTsgLy8gUmUtdXNpbmcgYWNjIGFsbG93cyB0byBzYXZlIGFkZHMgaW4gTVNNXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGFjYztcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0UHJlY29tcHV0ZXMoVywgUCwgdHJhbnNmb3JtKSB7XG4gICAgICAgICAgICAvLyBDYWxjdWxhdGUgcHJlY29tcHV0ZXMgb24gYSBmaXJzdCBydW4sIHJldXNlIHRoZW0gYWZ0ZXJcbiAgICAgICAgICAgIGxldCBjb21wID0gcG9pbnRQcmVjb21wdXRlcy5nZXQoUCk7XG4gICAgICAgICAgICBpZiAoIWNvbXApIHtcbiAgICAgICAgICAgICAgICBjb21wID0gdGhpcy5wcmVjb21wdXRlV2luZG93KFAsIFcpO1xuICAgICAgICAgICAgICAgIGlmIChXICE9PSAxKVxuICAgICAgICAgICAgICAgICAgICBwb2ludFByZWNvbXB1dGVzLnNldChQLCB0cmFuc2Zvcm0oY29tcCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGNvbXA7XG4gICAgICAgIH0sXG4gICAgICAgIHdOQUZDYWNoZWQoUCwgbiwgdHJhbnNmb3JtKSB7XG4gICAgICAgICAgICBjb25zdCBXID0gZ2V0VyhQKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLndOQUYoVywgdGhpcy5nZXRQcmVjb21wdXRlcyhXLCBQLCB0cmFuc2Zvcm0pLCBuKTtcbiAgICAgICAgfSxcbiAgICAgICAgd05BRkNhY2hlZFVuc2FmZShQLCBuLCB0cmFuc2Zvcm0sIHByZXYpIHtcbiAgICAgICAgICAgIGNvbnN0IFcgPSBnZXRXKFApO1xuICAgICAgICAgICAgaWYgKFcgPT09IDEpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudW5zYWZlTGFkZGVyKFAsIG4sIHByZXYpOyAvLyBGb3IgVz0xIGxhZGRlciBpcyB+eDIgZmFzdGVyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy53TkFGVW5zYWZlKFcsIHRoaXMuZ2V0UHJlY29tcHV0ZXMoVywgUCwgdHJhbnNmb3JtKSwgbiwgcHJldik7XG4gICAgICAgIH0sXG4gICAgICAgIC8vIFdlIGNhbGN1bGF0ZSBwcmVjb21wdXRlcyBmb3IgZWxsaXB0aWMgY3VydmUgcG9pbnQgbXVsdGlwbGljYXRpb25cbiAgICAgICAgLy8gdXNpbmcgd2luZG93ZWQgbWV0aG9kLiBUaGlzIHNwZWNpZmllcyB3aW5kb3cgc2l6ZSBhbmRcbiAgICAgICAgLy8gc3RvcmVzIHByZWNvbXB1dGVkIHZhbHVlcy4gVXN1YWxseSBvbmx5IGJhc2UgcG9pbnQgd291bGQgYmUgcHJlY29tcHV0ZWQuXG4gICAgICAgIHNldFdpbmRvd1NpemUoUCwgVykge1xuICAgICAgICAgICAgdmFsaWRhdGVXKFcsIGJpdHMpO1xuICAgICAgICAgICAgcG9pbnRXaW5kb3dTaXplcy5zZXQoUCwgVyk7XG4gICAgICAgICAgICBwb2ludFByZWNvbXB1dGVzLmRlbGV0ZShQKTtcbiAgICAgICAgfSxcbiAgICB9O1xufVxuLyoqXG4gKiBQaXBwZW5nZXIgYWxnb3JpdGhtIGZvciBtdWx0aS1zY2FsYXIgbXVsdGlwbGljYXRpb24gKE1TTSwgUGEgKyBRYiArIFJjICsgLi4uKS5cbiAqIDMweCBmYXN0ZXIgdnMgbmFpdmUgYWRkaXRpb24gb24gTD00MDk2LCAxMHggZmFzdGVyIHRoYW4gcHJlY29tcHV0ZXMuXG4gKiBGb3IgTj0yNTRiaXQsIEw9MSwgaXQgZG9lczogMTAyNCBBREQgKyAyNTQgREJMLiBGb3IgTD01OiAxNTM2IEFERCArIDI1NCBEQkwuXG4gKiBBbGdvcml0aG1pY2FsbHkgY29uc3RhbnQtdGltZSAoZm9yIHNhbWUgTCksIGV2ZW4gd2hlbiAxIHBvaW50ICsgc2NhbGFyLCBvciB3aGVuIHNjYWxhciA9IDAuXG4gKiBAcGFyYW0gYyBDdXJ2ZSBQb2ludCBjb25zdHJ1Y3RvclxuICogQHBhcmFtIGZpZWxkTiBmaWVsZCBvdmVyIENVUlZFLk4gLSBpbXBvcnRhbnQgdGhhdCBpdCdzIG5vdCBvdmVyIENVUlZFLlBcbiAqIEBwYXJhbSBwb2ludHMgYXJyYXkgb2YgTCBjdXJ2ZSBwb2ludHNcbiAqIEBwYXJhbSBzY2FsYXJzIGFycmF5IG9mIEwgc2NhbGFycyAoYWthIHByaXZhdGUga2V5cyAvIGJpZ2ludHMpXG4gKi9cbmZ1bmN0aW9uIHBpcHBlbmdlcihjLCBmaWVsZE4sIHBvaW50cywgc2NhbGFycykge1xuICAgIC8vIElmIHdlIHNwbGl0IHNjYWxhcnMgYnkgc29tZSB3aW5kb3cgKGxldCdzIHNheSA4IGJpdHMpLCBldmVyeSBjaHVuayB3aWxsIG9ubHlcbiAgICAvLyB0YWtlIDI1NiBidWNrZXRzIGV2ZW4gaWYgdGhlcmUgYXJlIDQwOTYgc2NhbGFycywgYWxzbyByZS11c2VzIGRvdWJsZS5cbiAgICAvLyBUT0RPOlxuICAgIC8vIC0gaHR0cHM6Ly9lcHJpbnQuaWFjci5vcmcvMjAyNC83NTAucGRmXG4gICAgLy8gLSBodHRwczovL3RjaGVzLmlhY3Iub3JnL2luZGV4LnBocC9UQ0hFUy9hcnRpY2xlL3ZpZXcvMTAyODdcbiAgICAvLyAwIGlzIGFjY2VwdGVkIGluIHNjYWxhcnNcbiAgICB2YWxpZGF0ZU1TTVBvaW50cyhwb2ludHMsIGMpO1xuICAgIHZhbGlkYXRlTVNNU2NhbGFycyhzY2FsYXJzLCBmaWVsZE4pO1xuICAgIGNvbnN0IHBsZW5ndGggPSBwb2ludHMubGVuZ3RoO1xuICAgIGNvbnN0IHNsZW5ndGggPSBzY2FsYXJzLmxlbmd0aDtcbiAgICBpZiAocGxlbmd0aCAhPT0gc2xlbmd0aClcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdhcnJheXMgb2YgcG9pbnRzIGFuZCBzY2FsYXJzIG11c3QgaGF2ZSBlcXVhbCBsZW5ndGgnKTtcbiAgICAvLyBpZiAocGxlbmd0aCA9PT0gMCkgdGhyb3cgbmV3IEVycm9yKCdhcnJheSBtdXN0IGJlIG9mIGxlbmd0aCA+PSAyJyk7XG4gICAgY29uc3QgemVybyA9IGMuWkVSTztcbiAgICBjb25zdCB3Yml0cyA9ICgwLCB1dGlsc190c18xLmJpdExlbikoQmlnSW50KHBsZW5ndGgpKTtcbiAgICBsZXQgd2luZG93U2l6ZSA9IDE7IC8vIGJpdHNcbiAgICBpZiAod2JpdHMgPiAxMilcbiAgICAgICAgd2luZG93U2l6ZSA9IHdiaXRzIC0gMztcbiAgICBlbHNlIGlmICh3Yml0cyA+IDQpXG4gICAgICAgIHdpbmRvd1NpemUgPSB3Yml0cyAtIDI7XG4gICAgZWxzZSBpZiAod2JpdHMgPiAwKVxuICAgICAgICB3aW5kb3dTaXplID0gMjtcbiAgICBjb25zdCBNQVNLID0gKDAsIHV0aWxzX3RzXzEuYml0TWFzaykod2luZG93U2l6ZSk7XG4gICAgY29uc3QgYnVja2V0cyA9IG5ldyBBcnJheShOdW1iZXIoTUFTSykgKyAxKS5maWxsKHplcm8pOyAvLyArMSBmb3IgemVybyBhcnJheVxuICAgIGNvbnN0IGxhc3RCaXRzID0gTWF0aC5mbG9vcigoZmllbGROLkJJVFMgLSAxKSAvIHdpbmRvd1NpemUpICogd2luZG93U2l6ZTtcbiAgICBsZXQgc3VtID0gemVybztcbiAgICBmb3IgKGxldCBpID0gbGFzdEJpdHM7IGkgPj0gMDsgaSAtPSB3aW5kb3dTaXplKSB7XG4gICAgICAgIGJ1Y2tldHMuZmlsbCh6ZXJvKTtcbiAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBzbGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgIGNvbnN0IHNjYWxhciA9IHNjYWxhcnNbal07XG4gICAgICAgICAgICBjb25zdCB3Yml0cyA9IE51bWJlcigoc2NhbGFyID4+IEJpZ0ludChpKSkgJiBNQVNLKTtcbiAgICAgICAgICAgIGJ1Y2tldHNbd2JpdHNdID0gYnVja2V0c1t3Yml0c10uYWRkKHBvaW50c1tqXSk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHJlc0kgPSB6ZXJvOyAvLyBub3QgdXNpbmcgdGhpcyB3aWxsIGRvIHNtYWxsIHNwZWVkLXVwLCBidXQgd2lsbCBsb3NlIGN0XG4gICAgICAgIC8vIFNraXAgZmlyc3QgYnVja2V0LCBiZWNhdXNlIGl0IGlzIHplcm9cbiAgICAgICAgZm9yIChsZXQgaiA9IGJ1Y2tldHMubGVuZ3RoIC0gMSwgc3VtSSA9IHplcm87IGogPiAwOyBqLS0pIHtcbiAgICAgICAgICAgIHN1bUkgPSBzdW1JLmFkZChidWNrZXRzW2pdKTtcbiAgICAgICAgICAgIHJlc0kgPSByZXNJLmFkZChzdW1JKTtcbiAgICAgICAgfVxuICAgICAgICBzdW0gPSBzdW0uYWRkKHJlc0kpO1xuICAgICAgICBpZiAoaSAhPT0gMClcbiAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgd2luZG93U2l6ZTsgaisrKVxuICAgICAgICAgICAgICAgIHN1bSA9IHN1bS5kb3VibGUoKTtcbiAgICB9XG4gICAgcmV0dXJuIHN1bTtcbn1cbi8qKlxuICogUHJlY29tcHV0ZWQgbXVsdGktc2NhbGFyIG11bHRpcGxpY2F0aW9uIChNU00sIFBhICsgUWIgKyBSYyArIC4uLikuXG4gKiBAcGFyYW0gYyBDdXJ2ZSBQb2ludCBjb25zdHJ1Y3RvclxuICogQHBhcmFtIGZpZWxkTiBmaWVsZCBvdmVyIENVUlZFLk4gLSBpbXBvcnRhbnQgdGhhdCBpdCdzIG5vdCBvdmVyIENVUlZFLlBcbiAqIEBwYXJhbSBwb2ludHMgYXJyYXkgb2YgTCBjdXJ2ZSBwb2ludHNcbiAqIEByZXR1cm5zIGZ1bmN0aW9uIHdoaWNoIG11bHRpcGxpZXMgcG9pbnRzIHdpdGggc2NhYXJzXG4gKi9cbmZ1bmN0aW9uIHByZWNvbXB1dGVNU01VbnNhZmUoYywgZmllbGROLCBwb2ludHMsIHdpbmRvd1NpemUpIHtcbiAgICAvKipcbiAgICAgKiBQZXJmb3JtYW5jZSBBbmFseXNpcyBvZiBXaW5kb3ctYmFzZWQgUHJlY29tcHV0YXRpb25cbiAgICAgKlxuICAgICAqIEJhc2UgQ2FzZSAoMjU2LWJpdCBzY2FsYXIsIDgtYml0IHdpbmRvdyk6XG4gICAgICogLSBTdGFuZGFyZCBwcmVjb21wdXRhdGlvbiByZXF1aXJlczpcbiAgICAgKiAgIC0gMzEgYWRkaXRpb25zIHBlciBzY2FsYXIgw5cgMjU2IHNjYWxhcnMgPSA3LDkzNiBvcHNcbiAgICAgKiAgIC0gUGx1cyAyNTUgc3VtbWFyeSBhZGRpdGlvbnMgPSA4LDE5MSB0b3RhbCBvcHNcbiAgICAgKiAgIE5vdGU6IFN1bW1hcnkgYWRkaXRpb25zIGNhbiBiZSBvcHRpbWl6ZWQgdmlhIGFjY3VtdWxhdG9yXG4gICAgICpcbiAgICAgKiBDaHVua2VkIFByZWNvbXB1dGF0aW9uIEFuYWx5c2lzOlxuICAgICAqIC0gVXNpbmcgMzIgY2h1bmtzIHJlcXVpcmVzOlxuICAgICAqICAgLSAyNTUgYWRkaXRpb25zIHBlciBjaHVua1xuICAgICAqICAgLSAyNTYgZG91YmxpbmdzXG4gICAgICogICAtIFRvdGFsOiAoMjU1IMOXIDMyKSArIDI1NiA9IDgsNDE2IG9wc1xuICAgICAqXG4gICAgICogTWVtb3J5IFVzYWdlIENvbXBhcmlzb246XG4gICAgICogV2luZG93IFNpemUgfCBTdGFuZGFyZCBQb2ludHMgfCBDaHVua2VkIFBvaW50c1xuICAgICAqIC0tLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS1cbiAgICAgKiAgICAgNC1iaXQgICB8ICAgICA1MjAgICAgICAgICB8ICAgICAgMTVcbiAgICAgKiAgICAgOC1iaXQgICB8ICAgIDQsMjI0ICAgICAgICB8ICAgICAyNTVcbiAgICAgKiAgICAxMC1iaXQgICB8ICAgMTMsODI0ICAgICAgICB8ICAgMSwwMjNcbiAgICAgKiAgICAxNi1iaXQgICB8ICA1NTcsMDU2ICAgICAgICB8ICA2NSw1MzVcbiAgICAgKlxuICAgICAqIEtleSBBZHZhbnRhZ2VzOlxuICAgICAqIDEuIEVuYWJsZXMgbGFyZ2VyIHdpbmRvdyBzaXplcyBkdWUgdG8gcmVkdWNlZCBtZW1vcnkgb3ZlcmhlYWRcbiAgICAgKiAyLiBNb3JlIGVmZmljaWVudCBmb3Igc21hbGxlciBzY2FsYXIgY291bnRzOlxuICAgICAqICAgIC0gMTYgY2h1bmtzOiAoMTYgw5cgMjU1KSArIDI1NiA9IDQsMzM2IG9wc1xuICAgICAqICAgIC0gfjJ4IGZhc3RlciB0aGFuIHN0YW5kYXJkIDgsMTkxIG9wc1xuICAgICAqXG4gICAgICogTGltaXRhdGlvbnM6XG4gICAgICogLSBOb3Qgc3VpdGFibGUgZm9yIHBsYWluIHByZWNvbXB1dGVzIChyZXF1aXJlcyAyNTYgY29uc3RhbnQgZG91YmxpbmdzKVxuICAgICAqIC0gUGVyZm9ybWFuY2UgZGVncmFkZXMgd2l0aCBsYXJnZXIgc2NhbGFyIGNvdW50czpcbiAgICAgKiAgIC0gT3B0aW1hbCBmb3IgfjI1NiBzY2FsYXJzXG4gICAgICogICAtIExlc3MgZWZmaWNpZW50IGZvciA0MDk2KyBzY2FsYXJzIChQaXBwZW5nZXIgcHJlZmVycmVkKVxuICAgICAqL1xuICAgIHZhbGlkYXRlVyh3aW5kb3dTaXplLCBmaWVsZE4uQklUUyk7XG4gICAgdmFsaWRhdGVNU01Qb2ludHMocG9pbnRzLCBjKTtcbiAgICBjb25zdCB6ZXJvID0gYy5aRVJPO1xuICAgIGNvbnN0IHRhYmxlU2l6ZSA9IDIgKiogd2luZG93U2l6ZSAtIDE7IC8vIHRhYmxlIHNpemUgKHdpdGhvdXQgemVybylcbiAgICBjb25zdCBjaHVua3MgPSBNYXRoLmNlaWwoZmllbGROLkJJVFMgLyB3aW5kb3dTaXplKTsgLy8gY2h1bmtzIG9mIGl0ZW1cbiAgICBjb25zdCBNQVNLID0gKDAsIHV0aWxzX3RzXzEuYml0TWFzaykod2luZG93U2l6ZSk7XG4gICAgY29uc3QgdGFibGVzID0gcG9pbnRzLm1hcCgocCkgPT4ge1xuICAgICAgICBjb25zdCByZXMgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGFjYyA9IHA7IGkgPCB0YWJsZVNpemU7IGkrKykge1xuICAgICAgICAgICAgcmVzLnB1c2goYWNjKTtcbiAgICAgICAgICAgIGFjYyA9IGFjYy5hZGQocCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9KTtcbiAgICByZXR1cm4gKHNjYWxhcnMpID0+IHtcbiAgICAgICAgdmFsaWRhdGVNU01TY2FsYXJzKHNjYWxhcnMsIGZpZWxkTik7XG4gICAgICAgIGlmIChzY2FsYXJzLmxlbmd0aCA+IHBvaW50cy5sZW5ndGgpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2FycmF5IG9mIHNjYWxhcnMgbXVzdCBiZSBzbWFsbGVyIHRoYW4gYXJyYXkgb2YgcG9pbnRzJyk7XG4gICAgICAgIGxldCByZXMgPSB6ZXJvO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNodW5rczsgaSsrKSB7XG4gICAgICAgICAgICAvLyBObyBuZWVkIHRvIGRvdWJsZSBpZiBhY2N1bXVsYXRvciBpcyBzdGlsbCB6ZXJvLlxuICAgICAgICAgICAgaWYgKHJlcyAhPT0gemVybylcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHdpbmRvd1NpemU7IGorKylcbiAgICAgICAgICAgICAgICAgICAgcmVzID0gcmVzLmRvdWJsZSgpO1xuICAgICAgICAgICAgY29uc3Qgc2hpZnRCeSA9IEJpZ0ludChjaHVua3MgKiB3aW5kb3dTaXplIC0gKGkgKyAxKSAqIHdpbmRvd1NpemUpO1xuICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBzY2FsYXJzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbiA9IHNjYWxhcnNbal07XG4gICAgICAgICAgICAgICAgY29uc3QgY3VyciA9IE51bWJlcigobiA+PiBzaGlmdEJ5KSAmIE1BU0spO1xuICAgICAgICAgICAgICAgIGlmICghY3VycilcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7IC8vIHNraXAgemVybyBzY2FsYXJzIGNodW5rc1xuICAgICAgICAgICAgICAgIHJlcyA9IHJlcy5hZGQodGFibGVzW2pdW2N1cnIgLSAxXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9O1xufVxuZnVuY3Rpb24gdmFsaWRhdGVCYXNpYyhjdXJ2ZSkge1xuICAgICgwLCBtb2R1bGFyX3RzXzEudmFsaWRhdGVGaWVsZCkoY3VydmUuRnApO1xuICAgICgwLCB1dGlsc190c18xLnZhbGlkYXRlT2JqZWN0KShjdXJ2ZSwge1xuICAgICAgICBuOiAnYmlnaW50JyxcbiAgICAgICAgaDogJ2JpZ2ludCcsXG4gICAgICAgIEd4OiAnZmllbGQnLFxuICAgICAgICBHeTogJ2ZpZWxkJyxcbiAgICB9LCB7XG4gICAgICAgIG5CaXRMZW5ndGg6ICdpc1NhZmVJbnRlZ2VyJyxcbiAgICAgICAgbkJ5dGVMZW5ndGg6ICdpc1NhZmVJbnRlZ2VyJyxcbiAgICB9KTtcbiAgICAvLyBTZXQgZGVmYXVsdHNcbiAgICByZXR1cm4gT2JqZWN0LmZyZWV6ZSh7XG4gICAgICAgIC4uLigwLCBtb2R1bGFyX3RzXzEubkxlbmd0aCkoY3VydmUubiwgY3VydmUubkJpdExlbmd0aCksXG4gICAgICAgIC4uLmN1cnZlLFxuICAgICAgICAuLi57IHA6IGN1cnZlLkZwLk9SREVSIH0sXG4gICAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jdXJ2ZS5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJ3TkFGIiwicGlwcGVuZ2VyIiwicHJlY29tcHV0ZU1TTVVuc2FmZSIsInZhbGlkYXRlQmFzaWMiLCJtb2R1bGFyX3RzXzEiLCJyZXF1aXJlIiwidXRpbHNfdHNfMSIsIl8wbiIsIkJpZ0ludCIsIl8xbiIsImNvbnN0VGltZU5lZ2F0ZSIsImNvbmRpdGlvbiIsIml0ZW0iLCJuZWciLCJuZWdhdGUiLCJ2YWxpZGF0ZVciLCJXIiwiYml0cyIsIk51bWJlciIsImlzU2FmZUludGVnZXIiLCJFcnJvciIsImNhbGNXT3B0cyIsInNjYWxhckJpdHMiLCJ3aW5kb3dzIiwiTWF0aCIsImNlaWwiLCJ3aW5kb3dTaXplIiwibWF4TnVtYmVyIiwibWFzayIsImJpdE1hc2siLCJzaGlmdEJ5IiwiY2FsY09mZnNldHMiLCJuIiwid2luZG93Iiwid09wdHMiLCJ3Yml0cyIsIm5leHROIiwib2Zmc2V0U3RhcnQiLCJvZmZzZXQiLCJhYnMiLCJpc1plcm8iLCJpc05lZyIsImlzTmVnRiIsIm9mZnNldEYiLCJ2YWxpZGF0ZU1TTVBvaW50cyIsInBvaW50cyIsImMiLCJBcnJheSIsImlzQXJyYXkiLCJmb3JFYWNoIiwicCIsImkiLCJ2YWxpZGF0ZU1TTVNjYWxhcnMiLCJzY2FsYXJzIiwiZmllbGQiLCJzIiwiaXNWYWxpZCIsInBvaW50UHJlY29tcHV0ZXMiLCJXZWFrTWFwIiwicG9pbnRXaW5kb3dTaXplcyIsImdldFciLCJQIiwiZ2V0IiwiaGFzUHJlY29tcHV0ZXMiLCJlbG0iLCJ1bnNhZmVMYWRkZXIiLCJaRVJPIiwiZCIsImFkZCIsImRvdWJsZSIsInByZWNvbXB1dGVXaW5kb3ciLCJiYXNlIiwicHVzaCIsInByZWNvbXB1dGVzIiwiZiIsIkJBU0UiLCJ3byIsIndOQUZVbnNhZmUiLCJhY2MiLCJnZXRQcmVjb21wdXRlcyIsInRyYW5zZm9ybSIsImNvbXAiLCJzZXQiLCJ3TkFGQ2FjaGVkIiwid05BRkNhY2hlZFVuc2FmZSIsInByZXYiLCJzZXRXaW5kb3dTaXplIiwiZGVsZXRlIiwiZmllbGROIiwicGxlbmd0aCIsImxlbmd0aCIsInNsZW5ndGgiLCJ6ZXJvIiwiYml0TGVuIiwiTUFTSyIsImJ1Y2tldHMiLCJmaWxsIiwibGFzdEJpdHMiLCJmbG9vciIsIkJJVFMiLCJzdW0iLCJqIiwic2NhbGFyIiwicmVzSSIsInN1bUkiLCJ0YWJsZVNpemUiLCJjaHVua3MiLCJ0YWJsZXMiLCJtYXAiLCJyZXMiLCJjdXJyIiwiY3VydmUiLCJ2YWxpZGF0ZUZpZWxkIiwiRnAiLCJ2YWxpZGF0ZU9iamVjdCIsImgiLCJHeCIsIkd5IiwibkJpdExlbmd0aCIsIm5CeXRlTGVuZ3RoIiwiZnJlZXplIiwibkxlbmd0aCIsIk9SREVSIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ox/node_modules/@noble/curves/abstract/curve.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ox/node_modules/@noble/curves/abstract/hash-to-curve.js":
/*!******************************************************************************!*\
  !*** ./node_modules/ox/node_modules/@noble/curves/abstract/hash-to-curve.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.expand_message_xmd = expand_message_xmd;\nexports.expand_message_xof = expand_message_xof;\nexports.hash_to_field = hash_to_field;\nexports.isogenyMap = isogenyMap;\nexports.createHasher = createHasher;\nconst modular_ts_1 = __webpack_require__(/*! ./modular.js */ \"(ssr)/./node_modules/ox/node_modules/@noble/curves/abstract/modular.js\");\nconst utils_ts_1 = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/ox/node_modules/@noble/curves/abstract/utils.js\");\n// Octet Stream to Integer. \"spec\" implementation of os2ip is 2.5x slower vs bytesToNumberBE.\nconst os2ip = utils_ts_1.bytesToNumberBE;\n// Integer to Octet Stream (numberToBytesBE)\nfunction i2osp(value, length) {\n    anum(value);\n    anum(length);\n    if (value < 0 || value >= 1 << 8 * length) throw new Error(\"invalid I2OSP input: \" + value);\n    const res = Array.from({\n        length\n    }).fill(0);\n    for(let i = length - 1; i >= 0; i--){\n        res[i] = value & 0xff;\n        value >>>= 8;\n    }\n    return new Uint8Array(res);\n}\nfunction strxor(a, b) {\n    const arr = new Uint8Array(a.length);\n    for(let i = 0; i < a.length; i++){\n        arr[i] = a[i] ^ b[i];\n    }\n    return arr;\n}\nfunction anum(item) {\n    if (!Number.isSafeInteger(item)) throw new Error(\"number expected\");\n}\n/**\n * Produces a uniformly random byte string using a cryptographic hash function H that outputs b bits.\n * [RFC 9380 5.3.1](https://www.rfc-editor.org/rfc/rfc9380#section-5.3.1).\n */ function expand_message_xmd(msg, DST, lenInBytes, H) {\n    (0, utils_ts_1.abytes)(msg);\n    (0, utils_ts_1.abytes)(DST);\n    anum(lenInBytes);\n    // https://www.rfc-editor.org/rfc/rfc9380#section-5.3.3\n    if (DST.length > 255) DST = H((0, utils_ts_1.concatBytes)((0, utils_ts_1.utf8ToBytes)(\"H2C-OVERSIZE-DST-\"), DST));\n    const { outputLen: b_in_bytes, blockLen: r_in_bytes } = H;\n    const ell = Math.ceil(lenInBytes / b_in_bytes);\n    if (lenInBytes > 65535 || ell > 255) throw new Error(\"expand_message_xmd: invalid lenInBytes\");\n    const DST_prime = (0, utils_ts_1.concatBytes)(DST, i2osp(DST.length, 1));\n    const Z_pad = i2osp(0, r_in_bytes);\n    const l_i_b_str = i2osp(lenInBytes, 2); // len_in_bytes_str\n    const b = new Array(ell);\n    const b_0 = H((0, utils_ts_1.concatBytes)(Z_pad, msg, l_i_b_str, i2osp(0, 1), DST_prime));\n    b[0] = H((0, utils_ts_1.concatBytes)(b_0, i2osp(1, 1), DST_prime));\n    for(let i = 1; i <= ell; i++){\n        const args = [\n            strxor(b_0, b[i - 1]),\n            i2osp(i + 1, 1),\n            DST_prime\n        ];\n        b[i] = H((0, utils_ts_1.concatBytes)(...args));\n    }\n    const pseudo_random_bytes = (0, utils_ts_1.concatBytes)(...b);\n    return pseudo_random_bytes.slice(0, lenInBytes);\n}\n/**\n * Produces a uniformly random byte string using an extendable-output function (XOF) H.\n * 1. The collision resistance of H MUST be at least k bits.\n * 2. H MUST be an XOF that has been proved indifferentiable from\n *    a random oracle under a reasonable cryptographic assumption.\n * [RFC 9380 5.3.2](https://www.rfc-editor.org/rfc/rfc9380#section-5.3.2).\n */ function expand_message_xof(msg, DST, lenInBytes, k, H) {\n    (0, utils_ts_1.abytes)(msg);\n    (0, utils_ts_1.abytes)(DST);\n    anum(lenInBytes);\n    // https://www.rfc-editor.org/rfc/rfc9380#section-5.3.3\n    // DST = H('H2C-OVERSIZE-DST-' || a_very_long_DST, Math.ceil((lenInBytes * k) / 8));\n    if (DST.length > 255) {\n        const dkLen = Math.ceil(2 * k / 8);\n        DST = H.create({\n            dkLen\n        }).update((0, utils_ts_1.utf8ToBytes)(\"H2C-OVERSIZE-DST-\")).update(DST).digest();\n    }\n    if (lenInBytes > 65535 || DST.length > 255) throw new Error(\"expand_message_xof: invalid lenInBytes\");\n    return H.create({\n        dkLen: lenInBytes\n    }).update(msg).update(i2osp(lenInBytes, 2))// 2. DST_prime = DST || I2OSP(len(DST), 1)\n    .update(DST).update(i2osp(DST.length, 1)).digest();\n}\n/**\n * Hashes arbitrary-length byte strings to a list of one or more elements of a finite field F.\n * [RFC 9380 5.2](https://www.rfc-editor.org/rfc/rfc9380#section-5.2).\n * @param msg a byte string containing the message to hash\n * @param count the number of elements of F to output\n * @param options `{DST: string, p: bigint, m: number, k: number, expand: 'xmd' | 'xof', hash: H}`, see above\n * @returns [u_0, ..., u_(count - 1)], a list of field elements.\n */ function hash_to_field(msg, count, options) {\n    (0, utils_ts_1.validateObject)(options, {\n        DST: \"stringOrUint8Array\",\n        p: \"bigint\",\n        m: \"isSafeInteger\",\n        k: \"isSafeInteger\",\n        hash: \"hash\"\n    });\n    const { p, k, m, hash, expand, DST: _DST } = options;\n    (0, utils_ts_1.abytes)(msg);\n    anum(count);\n    const DST = typeof _DST === \"string\" ? (0, utils_ts_1.utf8ToBytes)(_DST) : _DST;\n    const log2p = p.toString(2).length;\n    const L = Math.ceil((log2p + k) / 8); // section 5.1 of ietf draft link above\n    const len_in_bytes = count * m * L;\n    let prb; // pseudo_random_bytes\n    if (expand === \"xmd\") {\n        prb = expand_message_xmd(msg, DST, len_in_bytes, hash);\n    } else if (expand === \"xof\") {\n        prb = expand_message_xof(msg, DST, len_in_bytes, k, hash);\n    } else if (expand === \"_internal_pass\") {\n        // for internal tests only\n        prb = msg;\n    } else {\n        throw new Error('expand must be \"xmd\" or \"xof\"');\n    }\n    const u = new Array(count);\n    for(let i = 0; i < count; i++){\n        const e = new Array(m);\n        for(let j = 0; j < m; j++){\n            const elm_offset = L * (j + i * m);\n            const tv = prb.subarray(elm_offset, elm_offset + L);\n            e[j] = (0, modular_ts_1.mod)(os2ip(tv), p);\n        }\n        u[i] = e;\n    }\n    return u;\n}\nfunction isogenyMap(field, map) {\n    // Make same order as in spec\n    const coeff = map.map((i)=>Array.from(i).reverse());\n    return (x, y)=>{\n        const [xn, xd, yn, yd] = coeff.map((val)=>val.reduce((acc, i)=>field.add(field.mul(acc, x), i)));\n        // 6.6.3\n        // Exceptional cases of iso_map are inputs that cause the denominator of\n        // either rational function to evaluate to zero; such cases MUST return\n        // the identity point on E.\n        const [xd_inv, yd_inv] = (0, modular_ts_1.FpInvertBatch)(field, [\n            xd,\n            yd\n        ], true);\n        x = field.mul(xn, xd_inv); // xNum / xDen\n        y = field.mul(y, field.mul(yn, yd_inv)); // y * (yNum / yDev)\n        return {\n            x,\n            y\n        };\n    };\n}\n/** Creates hash-to-curve methods from EC Point and mapToCurve function. */ function createHasher(Point, mapToCurve, defaults) {\n    if (typeof mapToCurve !== \"function\") throw new Error(\"mapToCurve() must be defined\");\n    function map(num) {\n        return Point.fromAffine(mapToCurve(num));\n    }\n    function clear(initial) {\n        const P = initial.clearCofactor();\n        if (P.equals(Point.ZERO)) return Point.ZERO; // zero will throw in assert\n        P.assertValidity();\n        return P;\n    }\n    return {\n        defaults,\n        // Encodes byte string to elliptic curve.\n        // hash_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3\n        hashToCurve (msg, options) {\n            const u = hash_to_field(msg, 2, {\n                ...defaults,\n                DST: defaults.DST,\n                ...options\n            });\n            const u0 = map(u[0]);\n            const u1 = map(u[1]);\n            return clear(u0.add(u1));\n        },\n        // Encodes byte string to elliptic curve.\n        // encode_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3\n        encodeToCurve (msg, options) {\n            const u = hash_to_field(msg, 1, {\n                ...defaults,\n                DST: defaults.encodeDST,\n                ...options\n            });\n            return clear(map(u[0]));\n        },\n        // Same as encodeToCurve, but without hash\n        mapToCurve (scalars) {\n            if (!Array.isArray(scalars)) throw new Error(\"expected array of bigints\");\n            for (const i of scalars)if (typeof i !== \"bigint\") throw new Error(\"expected array of bigints\");\n            return clear(map(scalars));\n        }\n    };\n} //# sourceMappingURL=hash-to-curve.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ox/node_modules/@noble/curves/abstract/hash-to-curve.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ox/node_modules/@noble/curves/abstract/modular.js":
/*!************************************************************************!*\
  !*** ./node_modules/ox/node_modules/@noble/curves/abstract/modular.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.isNegativeLE = void 0;\nexports.mod = mod;\nexports.pow = pow;\nexports.pow2 = pow2;\nexports.invert = invert;\nexports.tonelliShanks = tonelliShanks;\nexports.FpSqrt = FpSqrt;\nexports.validateField = validateField;\nexports.FpPow = FpPow;\nexports.FpInvertBatch = FpInvertBatch;\nexports.FpDiv = FpDiv;\nexports.FpLegendre = FpLegendre;\nexports.FpIsSquare = FpIsSquare;\nexports.nLength = nLength;\nexports.Field = Field;\nexports.FpSqrtOdd = FpSqrtOdd;\nexports.FpSqrtEven = FpSqrtEven;\nexports.hashToPrivateScalar = hashToPrivateScalar;\nexports.getFieldBytesLength = getFieldBytesLength;\nexports.getMinHashLength = getMinHashLength;\nexports.mapHashToField = mapHashToField;\n/**\n * Utils for modular division and finite fields.\n * A finite field over 11 is integer number operations `mod 11`.\n * There is no division: it is replaced by modular multiplicative inverse.\n * @module\n */ /*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */ const utils_1 = __webpack_require__(/*! @noble/hashes/utils */ \"(ssr)/./node_modules/ox/node_modules/@noble/hashes/utils.js\");\nconst utils_ts_1 = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/ox/node_modules/@noble/curves/abstract/utils.js\");\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = /* @__PURE__ */ BigInt(2), _3n = /* @__PURE__ */ BigInt(3);\n// prettier-ignore\nconst _4n = /* @__PURE__ */ BigInt(4), _5n = /* @__PURE__ */ BigInt(5), _8n = /* @__PURE__ */ BigInt(8);\n// Calculates a modulo b\nfunction mod(a, b) {\n    const result = a % b;\n    return result >= _0n ? result : b + result;\n}\n/**\n * Efficiently raise num to power and do modular division.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n * TODO: remove.\n * @example\n * pow(2n, 6n, 11n) // 64n % 11n == 9n\n */ function pow(num, power, modulo) {\n    return FpPow(Field(modulo), num, power);\n}\n/** Does `x^(2^power)` mod p. `pow2(30, 4)` == `30^(2^4)` */ function pow2(x, power, modulo) {\n    let res = x;\n    while(power-- > _0n){\n        res *= res;\n        res %= modulo;\n    }\n    return res;\n}\n/**\n * Inverses number over modulo.\n * Implemented using [Euclidean GCD](https://brilliant.org/wiki/extended-euclidean-algorithm/).\n */ function invert(number, modulo) {\n    if (number === _0n) throw new Error(\"invert: expected non-zero number\");\n    if (modulo <= _0n) throw new Error(\"invert: expected positive modulus, got \" + modulo);\n    // Fermat's little theorem \"CT-like\" version inv(n) = n^(m-2) mod m is 30x slower.\n    let a = mod(number, modulo);\n    let b = modulo;\n    // prettier-ignore\n    let x = _0n, y = _1n, u = _1n, v = _0n;\n    while(a !== _0n){\n        // JIT applies optimization if those two lines follow each other\n        const q = b / a;\n        const r = b % a;\n        const m = x - u * q;\n        const n = y - v * q;\n        // prettier-ignore\n        b = a, a = r, x = u, y = v, u = m, v = n;\n    }\n    const gcd = b;\n    if (gcd !== _1n) throw new Error(\"invert: does not exist\");\n    return mod(x, modulo);\n}\n// Not all roots are possible! Example which will throw:\n// const NUM =\n// n = 72057594037927816n;\n// Fp = Field(BigInt('0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaab'));\nfunction sqrt3mod4(Fp, n) {\n    const p1div4 = (Fp.ORDER + _1n) / _4n;\n    const root = Fp.pow(n, p1div4);\n    // Throw if root^2 != n\n    if (!Fp.eql(Fp.sqr(root), n)) throw new Error(\"Cannot find square root\");\n    return root;\n}\nfunction sqrt5mod8(Fp, n) {\n    const p5div8 = (Fp.ORDER - _5n) / _8n;\n    const n2 = Fp.mul(n, _2n);\n    const v = Fp.pow(n2, p5div8);\n    const nv = Fp.mul(n, v);\n    const i = Fp.mul(Fp.mul(nv, _2n), v);\n    const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));\n    if (!Fp.eql(Fp.sqr(root), n)) throw new Error(\"Cannot find square root\");\n    return root;\n}\n// TODO: Commented-out for now. Provide test vectors.\n// Tonelli is too slow for extension fields Fp2.\n// That means we can't use sqrt (c1, c2...) even for initialization constants.\n// if (P % _16n === _9n) return sqrt9mod16;\n// // prettier-ignore\n// function sqrt9mod16<T>(Fp: IField<T>, n: T, p7div16?: bigint) {\n//   if (p7div16 === undefined) p7div16 = (Fp.ORDER + BigInt(7)) / _16n;\n//   const c1 = Fp.sqrt(Fp.neg(Fp.ONE)); //  1. c1 = sqrt(-1) in F, i.e., (c1^2) == -1 in F\n//   const c2 = Fp.sqrt(c1);             //  2. c2 = sqrt(c1) in F, i.e., (c2^2) == c1 in F\n//   const c3 = Fp.sqrt(Fp.neg(c1));     //  3. c3 = sqrt(-c1) in F, i.e., (c3^2) == -c1 in F\n//   const c4 = p7div16;                 //  4. c4 = (q + 7) / 16        # Integer arithmetic\n//   let tv1 = Fp.pow(n, c4);            //  1. tv1 = x^c4\n//   let tv2 = Fp.mul(c1, tv1);          //  2. tv2 = c1 * tv1\n//   const tv3 = Fp.mul(c2, tv1);        //  3. tv3 = c2 * tv1\n//   let tv4 = Fp.mul(c3, tv1);          //  4. tv4 = c3 * tv1\n//   const e1 = Fp.eql(Fp.sqr(tv2), n);  //  5.  e1 = (tv2^2) == x\n//   const e2 = Fp.eql(Fp.sqr(tv3), n);  //  6.  e2 = (tv3^2) == x\n//   tv1 = Fp.cmov(tv1, tv2, e1); //  7. tv1 = CMOV(tv1, tv2, e1)  # Select tv2 if (tv2^2) == x\n//   tv2 = Fp.cmov(tv4, tv3, e2); //  8. tv2 = CMOV(tv4, tv3, e2)  # Select tv3 if (tv3^2) == x\n//   const e3 = Fp.eql(Fp.sqr(tv2), n);  //  9.  e3 = (tv2^2) == x\n//   return Fp.cmov(tv1, tv2, e3); // 10.  z = CMOV(tv1, tv2, e3) # Select the sqrt from tv1 and tv2\n// }\n/**\n * Tonelli-Shanks square root search algorithm.\n * 1. https://eprint.iacr.org/2012/685.pdf (page 12)\n * 2. Square Roots from 1; 24, 51, 10 to Dan Shanks\n * @param P field order\n * @returns function that takes field Fp (created from P) and number n\n */ function tonelliShanks(P) {\n    // Initialization (precomputation).\n    if (P < BigInt(3)) throw new Error(\"sqrt is not defined for small field\");\n    // Factor P - 1 = Q * 2^S, where Q is odd\n    let Q = P - _1n;\n    let S = 0;\n    while(Q % _2n === _0n){\n        Q /= _2n;\n        S++;\n    }\n    // Find the first quadratic non-residue Z >= 2\n    let Z = _2n;\n    const _Fp = Field(P);\n    while(FpLegendre(_Fp, Z) === 1){\n        // Basic primality test for P. After x iterations, chance of\n        // not finding quadratic non-residue is 2^x, so 2^1000.\n        if (Z++ > 1000) throw new Error(\"Cannot find square root: probably non-prime P\");\n    }\n    // Fast-path; usually done before Z, but we do \"primality test\".\n    if (S === 1) return sqrt3mod4;\n    // Slow-path\n    // TODO: test on Fp2 and others\n    let cc = _Fp.pow(Z, Q); // c = z^Q\n    const Q1div2 = (Q + _1n) / _2n;\n    return function tonelliSlow(Fp, n) {\n        if (Fp.is0(n)) return n;\n        // Check if n is a quadratic residue using Legendre symbol\n        if (FpLegendre(Fp, n) !== 1) throw new Error(\"Cannot find square root\");\n        // Initialize variables for the main loop\n        let M = S;\n        let c = Fp.mul(Fp.ONE, cc); // c = z^Q, move cc from field _Fp into field Fp\n        let t = Fp.pow(n, Q); // t = n^Q, first guess at the fudge factor\n        let R = Fp.pow(n, Q1div2); // R = n^((Q+1)/2), first guess at the square root\n        // Main loop\n        // while t != 1\n        while(!Fp.eql(t, Fp.ONE)){\n            if (Fp.is0(t)) return Fp.ZERO; // if t=0 return R=0\n            let i = 1;\n            // Find the smallest i >= 1 such that t^(2^i) ‚â° 1 (mod P)\n            let t_tmp = Fp.sqr(t); // t^(2^1)\n            while(!Fp.eql(t_tmp, Fp.ONE)){\n                i++;\n                t_tmp = Fp.sqr(t_tmp); // t^(2^2)...\n                if (i === M) throw new Error(\"Cannot find square root\");\n            }\n            // Calculate the exponent for b: 2^(M - i - 1)\n            const exponent = _1n << BigInt(M - i - 1); // bigint is important\n            const b = Fp.pow(c, exponent); // b = 2^(M - i - 1)\n            // Update variables\n            M = i;\n            c = Fp.sqr(b); // c = b^2\n            t = Fp.mul(t, c); // t = (t * b^2)\n            R = Fp.mul(R, b); // R = R*b\n        }\n        return R;\n    };\n}\n/**\n * Square root for a finite field. Will try optimized versions first:\n *\n * 1. P ‚â° 3 (mod 4)\n * 2. P ‚â° 5 (mod 8)\n * 3. Tonelli-Shanks algorithm\n *\n * Different algorithms can give different roots, it is up to user to decide which one they want.\n * For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).\n */ function FpSqrt(P) {\n    // P ‚â° 3 (mod 4) => ‚àön = n^((P+1)/4)\n    if (P % _4n === _3n) return sqrt3mod4;\n    // P ‚â° 5 (mod 8) => Atkin algorithm, page 10 of https://eprint.iacr.org/2012/685.pdf\n    if (P % _8n === _5n) return sqrt5mod8;\n    // P ‚â° 9 (mod 16) not implemented, see above\n    // Tonelli-Shanks algorithm\n    return tonelliShanks(P);\n}\n// Little-endian check for first LE bit (last BE bit);\nconst isNegativeLE = (num, modulo)=>(mod(num, modulo) & _1n) === _1n;\nexports.isNegativeLE = isNegativeLE;\n// prettier-ignore\nconst FIELD_FIELDS = [\n    \"create\",\n    \"isValid\",\n    \"is0\",\n    \"neg\",\n    \"inv\",\n    \"sqrt\",\n    \"sqr\",\n    \"eql\",\n    \"add\",\n    \"sub\",\n    \"mul\",\n    \"pow\",\n    \"div\",\n    \"addN\",\n    \"subN\",\n    \"mulN\",\n    \"sqrN\"\n];\nfunction validateField(field) {\n    const initial = {\n        ORDER: \"bigint\",\n        MASK: \"bigint\",\n        BYTES: \"isSafeInteger\",\n        BITS: \"isSafeInteger\"\n    };\n    const opts = FIELD_FIELDS.reduce((map, val)=>{\n        map[val] = \"function\";\n        return map;\n    }, initial);\n    return (0, utils_ts_1.validateObject)(field, opts);\n}\n// Generic field functions\n/**\n * Same as `pow` but for Fp: non-constant-time.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n */ function FpPow(Fp, num, power) {\n    if (power < _0n) throw new Error(\"invalid exponent, negatives unsupported\");\n    if (power === _0n) return Fp.ONE;\n    if (power === _1n) return num;\n    let p = Fp.ONE;\n    let d = num;\n    while(power > _0n){\n        if (power & _1n) p = Fp.mul(p, d);\n        d = Fp.sqr(d);\n        power >>= _1n;\n    }\n    return p;\n}\n/**\n * Efficiently invert an array of Field elements.\n * Exception-free. Will return `undefined` for 0 elements.\n * @param passZero map 0 to 0 (instead of undefined)\n */ function FpInvertBatch(Fp, nums, passZero = false) {\n    const inverted = new Array(nums.length).fill(passZero ? Fp.ZERO : undefined);\n    // Walk from first to last, multiply them by each other MOD p\n    const multipliedAcc = nums.reduce((acc, num, i)=>{\n        if (Fp.is0(num)) return acc;\n        inverted[i] = acc;\n        return Fp.mul(acc, num);\n    }, Fp.ONE);\n    // Invert last element\n    const invertedAcc = Fp.inv(multipliedAcc);\n    // Walk from last to first, multiply them by inverted each other MOD p\n    nums.reduceRight((acc, num, i)=>{\n        if (Fp.is0(num)) return acc;\n        inverted[i] = Fp.mul(acc, inverted[i]);\n        return Fp.mul(acc, num);\n    }, invertedAcc);\n    return inverted;\n}\n// TODO: remove\nfunction FpDiv(Fp, lhs, rhs) {\n    return Fp.mul(lhs, typeof rhs === \"bigint\" ? invert(rhs, Fp.ORDER) : Fp.inv(rhs));\n}\n/**\n * Legendre symbol.\n * Legendre constant is used to calculate Legendre symbol (a | p)\n * which denotes the value of a^((p-1)/2) (mod p).\n *\n * * (a | p) ‚â° 1    if a is a square (mod p), quadratic residue\n * * (a | p) ‚â° -1   if a is not a square (mod p), quadratic non residue\n * * (a | p) ‚â° 0    if a ‚â° 0 (mod p)\n */ function FpLegendre(Fp, n) {\n    // We can use 3rd argument as optional cache of this value\n    // but seems unneeded for now. The operation is very fast.\n    const p1mod2 = (Fp.ORDER - _1n) / _2n;\n    const powered = Fp.pow(n, p1mod2);\n    const yes = Fp.eql(powered, Fp.ONE);\n    const zero = Fp.eql(powered, Fp.ZERO);\n    const no = Fp.eql(powered, Fp.neg(Fp.ONE));\n    if (!yes && !zero && !no) throw new Error(\"invalid Legendre symbol result\");\n    return yes ? 1 : zero ? 0 : -1;\n}\n// This function returns True whenever the value x is a square in the field F.\nfunction FpIsSquare(Fp, n) {\n    const l = FpLegendre(Fp, n);\n    return l === 1;\n}\n// CURVE.n lengths\nfunction nLength(n, nBitLength) {\n    // Bit size, byte size of CURVE.n\n    if (nBitLength !== undefined) (0, utils_1.anumber)(nBitLength);\n    const _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;\n    const nByteLength = Math.ceil(_nBitLength / 8);\n    return {\n        nBitLength: _nBitLength,\n        nByteLength\n    };\n}\n/**\n * Initializes a finite field over prime.\n * Major performance optimizations:\n * * a) denormalized operations like mulN instead of mul\n * * b) same object shape: never add or remove keys\n * * c) Object.freeze\n * Fragile: always run a benchmark on a change.\n * Security note: operations don't check 'isValid' for all elements for performance reasons,\n * it is caller responsibility to check this.\n * This is low-level code, please make sure you know what you're doing.\n * @param ORDER prime positive bigint\n * @param bitLen how many bits the field consumes\n * @param isLE (def: false) if encoding / decoding should be in little-endian\n * @param redef optional faster redefinitions of sqrt and other methods\n */ function Field(ORDER, bitLen, isLE = false, redef = {}) {\n    if (ORDER <= _0n) throw new Error(\"invalid field: expected ORDER > 0, got \" + ORDER);\n    const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen);\n    if (BYTES > 2048) throw new Error(\"invalid field: expected ORDER of <= 2048 bytes\");\n    let sqrtP; // cached sqrtP\n    const f = Object.freeze({\n        ORDER,\n        isLE,\n        BITS,\n        BYTES,\n        MASK: (0, utils_ts_1.bitMask)(BITS),\n        ZERO: _0n,\n        ONE: _1n,\n        create: (num)=>mod(num, ORDER),\n        isValid: (num)=>{\n            if (typeof num !== \"bigint\") throw new Error(\"invalid field element: expected bigint, got \" + typeof num);\n            return _0n <= num && num < ORDER; // 0 is valid element, but it's not invertible\n        },\n        is0: (num)=>num === _0n,\n        isOdd: (num)=>(num & _1n) === _1n,\n        neg: (num)=>mod(-num, ORDER),\n        eql: (lhs, rhs)=>lhs === rhs,\n        sqr: (num)=>mod(num * num, ORDER),\n        add: (lhs, rhs)=>mod(lhs + rhs, ORDER),\n        sub: (lhs, rhs)=>mod(lhs - rhs, ORDER),\n        mul: (lhs, rhs)=>mod(lhs * rhs, ORDER),\n        pow: (num, power)=>FpPow(f, num, power),\n        div: (lhs, rhs)=>mod(lhs * invert(rhs, ORDER), ORDER),\n        // Same as above, but doesn't normalize\n        sqrN: (num)=>num * num,\n        addN: (lhs, rhs)=>lhs + rhs,\n        subN: (lhs, rhs)=>lhs - rhs,\n        mulN: (lhs, rhs)=>lhs * rhs,\n        inv: (num)=>invert(num, ORDER),\n        sqrt: redef.sqrt || ((n)=>{\n            if (!sqrtP) sqrtP = FpSqrt(ORDER);\n            return sqrtP(f, n);\n        }),\n        toBytes: (num)=>isLE ? (0, utils_ts_1.numberToBytesLE)(num, BYTES) : (0, utils_ts_1.numberToBytesBE)(num, BYTES),\n        fromBytes: (bytes)=>{\n            if (bytes.length !== BYTES) throw new Error(\"Field.fromBytes: expected \" + BYTES + \" bytes, got \" + bytes.length);\n            return isLE ? (0, utils_ts_1.bytesToNumberLE)(bytes) : (0, utils_ts_1.bytesToNumberBE)(bytes);\n        },\n        // TODO: we don't need it here, move out to separate fn\n        invertBatch: (lst)=>FpInvertBatch(f, lst),\n        // We can't move this out because Fp6, Fp12 implement it\n        // and it's unclear what to return in there.\n        cmov: (a, b, c)=>c ? b : a\n    });\n    return Object.freeze(f);\n}\nfunction FpSqrtOdd(Fp, elm) {\n    if (!Fp.isOdd) throw new Error(\"Field doesn't have isOdd\");\n    const root = Fp.sqrt(elm);\n    return Fp.isOdd(root) ? root : Fp.neg(root);\n}\nfunction FpSqrtEven(Fp, elm) {\n    if (!Fp.isOdd) throw new Error(\"Field doesn't have isOdd\");\n    const root = Fp.sqrt(elm);\n    return Fp.isOdd(root) ? Fp.neg(root) : root;\n}\n/**\n * \"Constant-time\" private key generation utility.\n * Same as mapKeyToField, but accepts less bytes (40 instead of 48 for 32-byte field).\n * Which makes it slightly more biased, less secure.\n * @deprecated use `mapKeyToField` instead\n */ function hashToPrivateScalar(hash, groupOrder, isLE = false) {\n    hash = (0, utils_ts_1.ensureBytes)(\"privateHash\", hash);\n    const hashLen = hash.length;\n    const minLen = nLength(groupOrder).nByteLength + 8;\n    if (minLen < 24 || hashLen < minLen || hashLen > 1024) throw new Error(\"hashToPrivateScalar: expected \" + minLen + \"-1024 bytes of input, got \" + hashLen);\n    const num = isLE ? (0, utils_ts_1.bytesToNumberLE)(hash) : (0, utils_ts_1.bytesToNumberBE)(hash);\n    return mod(num, groupOrder - _1n) + _1n;\n}\n/**\n * Returns total number of bytes consumed by the field element.\n * For example, 32 bytes for usual 256-bit weierstrass curve.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of field\n */ function getFieldBytesLength(fieldOrder) {\n    if (typeof fieldOrder !== \"bigint\") throw new Error(\"field order must be bigint\");\n    const bitLength = fieldOrder.toString(2).length;\n    return Math.ceil(bitLength / 8);\n}\n/**\n * Returns minimal amount of bytes that can be safely reduced\n * by field order.\n * Should be 2^-128 for 128-bit curve such as P256.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of target hash\n */ function getMinHashLength(fieldOrder) {\n    const length = getFieldBytesLength(fieldOrder);\n    return length + Math.ceil(length / 2);\n}\n/**\n * \"Constant-time\" private key generation utility.\n * Can take (n + n/2) or more bytes of uniform input e.g. from CSPRNG or KDF\n * and convert them into private scalar, with the modulo bias being negligible.\n * Needs at least 48 bytes of input for 32-byte private key.\n * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/\n * FIPS 186-5, A.2 https://csrc.nist.gov/publications/detail/fips/186/5/final\n * RFC 9380, https://www.rfc-editor.org/rfc/rfc9380#section-5\n * @param hash hash output from SHA3 or a similar function\n * @param groupOrder size of subgroup - (e.g. secp256k1.CURVE.n)\n * @param isLE interpret hash bytes as LE num\n * @returns valid private scalar\n */ function mapHashToField(key, fieldOrder, isLE = false) {\n    const len = key.length;\n    const fieldLen = getFieldBytesLength(fieldOrder);\n    const minLen = getMinHashLength(fieldOrder);\n    // No small numbers: need to understand bias story. No huge numbers: easier to detect JS timings.\n    if (len < 16 || len < minLen || len > 1024) throw new Error(\"expected \" + minLen + \"-1024 bytes of input, got \" + len);\n    const num = isLE ? (0, utils_ts_1.bytesToNumberLE)(key) : (0, utils_ts_1.bytesToNumberBE)(key);\n    // `mod(x, 11)` can sometimes produce 0. `mod(x, 10) + 1` is the same, but no 0\n    const reduced = mod(num, fieldOrder - _1n) + _1n;\n    return isLE ? (0, utils_ts_1.numberToBytesLE)(reduced, fieldLen) : (0, utils_ts_1.numberToBytesBE)(reduced, fieldLen);\n} //# sourceMappingURL=modular.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ox/node_modules/@noble/curves/abstract/modular.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ox/node_modules/@noble/curves/abstract/utils.js":
/*!**********************************************************************!*\
  !*** ./node_modules/ox/node_modules/@noble/curves/abstract/utils.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/**\n * Hex, bytes and number utilities.\n * @module\n */ /*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.notImplemented = exports.bitMask = void 0;\nexports.isBytes = isBytes;\nexports.abytes = abytes;\nexports.abool = abool;\nexports.numberToHexUnpadded = numberToHexUnpadded;\nexports.hexToNumber = hexToNumber;\nexports.bytesToHex = bytesToHex;\nexports.hexToBytes = hexToBytes;\nexports.bytesToNumberBE = bytesToNumberBE;\nexports.bytesToNumberLE = bytesToNumberLE;\nexports.numberToBytesBE = numberToBytesBE;\nexports.numberToBytesLE = numberToBytesLE;\nexports.numberToVarBytesBE = numberToVarBytesBE;\nexports.ensureBytes = ensureBytes;\nexports.concatBytes = concatBytes;\nexports.equalBytes = equalBytes;\nexports.utf8ToBytes = utf8ToBytes;\nexports.inRange = inRange;\nexports.aInRange = aInRange;\nexports.bitLen = bitLen;\nexports.bitGet = bitGet;\nexports.bitSet = bitSet;\nexports.createHmacDrbg = createHmacDrbg;\nexports.validateObject = validateObject;\nexports.memoized = memoized;\n// 100 lines of code in the file are duplicated from noble-hashes (utils).\n// This is OK: `abstract` directory does not use noble-hashes.\n// User may opt-in into using different hashing library. This way, noble-hashes\n// won't be included into their bundle.\nconst _0n = /* @__PURE__ */ BigInt(0);\nconst _1n = /* @__PURE__ */ BigInt(1);\nfunction isBytes(a) {\n    return a instanceof Uint8Array || ArrayBuffer.isView(a) && a.constructor.name === \"Uint8Array\";\n}\nfunction abytes(item) {\n    if (!isBytes(item)) throw new Error(\"Uint8Array expected\");\n}\nfunction abool(title, value) {\n    if (typeof value !== \"boolean\") throw new Error(title + \" boolean expected, got \" + value);\n}\n// Used in weierstrass, der\nfunction numberToHexUnpadded(num) {\n    const hex = num.toString(16);\n    return hex.length & 1 ? \"0\" + hex : hex;\n}\nfunction hexToNumber(hex) {\n    if (typeof hex !== \"string\") throw new Error(\"hex string expected, got \" + typeof hex);\n    return hex === \"\" ? _0n : BigInt(\"0x\" + hex); // Big Endian\n}\n// Built-in hex conversion https://caniuse.com/mdn-javascript_builtins_uint8array_fromhex\nconst hasHexBuiltin = // @ts-ignore\ntypeof Uint8Array.from([]).toHex === \"function\" && typeof Uint8Array.fromHex === \"function\";\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({\n    length: 256\n}, (_, i)=>i.toString(16).padStart(2, \"0\"));\n/**\n * Convert byte array to hex string. Uses built-in function, when available.\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */ function bytesToHex(bytes) {\n    abytes(bytes);\n    // @ts-ignore\n    if (hasHexBuiltin) return bytes.toHex();\n    // pre-caching improves the speed 6x\n    let hex = \"\";\n    for(let i = 0; i < bytes.length; i++){\n        hex += hexes[bytes[i]];\n    }\n    return hex;\n}\n// We use optimized technique to convert hex string to byte array\nconst asciis = {\n    _0: 48,\n    _9: 57,\n    A: 65,\n    F: 70,\n    a: 97,\n    f: 102\n};\nfunction asciiToBase16(ch) {\n    if (ch >= asciis._0 && ch <= asciis._9) return ch - asciis._0; // '2' => 50-48\n    if (ch >= asciis.A && ch <= asciis.F) return ch - (asciis.A - 10); // 'B' => 66-(65-10)\n    if (ch >= asciis.a && ch <= asciis.f) return ch - (asciis.a - 10); // 'b' => 98-(97-10)\n    return;\n}\n/**\n * Convert hex string to byte array. Uses built-in function, when available.\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */ function hexToBytes(hex) {\n    if (typeof hex !== \"string\") throw new Error(\"hex string expected, got \" + typeof hex);\n    // @ts-ignore\n    if (hasHexBuiltin) return Uint8Array.fromHex(hex);\n    const hl = hex.length;\n    const al = hl / 2;\n    if (hl % 2) throw new Error(\"hex string expected, got unpadded hex of length \" + hl);\n    const array = new Uint8Array(al);\n    for(let ai = 0, hi = 0; ai < al; ai++, hi += 2){\n        const n1 = asciiToBase16(hex.charCodeAt(hi));\n        const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n        if (n1 === undefined || n2 === undefined) {\n            const char = hex[hi] + hex[hi + 1];\n            throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n        }\n        array[ai] = n1 * 16 + n2; // multiply first octet, e.g. 'a3' => 10*16+3 => 160 + 3 => 163\n    }\n    return array;\n}\n// BE: Big Endian, LE: Little Endian\nfunction bytesToNumberBE(bytes) {\n    return hexToNumber(bytesToHex(bytes));\n}\nfunction bytesToNumberLE(bytes) {\n    abytes(bytes);\n    return hexToNumber(bytesToHex(Uint8Array.from(bytes).reverse()));\n}\nfunction numberToBytesBE(n, len) {\n    return hexToBytes(n.toString(16).padStart(len * 2, \"0\"));\n}\nfunction numberToBytesLE(n, len) {\n    return numberToBytesBE(n, len).reverse();\n}\n// Unpadded, rarely used\nfunction numberToVarBytesBE(n) {\n    return hexToBytes(numberToHexUnpadded(n));\n}\n/**\n * Takes hex string or Uint8Array, converts to Uint8Array.\n * Validates output length.\n * Will throw error for other types.\n * @param title descriptive title for an error e.g. 'private key'\n * @param hex hex string or Uint8Array\n * @param expectedLength optional, will compare to result array's length\n * @returns\n */ function ensureBytes(title, hex, expectedLength) {\n    let res;\n    if (typeof hex === \"string\") {\n        try {\n            res = hexToBytes(hex);\n        } catch (e) {\n            throw new Error(title + \" must be hex string or Uint8Array, cause: \" + e);\n        }\n    } else if (isBytes(hex)) {\n        // Uint8Array.from() instead of hash.slice() because node.js Buffer\n        // is instance of Uint8Array, and its slice() creates **mutable** copy\n        res = Uint8Array.from(hex);\n    } else {\n        throw new Error(title + \" must be hex string or Uint8Array\");\n    }\n    const len = res.length;\n    if (typeof expectedLength === \"number\" && len !== expectedLength) throw new Error(title + \" of length \" + expectedLength + \" expected, got \" + len);\n    return res;\n}\n/**\n * Copies several Uint8Arrays into one.\n */ function concatBytes(...arrays) {\n    let sum = 0;\n    for(let i = 0; i < arrays.length; i++){\n        const a = arrays[i];\n        abytes(a);\n        sum += a.length;\n    }\n    const res = new Uint8Array(sum);\n    for(let i = 0, pad = 0; i < arrays.length; i++){\n        const a = arrays[i];\n        res.set(a, pad);\n        pad += a.length;\n    }\n    return res;\n}\n// Compares 2 u8a-s in kinda constant time\nfunction equalBytes(a, b) {\n    if (a.length !== b.length) return false;\n    let diff = 0;\n    for(let i = 0; i < a.length; i++)diff |= a[i] ^ b[i];\n    return diff === 0;\n}\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */ function utf8ToBytes(str) {\n    if (typeof str !== \"string\") throw new Error(\"string expected\");\n    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n// Is positive bigint\nconst isPosBig = (n)=>typeof n === \"bigint\" && _0n <= n;\nfunction inRange(n, min, max) {\n    return isPosBig(n) && isPosBig(min) && isPosBig(max) && min <= n && n < max;\n}\n/**\n * Asserts min <= n < max. NOTE: It's < max and not <= max.\n * @example\n * aInRange('x', x, 1n, 256n); // would assume x is in (1n..255n)\n */ function aInRange(title, n, min, max) {\n    // Why min <= n < max and not a (min < n < max) OR b (min <= n <= max)?\n    // consider P=256n, min=0n, max=P\n    // - a for min=0 would require -1:          `inRange('x', x, -1n, P)`\n    // - b would commonly require subtraction:  `inRange('x', x, 0n, P - 1n)`\n    // - our way is the cleanest:               `inRange('x', x, 0n, P)\n    if (!inRange(n, min, max)) throw new Error(\"expected valid \" + title + \": \" + min + \" <= n < \" + max + \", got \" + n);\n}\n// Bit operations\n/**\n * Calculates amount of bits in a bigint.\n * Same as `n.toString(2).length`\n * TODO: merge with nLength in modular\n */ function bitLen(n) {\n    let len;\n    for(len = 0; n > _0n; n >>= _1n, len += 1);\n    return len;\n}\n/**\n * Gets single bit at position.\n * NOTE: first bit position is 0 (same as arrays)\n * Same as `!!+Array.from(n.toString(2)).reverse()[pos]`\n */ function bitGet(n, pos) {\n    return n >> BigInt(pos) & _1n;\n}\n/**\n * Sets single bit at position.\n */ function bitSet(n, pos, value) {\n    return n | (value ? _1n : _0n) << BigInt(pos);\n}\n/**\n * Calculate mask for N bits. Not using ** operator with bigints because of old engines.\n * Same as BigInt(`0b${Array(i).fill('1').join('')}`)\n */ const bitMask = (n)=>(_1n << BigInt(n)) - _1n;\nexports.bitMask = bitMask;\n// DRBG\nconst u8n = (len)=>new Uint8Array(len); // creates Uint8Array\nconst u8fr = (arr)=>Uint8Array.from(arr); // another shortcut\n/**\n * Minimal HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n * @returns function that will call DRBG until 2nd arg returns something meaningful\n * @example\n *   const drbg = createHmacDRBG<Key>(32, 32, hmac);\n *   drbg(seed, bytesToKey); // bytesToKey must return Key or undefined\n */ function createHmacDrbg(hashLen, qByteLen, hmacFn) {\n    if (typeof hashLen !== \"number\" || hashLen < 2) throw new Error(\"hashLen must be a number\");\n    if (typeof qByteLen !== \"number\" || qByteLen < 2) throw new Error(\"qByteLen must be a number\");\n    if (typeof hmacFn !== \"function\") throw new Error(\"hmacFn must be a function\");\n    // Step B, Step C: set hashLen to 8*ceil(hlen/8)\n    let v = u8n(hashLen); // Minimal non-full-spec HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n    let k = u8n(hashLen); // Steps B and C of RFC6979 3.2: set hashLen, in our case always same\n    let i = 0; // Iterations counter, will throw when over 1000\n    const reset = ()=>{\n        v.fill(1);\n        k.fill(0);\n        i = 0;\n    };\n    const h = (...b)=>hmacFn(k, v, ...b); // hmac(k)(v, ...values)\n    const reseed = (seed = u8n(0))=>{\n        // HMAC-DRBG reseed() function. Steps D-G\n        k = h(u8fr([\n            0x00\n        ]), seed); // k = hmac(k || v || 0x00 || seed)\n        v = h(); // v = hmac(k || v)\n        if (seed.length === 0) return;\n        k = h(u8fr([\n            0x01\n        ]), seed); // k = hmac(k || v || 0x01 || seed)\n        v = h(); // v = hmac(k || v)\n    };\n    const gen = ()=>{\n        // HMAC-DRBG generate() function\n        if (i++ >= 1000) throw new Error(\"drbg: tried 1000 values\");\n        let len = 0;\n        const out = [];\n        while(len < qByteLen){\n            v = h();\n            const sl = v.slice();\n            out.push(sl);\n            len += v.length;\n        }\n        return concatBytes(...out);\n    };\n    const genUntil = (seed, pred)=>{\n        reset();\n        reseed(seed); // Steps D-G\n        let res = undefined; // Step H: grind until k is in [1..n-1]\n        while(!(res = pred(gen())))reseed();\n        reset();\n        return res;\n    };\n    return genUntil;\n}\n// Validating curves and fields\nconst validatorFns = {\n    bigint: (val)=>typeof val === \"bigint\",\n    function: (val)=>typeof val === \"function\",\n    boolean: (val)=>typeof val === \"boolean\",\n    string: (val)=>typeof val === \"string\",\n    stringOrUint8Array: (val)=>typeof val === \"string\" || isBytes(val),\n    isSafeInteger: (val)=>Number.isSafeInteger(val),\n    array: (val)=>Array.isArray(val),\n    field: (val, object)=>object.Fp.isValid(val),\n    hash: (val)=>typeof val === \"function\" && Number.isSafeInteger(val.outputLen)\n};\n// type Record<K extends string | number | symbol, T> = { [P in K]: T; }\nfunction validateObject(object, validators, optValidators = {}) {\n    const checkField = (fieldName, type, isOptional)=>{\n        const checkVal = validatorFns[type];\n        if (typeof checkVal !== \"function\") throw new Error(\"invalid validator function\");\n        const val = object[fieldName];\n        if (isOptional && val === undefined) return;\n        if (!checkVal(val, object)) {\n            throw new Error(\"param \" + String(fieldName) + \" is invalid. Expected \" + type + \", got \" + val);\n        }\n    };\n    for (const [fieldName, type] of Object.entries(validators))checkField(fieldName, type, false);\n    for (const [fieldName, type] of Object.entries(optValidators))checkField(fieldName, type, true);\n    return object;\n}\n// validate type tests\n// const o: { a: number; b: number; c: number } = { a: 1, b: 5, c: 6 };\n// const z0 = validateObject(o, { a: 'isSafeInteger' }, { c: 'bigint' }); // Ok!\n// // Should fail type-check\n// const z1 = validateObject(o, { a: 'tmp' }, { c: 'zz' });\n// const z2 = validateObject(o, { a: 'isSafeInteger' }, { c: 'zz' });\n// const z3 = validateObject(o, { test: 'boolean', z: 'bug' });\n// const z4 = validateObject(o, { a: 'boolean', z: 'bug' });\n/**\n * throws not implemented error\n */ const notImplemented = ()=>{\n    throw new Error(\"not implemented\");\n};\nexports.notImplemented = notImplemented;\n/**\n * Memoizes (caches) computation result.\n * Uses WeakMap: the value is going auto-cleaned by GC after last reference is removed.\n */ function memoized(fn) {\n    const map = new WeakMap();\n    return (arg, ...args)=>{\n        const val = map.get(arg);\n        if (val !== undefined) return val;\n        const computed = fn(arg, ...args);\n        map.set(arg, computed);\n        return computed;\n    };\n} //# sourceMappingURL=utils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ox/node_modules/@noble/curves/abstract/utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ox/node_modules/@noble/curves/abstract/weierstrass.js":
/*!****************************************************************************!*\
  !*** ./node_modules/ox/node_modules/@noble/curves/abstract/weierstrass.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.DER = exports.DERErr = void 0;\nexports.weierstrassPoints = weierstrassPoints;\nexports.weierstrass = weierstrass;\nexports.SWUFpSqrtRatio = SWUFpSqrtRatio;\nexports.mapToCurveSimpleSWU = mapToCurveSimpleSWU;\n/**\n * Short Weierstrass curve methods. The formula is: y¬≤ = x¬≥ + ax + b.\n *\n * ### Parameters\n *\n * To initialize a weierstrass curve, one needs to pass following params:\n *\n * * a: formula param\n * * b: formula param\n * * Fp: finite field of prime characteristic P; may be complex (Fp2). Arithmetics is done in field\n * * n: order of prime subgroup a.k.a total amount of valid curve points\n * * Gx: Base point (x, y) aka generator point. Gx = x coordinate\n * * Gy: ...y coordinate\n * * h: cofactor, usually 1. h*n = curve group order (n is only subgroup order)\n * * lowS: whether to enable (default) or disable \"low-s\" non-malleable signatures\n *\n * ### Design rationale for types\n *\n * * Interaction between classes from different curves should fail:\n *   `k256.Point.BASE.add(p256.Point.BASE)`\n * * For this purpose we want to use `instanceof` operator, which is fast and works during runtime\n * * Different calls of `curve()` would return different classes -\n *   `curve(params) !== curve(params)`: if somebody decided to monkey-patch their curve,\n *   it won't affect others\n *\n * TypeScript can't infer types for classes created inside a function. Classes is one instance\n * of nominative types in TypeScript and interfaces only check for shape, so it's hard to create\n * unique type for every function call.\n *\n * We can use generic types via some param, like curve opts, but that would:\n *     1. Enable interaction between `curve(params)` and `curve(params)` (curves of same params)\n *     which is hard to debug.\n *     2. Params can be generic and we can't enforce them to be constant value:\n *     if somebody creates curve from non-constant params,\n *     it would be allowed to interact with other curves with non-constant params\n *\n * @todo https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-7.html#unique-symbol\n * @module\n */ /*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */ // prettier-ignore\nconst curve_ts_1 = __webpack_require__(/*! ./curve.js */ \"(ssr)/./node_modules/ox/node_modules/@noble/curves/abstract/curve.js\");\n// prettier-ignore\nconst modular_ts_1 = __webpack_require__(/*! ./modular.js */ \"(ssr)/./node_modules/ox/node_modules/@noble/curves/abstract/modular.js\");\n// prettier-ignore\nconst utils_ts_1 = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/ox/node_modules/@noble/curves/abstract/utils.js\");\nfunction validateSigVerOpts(opts) {\n    if (opts.lowS !== undefined) (0, utils_ts_1.abool)(\"lowS\", opts.lowS);\n    if (opts.prehash !== undefined) (0, utils_ts_1.abool)(\"prehash\", opts.prehash);\n}\nfunction validatePointOpts(curve) {\n    const opts = (0, curve_ts_1.validateBasic)(curve);\n    (0, utils_ts_1.validateObject)(opts, {\n        a: \"field\",\n        b: \"field\"\n    }, {\n        allowInfinityPoint: \"boolean\",\n        allowedPrivateKeyLengths: \"array\",\n        clearCofactor: \"function\",\n        fromBytes: \"function\",\n        isTorsionFree: \"function\",\n        toBytes: \"function\",\n        wrapPrivateKey: \"boolean\"\n    });\n    const { endo, Fp, a } = opts;\n    if (endo) {\n        if (!Fp.eql(a, Fp.ZERO)) {\n            throw new Error(\"invalid endo: CURVE.a must be 0\");\n        }\n        if (typeof endo !== \"object\" || typeof endo.beta !== \"bigint\" || typeof endo.splitScalar !== \"function\") {\n            throw new Error('invalid endo: expected \"beta\": bigint and \"splitScalar\": function');\n        }\n    }\n    return Object.freeze({\n        ...opts\n    });\n}\nclass DERErr extends Error {\n    constructor(m = \"\"){\n        super(m);\n    }\n}\nexports.DERErr = DERErr;\n/**\n * ASN.1 DER encoding utilities. ASN is very complex & fragile. Format:\n *\n *     [0x30 (SEQUENCE), bytelength, 0x02 (INTEGER), intLength, R, 0x02 (INTEGER), intLength, S]\n *\n * Docs: https://letsencrypt.org/docs/a-warm-welcome-to-asn1-and-der/, https://luca.ntop.org/Teaching/Appunti/asn1.html\n */ exports.DER = {\n    // asn.1 DER encoding utils\n    Err: DERErr,\n    // Basic building block is TLV (Tag-Length-Value)\n    _tlv: {\n        encode: (tag, data)=>{\n            const { Err: E } = exports.DER;\n            if (tag < 0 || tag > 256) throw new E(\"tlv.encode: wrong tag\");\n            if (data.length & 1) throw new E(\"tlv.encode: unpadded data\");\n            const dataLen = data.length / 2;\n            const len = (0, utils_ts_1.numberToHexUnpadded)(dataLen);\n            if (len.length / 2 & 128) throw new E(\"tlv.encode: long form length too big\");\n            // length of length with long form flag\n            const lenLen = dataLen > 127 ? (0, utils_ts_1.numberToHexUnpadded)(len.length / 2 | 128) : \"\";\n            const t = (0, utils_ts_1.numberToHexUnpadded)(tag);\n            return t + lenLen + len + data;\n        },\n        // v - value, l - left bytes (unparsed)\n        decode (tag, data) {\n            const { Err: E } = exports.DER;\n            let pos = 0;\n            if (tag < 0 || tag > 256) throw new E(\"tlv.encode: wrong tag\");\n            if (data.length < 2 || data[pos++] !== tag) throw new E(\"tlv.decode: wrong tlv\");\n            const first = data[pos++];\n            const isLong = !!(first & 128); // First bit of first length byte is flag for short/long form\n            let length = 0;\n            if (!isLong) length = first;\n            else {\n                // Long form: [longFlag(1bit), lengthLength(7bit), length (BE)]\n                const lenLen = first & 127;\n                if (!lenLen) throw new E(\"tlv.decode(long): indefinite length not supported\");\n                if (lenLen > 4) throw new E(\"tlv.decode(long): byte length is too big\"); // this will overflow u32 in js\n                const lengthBytes = data.subarray(pos, pos + lenLen);\n                if (lengthBytes.length !== lenLen) throw new E(\"tlv.decode: length bytes not complete\");\n                if (lengthBytes[0] === 0) throw new E(\"tlv.decode(long): zero leftmost byte\");\n                for (const b of lengthBytes)length = length << 8 | b;\n                pos += lenLen;\n                if (length < 128) throw new E(\"tlv.decode(long): not minimal encoding\");\n            }\n            const v = data.subarray(pos, pos + length);\n            if (v.length !== length) throw new E(\"tlv.decode: wrong value length\");\n            return {\n                v,\n                l: data.subarray(pos + length)\n            };\n        }\n    },\n    // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\n    // since we always use positive integers here. It must always be empty:\n    // - add zero byte if exists\n    // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\n    _int: {\n        encode (num) {\n            const { Err: E } = exports.DER;\n            if (num < _0n) throw new E(\"integer: negative integers are not allowed\");\n            let hex = (0, utils_ts_1.numberToHexUnpadded)(num);\n            // Pad with zero byte if negative flag is present\n            if (Number.parseInt(hex[0], 16) & 8) hex = \"00\" + hex;\n            if (hex.length & 1) throw new E(\"unexpected DER parsing assertion: unpadded hex\");\n            return hex;\n        },\n        decode (data) {\n            const { Err: E } = exports.DER;\n            if (data[0] & 128) throw new E(\"invalid signature integer: negative\");\n            if (data[0] === 0x00 && !(data[1] & 128)) throw new E(\"invalid signature integer: unnecessary leading zero\");\n            return (0, utils_ts_1.bytesToNumberBE)(data);\n        }\n    },\n    toSig (hex) {\n        // parse DER signature\n        const { Err: E, _int: int, _tlv: tlv } = exports.DER;\n        const data = (0, utils_ts_1.ensureBytes)(\"signature\", hex);\n        const { v: seqBytes, l: seqLeftBytes } = tlv.decode(0x30, data);\n        if (seqLeftBytes.length) throw new E(\"invalid signature: left bytes after parsing\");\n        const { v: rBytes, l: rLeftBytes } = tlv.decode(0x02, seqBytes);\n        const { v: sBytes, l: sLeftBytes } = tlv.decode(0x02, rLeftBytes);\n        if (sLeftBytes.length) throw new E(\"invalid signature: left bytes after parsing\");\n        return {\n            r: int.decode(rBytes),\n            s: int.decode(sBytes)\n        };\n    },\n    hexFromSig (sig) {\n        const { _tlv: tlv, _int: int } = exports.DER;\n        const rs = tlv.encode(0x02, int.encode(sig.r));\n        const ss = tlv.encode(0x02, int.encode(sig.s));\n        const seq = rs + ss;\n        return tlv.encode(0x30, seq);\n    }\n};\nfunction numToSizedHex(num, size) {\n    return (0, utils_ts_1.bytesToHex)((0, utils_ts_1.numberToBytesBE)(num, size));\n}\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3), _4n = BigInt(4);\nfunction weierstrassPoints(opts) {\n    const CURVE = validatePointOpts(opts);\n    const { Fp } = CURVE; // All curves has same field / group length as for now, but they can differ\n    const Fn = (0, modular_ts_1.Field)(CURVE.n, CURVE.nBitLength);\n    const toBytes = CURVE.toBytes || ((_c, point, _isCompressed)=>{\n        const a = point.toAffine();\n        return (0, utils_ts_1.concatBytes)(Uint8Array.from([\n            0x04\n        ]), Fp.toBytes(a.x), Fp.toBytes(a.y));\n    });\n    const fromBytes = CURVE.fromBytes || ((bytes)=>{\n        // const head = bytes[0];\n        const tail = bytes.subarray(1);\n        // if (head !== 0x04) throw new Error('Only non-compressed encoding is supported');\n        const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n        const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n        return {\n            x,\n            y\n        };\n    });\n    /**\n     * y¬≤ = x¬≥ + ax + b: Short weierstrass curve formula. Takes x, returns y¬≤.\n     * @returns y¬≤\n     */ function weierstrassEquation(x) {\n        const { a, b } = CURVE;\n        const x2 = Fp.sqr(x); // x * x\n        const x3 = Fp.mul(x2, x); // x¬≤ * x\n        return Fp.add(Fp.add(x3, Fp.mul(x, a)), b); // x¬≥ + a * x + b\n    }\n    function isValidXY(x, y) {\n        const left = Fp.sqr(y); // y¬≤\n        const right = weierstrassEquation(x); // x¬≥ + ax + b\n        return Fp.eql(left, right);\n    }\n    // Validate whether the passed curve params are valid.\n    // Test 1: equation y¬≤ = x¬≥ + ax + b should work for generator point.\n    if (!isValidXY(CURVE.Gx, CURVE.Gy)) throw new Error(\"bad curve params: generator point\");\n    // Test 2: discriminant Œî part should be non-zero: 4a¬≥ + 27b¬≤ != 0.\n    // Guarantees curve is genus-1, smooth (non-singular).\n    const _4a3 = Fp.mul(Fp.pow(CURVE.a, _3n), _4n);\n    const _27b2 = Fp.mul(Fp.sqr(CURVE.b), BigInt(27));\n    if (Fp.is0(Fp.add(_4a3, _27b2))) throw new Error(\"bad curve params: a or b\");\n    // Valid group elements reside in range 1..n-1\n    function isWithinCurveOrder(num) {\n        return (0, utils_ts_1.inRange)(num, _1n, CURVE.n);\n    }\n    // Validates if priv key is valid and converts it to bigint.\n    // Supports options allowedPrivateKeyLengths and wrapPrivateKey.\n    function normPrivateKeyToScalar(key) {\n        const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n: N } = CURVE;\n        if (lengths && typeof key !== \"bigint\") {\n            if ((0, utils_ts_1.isBytes)(key)) key = (0, utils_ts_1.bytesToHex)(key);\n            // Normalize to hex string, pad. E.g. P521 would norm 130-132 char hex to 132-char bytes\n            if (typeof key !== \"string\" || !lengths.includes(key.length)) throw new Error(\"invalid private key\");\n            key = key.padStart(nByteLength * 2, \"0\");\n        }\n        let num;\n        try {\n            num = typeof key === \"bigint\" ? key : (0, utils_ts_1.bytesToNumberBE)((0, utils_ts_1.ensureBytes)(\"private key\", key, nByteLength));\n        } catch (error) {\n            throw new Error(\"invalid private key, expected hex or \" + nByteLength + \" bytes, got \" + typeof key);\n        }\n        if (wrapPrivateKey) num = (0, modular_ts_1.mod)(num, N); // disabled by default, enabled for BLS\n        (0, utils_ts_1.aInRange)(\"private key\", num, _1n, N); // num in range [1..N-1]\n        return num;\n    }\n    function aprjpoint(other) {\n        if (!(other instanceof Point)) throw new Error(\"ProjectivePoint expected\");\n    }\n    // Memoized toAffine / validity check. They are heavy. Points are immutable.\n    // Converts Projective point to affine (x, y) coordinates.\n    // Can accept precomputed Z^-1 - for example, from invertBatch.\n    // (X, Y, Z) ‚àã (x=X/Z, y=Y/Z)\n    const toAffineMemo = (0, utils_ts_1.memoized)((p, iz)=>{\n        const { px: x, py: y, pz: z } = p;\n        // Fast-path for normalized points\n        if (Fp.eql(z, Fp.ONE)) return {\n            x,\n            y\n        };\n        const is0 = p.is0();\n        // If invZ was 0, we return zero point. However we still want to execute\n        // all operations, so we replace invZ with a random number, 1.\n        if (iz == null) iz = is0 ? Fp.ONE : Fp.inv(z);\n        const ax = Fp.mul(x, iz);\n        const ay = Fp.mul(y, iz);\n        const zz = Fp.mul(z, iz);\n        if (is0) return {\n            x: Fp.ZERO,\n            y: Fp.ZERO\n        };\n        if (!Fp.eql(zz, Fp.ONE)) throw new Error(\"invZ was invalid\");\n        return {\n            x: ax,\n            y: ay\n        };\n    });\n    // NOTE: on exception this will crash 'cached' and no value will be set.\n    // Otherwise true will be return\n    const assertValidMemo = (0, utils_ts_1.memoized)((p)=>{\n        if (p.is0()) {\n            // (0, 1, 0) aka ZERO is invalid in most contexts.\n            // In BLS, ZERO can be serialized, so we allow it.\n            // (0, 0, 0) is invalid representation of ZERO.\n            if (CURVE.allowInfinityPoint && !Fp.is0(p.py)) return;\n            throw new Error(\"bad point: ZERO\");\n        }\n        // Some 3rd-party test vectors require different wording between here & `fromCompressedHex`\n        const { x, y } = p.toAffine();\n        // Check if x, y are valid field elements\n        if (!Fp.isValid(x) || !Fp.isValid(y)) throw new Error(\"bad point: x or y not FE\");\n        if (!isValidXY(x, y)) throw new Error(\"bad point: equation left != right\");\n        if (!p.isTorsionFree()) throw new Error(\"bad point: not in prime-order subgroup\");\n        return true;\n    });\n    /**\n     * Projective Point works in 3d / projective (homogeneous) coordinates: (X, Y, Z) ‚àã (x=X/Z, y=Y/Z)\n     * Default Point works in 2d / affine coordinates: (x, y)\n     * We're doing calculations in projective, because its operations don't require costly inversion.\n     */ class Point {\n        constructor(px, py, pz){\n            if (px == null || !Fp.isValid(px)) throw new Error(\"x required\");\n            if (py == null || !Fp.isValid(py) || Fp.is0(py)) throw new Error(\"y required\");\n            if (pz == null || !Fp.isValid(pz)) throw new Error(\"z required\");\n            this.px = px;\n            this.py = py;\n            this.pz = pz;\n            Object.freeze(this);\n        }\n        // Does not validate if the point is on-curve.\n        // Use fromHex instead, or call assertValidity() later.\n        static fromAffine(p) {\n            const { x, y } = p || {};\n            if (!p || !Fp.isValid(x) || !Fp.isValid(y)) throw new Error(\"invalid affine point\");\n            if (p instanceof Point) throw new Error(\"projective point not allowed\");\n            const is0 = (i)=>Fp.eql(i, Fp.ZERO);\n            // fromAffine(x:0, y:0) would produce (x:0, y:0, z:1), but we need (x:0, y:1, z:0)\n            if (is0(x) && is0(y)) return Point.ZERO;\n            return new Point(x, y, Fp.ONE);\n        }\n        get x() {\n            return this.toAffine().x;\n        }\n        get y() {\n            return this.toAffine().y;\n        }\n        /**\n         * Takes a bunch of Projective Points but executes only one\n         * inversion on all of them. Inversion is very slow operation,\n         * so this improves performance massively.\n         * Optimization: converts a list of projective points to a list of identical points with Z=1.\n         */ static normalizeZ(points) {\n            const toInv = (0, modular_ts_1.FpInvertBatch)(Fp, points.map((p)=>p.pz));\n            return points.map((p, i)=>p.toAffine(toInv[i])).map(Point.fromAffine);\n        }\n        /**\n         * Converts hash string or Uint8Array to Point.\n         * @param hex short/long ECDSA hex\n         */ static fromHex(hex) {\n            const P = Point.fromAffine(fromBytes((0, utils_ts_1.ensureBytes)(\"pointHex\", hex)));\n            P.assertValidity();\n            return P;\n        }\n        // Multiplies generator point by privateKey.\n        static fromPrivateKey(privateKey) {\n            return Point.BASE.multiply(normPrivateKeyToScalar(privateKey));\n        }\n        // Multiscalar Multiplication\n        static msm(points, scalars) {\n            return (0, curve_ts_1.pippenger)(Point, Fn, points, scalars);\n        }\n        // \"Private method\", don't use it directly\n        _setWindowSize(windowSize) {\n            wnaf.setWindowSize(this, windowSize);\n        }\n        // A point on curve is valid if it conforms to equation.\n        assertValidity() {\n            assertValidMemo(this);\n        }\n        hasEvenY() {\n            const { y } = this.toAffine();\n            if (Fp.isOdd) return !Fp.isOdd(y);\n            throw new Error(\"Field doesn't support isOdd\");\n        }\n        /**\n         * Compare one point to another.\n         */ equals(other) {\n            aprjpoint(other);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            const { px: X2, py: Y2, pz: Z2 } = other;\n            const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));\n            const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));\n            return U1 && U2;\n        }\n        /**\n         * Flips point to one corresponding to (x, -y) in Affine coordinates.\n         */ negate() {\n            return new Point(this.px, Fp.neg(this.py), this.pz);\n        }\n        // Renes-Costello-Batina exception-free doubling formula.\n        // There is 30% faster Jacobian formula, but it is not complete.\n        // https://eprint.iacr.org/2015/1060, algorithm 3\n        // Cost: 8M + 3S + 3*a + 2*b3 + 15add.\n        double() {\n            const { a, b } = CURVE;\n            const b3 = Fp.mul(b, _3n);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n            let t0 = Fp.mul(X1, X1); // step 1\n            let t1 = Fp.mul(Y1, Y1);\n            let t2 = Fp.mul(Z1, Z1);\n            let t3 = Fp.mul(X1, Y1);\n            t3 = Fp.add(t3, t3); // step 5\n            Z3 = Fp.mul(X1, Z1);\n            Z3 = Fp.add(Z3, Z3);\n            X3 = Fp.mul(a, Z3);\n            Y3 = Fp.mul(b3, t2);\n            Y3 = Fp.add(X3, Y3); // step 10\n            X3 = Fp.sub(t1, Y3);\n            Y3 = Fp.add(t1, Y3);\n            Y3 = Fp.mul(X3, Y3);\n            X3 = Fp.mul(t3, X3);\n            Z3 = Fp.mul(b3, Z3); // step 15\n            t2 = Fp.mul(a, t2);\n            t3 = Fp.sub(t0, t2);\n            t3 = Fp.mul(a, t3);\n            t3 = Fp.add(t3, Z3);\n            Z3 = Fp.add(t0, t0); // step 20\n            t0 = Fp.add(Z3, t0);\n            t0 = Fp.add(t0, t2);\n            t0 = Fp.mul(t0, t3);\n            Y3 = Fp.add(Y3, t0);\n            t2 = Fp.mul(Y1, Z1); // step 25\n            t2 = Fp.add(t2, t2);\n            t0 = Fp.mul(t2, t3);\n            X3 = Fp.sub(X3, t0);\n            Z3 = Fp.mul(t2, t1);\n            Z3 = Fp.add(Z3, Z3); // step 30\n            Z3 = Fp.add(Z3, Z3);\n            return new Point(X3, Y3, Z3);\n        }\n        // Renes-Costello-Batina exception-free addition formula.\n        // There is 30% faster Jacobian formula, but it is not complete.\n        // https://eprint.iacr.org/2015/1060, algorithm 1\n        // Cost: 12M + 0S + 3*a + 3*b3 + 23add.\n        add(other) {\n            aprjpoint(other);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            const { px: X2, py: Y2, pz: Z2 } = other;\n            let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n            const a = CURVE.a;\n            const b3 = Fp.mul(CURVE.b, _3n);\n            let t0 = Fp.mul(X1, X2); // step 1\n            let t1 = Fp.mul(Y1, Y2);\n            let t2 = Fp.mul(Z1, Z2);\n            let t3 = Fp.add(X1, Y1);\n            let t4 = Fp.add(X2, Y2); // step 5\n            t3 = Fp.mul(t3, t4);\n            t4 = Fp.add(t0, t1);\n            t3 = Fp.sub(t3, t4);\n            t4 = Fp.add(X1, Z1);\n            let t5 = Fp.add(X2, Z2); // step 10\n            t4 = Fp.mul(t4, t5);\n            t5 = Fp.add(t0, t2);\n            t4 = Fp.sub(t4, t5);\n            t5 = Fp.add(Y1, Z1);\n            X3 = Fp.add(Y2, Z2); // step 15\n            t5 = Fp.mul(t5, X3);\n            X3 = Fp.add(t1, t2);\n            t5 = Fp.sub(t5, X3);\n            Z3 = Fp.mul(a, t4);\n            X3 = Fp.mul(b3, t2); // step 20\n            Z3 = Fp.add(X3, Z3);\n            X3 = Fp.sub(t1, Z3);\n            Z3 = Fp.add(t1, Z3);\n            Y3 = Fp.mul(X3, Z3);\n            t1 = Fp.add(t0, t0); // step 25\n            t1 = Fp.add(t1, t0);\n            t2 = Fp.mul(a, t2);\n            t4 = Fp.mul(b3, t4);\n            t1 = Fp.add(t1, t2);\n            t2 = Fp.sub(t0, t2); // step 30\n            t2 = Fp.mul(a, t2);\n            t4 = Fp.add(t4, t2);\n            t0 = Fp.mul(t1, t4);\n            Y3 = Fp.add(Y3, t0);\n            t0 = Fp.mul(t5, t4); // step 35\n            X3 = Fp.mul(t3, X3);\n            X3 = Fp.sub(X3, t0);\n            t0 = Fp.mul(t3, t1);\n            Z3 = Fp.mul(t5, Z3);\n            Z3 = Fp.add(Z3, t0); // step 40\n            return new Point(X3, Y3, Z3);\n        }\n        subtract(other) {\n            return this.add(other.negate());\n        }\n        is0() {\n            return this.equals(Point.ZERO);\n        }\n        wNAF(n) {\n            return wnaf.wNAFCached(this, n, Point.normalizeZ);\n        }\n        /**\n         * Non-constant-time multiplication. Uses double-and-add algorithm.\n         * It's faster, but should only be used when you don't care about\n         * an exposed private key e.g. sig verification, which works over *public* keys.\n         */ multiplyUnsafe(sc) {\n            const { endo, n: N } = CURVE;\n            (0, utils_ts_1.aInRange)(\"scalar\", sc, _0n, N);\n            const I = Point.ZERO;\n            if (sc === _0n) return I;\n            if (this.is0() || sc === _1n) return this;\n            // Case a: no endomorphism. Case b: has precomputes.\n            if (!endo || wnaf.hasPrecomputes(this)) return wnaf.wNAFCachedUnsafe(this, sc, Point.normalizeZ);\n            // Case c: endomorphism\n            /** See docs for {@link EndomorphismOpts} */ let { k1neg, k1, k2neg, k2 } = endo.splitScalar(sc);\n            let k1p = I;\n            let k2p = I;\n            let d = this;\n            while(k1 > _0n || k2 > _0n){\n                if (k1 & _1n) k1p = k1p.add(d);\n                if (k2 & _1n) k2p = k2p.add(d);\n                d = d.double();\n                k1 >>= _1n;\n                k2 >>= _1n;\n            }\n            if (k1neg) k1p = k1p.negate();\n            if (k2neg) k2p = k2p.negate();\n            k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n            return k1p.add(k2p);\n        }\n        /**\n         * Constant time multiplication.\n         * Uses wNAF method. Windowed method may be 10% faster,\n         * but takes 2x longer to generate and consumes 2x memory.\n         * Uses precomputes when available.\n         * Uses endomorphism for Koblitz curves.\n         * @param scalar by which the point would be multiplied\n         * @returns New point\n         */ multiply(scalar) {\n            const { endo, n: N } = CURVE;\n            (0, utils_ts_1.aInRange)(\"scalar\", scalar, _1n, N);\n            let point, fake; // Fake point is used to const-time mult\n            /** See docs for {@link EndomorphismOpts} */ if (endo) {\n                const { k1neg, k1, k2neg, k2 } = endo.splitScalar(scalar);\n                let { p: k1p, f: f1p } = this.wNAF(k1);\n                let { p: k2p, f: f2p } = this.wNAF(k2);\n                k1p = wnaf.constTimeNegate(k1neg, k1p);\n                k2p = wnaf.constTimeNegate(k2neg, k2p);\n                k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n                point = k1p.add(k2p);\n                fake = f1p.add(f2p);\n            } else {\n                const { p, f } = this.wNAF(scalar);\n                point = p;\n                fake = f;\n            }\n            // Normalize `z` for both points, but return only real one\n            return Point.normalizeZ([\n                point,\n                fake\n            ])[0];\n        }\n        /**\n         * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.\n         * Not using Strauss-Shamir trick: precomputation tables are faster.\n         * The trick could be useful if both P and Q are not G (not in our case).\n         * @returns non-zero affine point\n         */ multiplyAndAddUnsafe(Q, a, b) {\n            const G = Point.BASE; // No Strauss-Shamir trick: we have 10% faster G precomputes\n            const mul = (P, a // Select faster multiply() method\n            )=>a === _0n || a === _1n || !P.equals(G) ? P.multiplyUnsafe(a) : P.multiply(a);\n            const sum = mul(this, a).add(mul(Q, b));\n            return sum.is0() ? undefined : sum;\n        }\n        // Converts Projective point to affine (x, y) coordinates.\n        // Can accept precomputed Z^-1 - for example, from invertBatch.\n        // (x, y, z) ‚àã (x=x/z, y=y/z)\n        toAffine(iz) {\n            return toAffineMemo(this, iz);\n        }\n        isTorsionFree() {\n            const { h: cofactor, isTorsionFree } = CURVE;\n            if (cofactor === _1n) return true; // No subgroups, always torsion-free\n            if (isTorsionFree) return isTorsionFree(Point, this);\n            throw new Error(\"isTorsionFree() has not been declared for the elliptic curve\");\n        }\n        clearCofactor() {\n            const { h: cofactor, clearCofactor } = CURVE;\n            if (cofactor === _1n) return this; // Fast-path\n            if (clearCofactor) return clearCofactor(Point, this);\n            return this.multiplyUnsafe(CURVE.h);\n        }\n        toRawBytes(isCompressed = true) {\n            (0, utils_ts_1.abool)(\"isCompressed\", isCompressed);\n            this.assertValidity();\n            return toBytes(Point, this, isCompressed);\n        }\n        toHex(isCompressed = true) {\n            (0, utils_ts_1.abool)(\"isCompressed\", isCompressed);\n            return (0, utils_ts_1.bytesToHex)(this.toRawBytes(isCompressed));\n        }\n    }\n    // base / generator point\n    Point.BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);\n    // zero / infinity / identity point\n    Point.ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO); // 0, 1, 0\n    const { endo, nBitLength } = CURVE;\n    const wnaf = (0, curve_ts_1.wNAF)(Point, endo ? Math.ceil(nBitLength / 2) : nBitLength);\n    return {\n        CURVE,\n        ProjectivePoint: Point,\n        normPrivateKeyToScalar,\n        weierstrassEquation,\n        isWithinCurveOrder\n    };\n}\nfunction validateOpts(curve) {\n    const opts = (0, curve_ts_1.validateBasic)(curve);\n    (0, utils_ts_1.validateObject)(opts, {\n        hash: \"hash\",\n        hmac: \"function\",\n        randomBytes: \"function\"\n    }, {\n        bits2int: \"function\",\n        bits2int_modN: \"function\",\n        lowS: \"boolean\"\n    });\n    return Object.freeze({\n        lowS: true,\n        ...opts\n    });\n}\n/**\n * Creates short weierstrass curve and ECDSA signature methods for it.\n * @example\n * import { Field } from '@noble/curves/abstract/modular';\n * // Before that, define BigInt-s: a, b, p, n, Gx, Gy\n * const curve = weierstrass({ a, b, Fp: Field(p), n, Gx, Gy, h: 1n })\n */ function weierstrass(curveDef) {\n    const CURVE = validateOpts(curveDef);\n    const { Fp, n: CURVE_ORDER, nByteLength, nBitLength } = CURVE;\n    const compressedLen = Fp.BYTES + 1; // e.g. 33 for 32\n    const uncompressedLen = 2 * Fp.BYTES + 1; // e.g. 65 for 32\n    function modN(a) {\n        return (0, modular_ts_1.mod)(a, CURVE_ORDER);\n    }\n    function invN(a) {\n        return (0, modular_ts_1.invert)(a, CURVE_ORDER);\n    }\n    const { ProjectivePoint: Point, normPrivateKeyToScalar, weierstrassEquation, isWithinCurveOrder } = weierstrassPoints({\n        ...CURVE,\n        toBytes (_c, point, isCompressed) {\n            const a = point.toAffine();\n            const x = Fp.toBytes(a.x);\n            const cat = utils_ts_1.concatBytes;\n            (0, utils_ts_1.abool)(\"isCompressed\", isCompressed);\n            if (isCompressed) {\n                return cat(Uint8Array.from([\n                    point.hasEvenY() ? 0x02 : 0x03\n                ]), x);\n            } else {\n                return cat(Uint8Array.from([\n                    0x04\n                ]), x, Fp.toBytes(a.y));\n            }\n        },\n        fromBytes (bytes) {\n            const len = bytes.length;\n            const head = bytes[0];\n            const tail = bytes.subarray(1);\n            // this.assertValidity() is done inside of fromHex\n            if (len === compressedLen && (head === 0x02 || head === 0x03)) {\n                const x = (0, utils_ts_1.bytesToNumberBE)(tail);\n                if (!(0, utils_ts_1.inRange)(x, _1n, Fp.ORDER)) throw new Error(\"Point is not on curve\");\n                const y2 = weierstrassEquation(x); // y¬≤ = x¬≥ + ax + b\n                let y;\n                try {\n                    y = Fp.sqrt(y2); // y = y¬≤ ^ (p+1)/4\n                } catch (sqrtError) {\n                    const suffix = sqrtError instanceof Error ? \": \" + sqrtError.message : \"\";\n                    throw new Error(\"Point is not on curve\" + suffix);\n                }\n                const isYOdd = (y & _1n) === _1n;\n                // ECDSA\n                const isHeadOdd = (head & 1) === 1;\n                if (isHeadOdd !== isYOdd) y = Fp.neg(y);\n                return {\n                    x,\n                    y\n                };\n            } else if (len === uncompressedLen && head === 0x04) {\n                const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n                const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n                return {\n                    x,\n                    y\n                };\n            } else {\n                const cl = compressedLen;\n                const ul = uncompressedLen;\n                throw new Error(\"invalid Point, expected length of \" + cl + \", or uncompressed \" + ul + \", got \" + len);\n            }\n        }\n    });\n    function isBiggerThanHalfOrder(number) {\n        const HALF = CURVE_ORDER >> _1n;\n        return number > HALF;\n    }\n    function normalizeS(s) {\n        return isBiggerThanHalfOrder(s) ? modN(-s) : s;\n    }\n    // slice bytes num\n    const slcNum = (b, from, to)=>(0, utils_ts_1.bytesToNumberBE)(b.slice(from, to));\n    /**\n     * ECDSA signature with its (r, s) properties. Supports DER & compact representations.\n     */ class Signature {\n        constructor(r, s, recovery){\n            (0, utils_ts_1.aInRange)(\"r\", r, _1n, CURVE_ORDER); // r in [1..N]\n            (0, utils_ts_1.aInRange)(\"s\", s, _1n, CURVE_ORDER); // s in [1..N]\n            this.r = r;\n            this.s = s;\n            if (recovery != null) this.recovery = recovery;\n            Object.freeze(this);\n        }\n        // pair (bytes of r, bytes of s)\n        static fromCompact(hex) {\n            const l = nByteLength;\n            hex = (0, utils_ts_1.ensureBytes)(\"compactSignature\", hex, l * 2);\n            return new Signature(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));\n        }\n        // DER encoded ECDSA signature\n        // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script\n        static fromDER(hex) {\n            const { r, s } = exports.DER.toSig((0, utils_ts_1.ensureBytes)(\"DER\", hex));\n            return new Signature(r, s);\n        }\n        /**\n         * @todo remove\n         * @deprecated\n         */ assertValidity() {}\n        addRecoveryBit(recovery) {\n            return new Signature(this.r, this.s, recovery);\n        }\n        recoverPublicKey(msgHash) {\n            const { r, s, recovery: rec } = this;\n            const h = bits2int_modN((0, utils_ts_1.ensureBytes)(\"msgHash\", msgHash)); // Truncate hash\n            if (rec == null || ![\n                0,\n                1,\n                2,\n                3\n            ].includes(rec)) throw new Error(\"recovery id invalid\");\n            const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;\n            if (radj >= Fp.ORDER) throw new Error(\"recovery id 2 or 3 invalid\");\n            const prefix = (rec & 1) === 0 ? \"02\" : \"03\";\n            const R = Point.fromHex(prefix + numToSizedHex(radj, Fp.BYTES));\n            const ir = invN(radj); // r^-1\n            const u1 = modN(-h * ir); // -hr^-1\n            const u2 = modN(s * ir); // sr^-1\n            const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2); // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1)\n            if (!Q) throw new Error(\"point at infinify\"); // unsafe is fine: no priv data leaked\n            Q.assertValidity();\n            return Q;\n        }\n        // Signatures should be low-s, to prevent malleability.\n        hasHighS() {\n            return isBiggerThanHalfOrder(this.s);\n        }\n        normalizeS() {\n            return this.hasHighS() ? new Signature(this.r, modN(-this.s), this.recovery) : this;\n        }\n        // DER-encoded\n        toDERRawBytes() {\n            return (0, utils_ts_1.hexToBytes)(this.toDERHex());\n        }\n        toDERHex() {\n            return exports.DER.hexFromSig(this);\n        }\n        // padded bytes of r, then padded bytes of s\n        toCompactRawBytes() {\n            return (0, utils_ts_1.hexToBytes)(this.toCompactHex());\n        }\n        toCompactHex() {\n            const l = nByteLength;\n            return numToSizedHex(this.r, l) + numToSizedHex(this.s, l);\n        }\n    }\n    const utils = {\n        isValidPrivateKey (privateKey) {\n            try {\n                normPrivateKeyToScalar(privateKey);\n                return true;\n            } catch (error) {\n                return false;\n            }\n        },\n        normPrivateKeyToScalar: normPrivateKeyToScalar,\n        /**\n         * Produces cryptographically secure private key from random of size\n         * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.\n         */ randomPrivateKey: ()=>{\n            const length = (0, modular_ts_1.getMinHashLength)(CURVE.n);\n            return (0, modular_ts_1.mapHashToField)(CURVE.randomBytes(length), CURVE.n);\n        },\n        /**\n         * Creates precompute table for an arbitrary EC point. Makes point \"cached\".\n         * Allows to massively speed-up `point.multiply(scalar)`.\n         * @returns cached point\n         * @example\n         * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));\n         * fast.multiply(privKey); // much faster ECDH now\n         */ precompute (windowSize = 8, point = Point.BASE) {\n            point._setWindowSize(windowSize);\n            point.multiply(BigInt(3)); // 3 is arbitrary, just need any number here\n            return point;\n        }\n    };\n    /**\n     * Computes public key for a private key. Checks for validity of the private key.\n     * @param privateKey private key\n     * @param isCompressed whether to return compact (default), or full key\n     * @returns Public key, full when isCompressed=false; short when isCompressed=true\n     */ function getPublicKey(privateKey, isCompressed = true) {\n        return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\n    }\n    /**\n     * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.\n     */ function isProbPub(item) {\n        if (typeof item === \"bigint\") return false;\n        if (item instanceof Point) return true;\n        const arr = (0, utils_ts_1.ensureBytes)(\"key\", item);\n        const len = arr.length;\n        const fpl = Fp.BYTES;\n        const compLen = fpl + 1; // e.g. 33 for 32\n        const uncompLen = 2 * fpl + 1; // e.g. 65 for 32\n        if (CURVE.allowedPrivateKeyLengths || nByteLength === compLen) {\n            return undefined;\n        } else {\n            return len === compLen || len === uncompLen;\n        }\n    }\n    /**\n     * ECDH (Elliptic Curve Diffie Hellman).\n     * Computes shared public key from private key and public key.\n     * Checks: 1) private key validity 2) shared key is on-curve.\n     * Does NOT hash the result.\n     * @param privateA private key\n     * @param publicB different public key\n     * @param isCompressed whether to return compact (default), or full key\n     * @returns shared public key\n     */ function getSharedSecret(privateA, publicB, isCompressed = true) {\n        if (isProbPub(privateA) === true) throw new Error(\"first arg must be private key\");\n        if (isProbPub(publicB) === false) throw new Error(\"second arg must be public key\");\n        const b = Point.fromHex(publicB); // check for being on-curve\n        return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);\n    }\n    // RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.\n    // FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.\n    // bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.\n    // int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors\n    const bits2int = CURVE.bits2int || function(bytes) {\n        // Our custom check \"just in case\", for protection against DoS\n        if (bytes.length > 8192) throw new Error(\"input is too large\");\n        // For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)\n        // for some cases, since bytes.length * 8 is not actual bitLength.\n        const num = (0, utils_ts_1.bytesToNumberBE)(bytes); // check for == u8 done here\n        const delta = bytes.length * 8 - nBitLength; // truncate to nBitLength leftmost bits\n        return delta > 0 ? num >> BigInt(delta) : num;\n    };\n    const bits2int_modN = CURVE.bits2int_modN || function(bytes) {\n        return modN(bits2int(bytes)); // can't use bytesToNumberBE here\n    };\n    // NOTE: pads output with zero as per spec\n    const ORDER_MASK = (0, utils_ts_1.bitMask)(nBitLength);\n    /**\n     * Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`.\n     */ function int2octets(num) {\n        (0, utils_ts_1.aInRange)(\"num < 2^\" + nBitLength, num, _0n, ORDER_MASK);\n        // works with order, can have different size than numToField!\n        return (0, utils_ts_1.numberToBytesBE)(num, nByteLength);\n    }\n    // Steps A, D of RFC6979 3.2\n    // Creates RFC6979 seed; converts msg/privKey to numbers.\n    // Used only in sign, not in verify.\n    // NOTE: we cannot assume here that msgHash has same amount of bytes as curve order,\n    // this will be invalid at least for P521. Also it can be bigger for P224 + SHA256\n    function prepSig(msgHash, privateKey, opts = defaultSigOpts) {\n        if ([\n            \"recovered\",\n            \"canonical\"\n        ].some((k)=>k in opts)) throw new Error(\"sign() legacy options not supported\");\n        const { hash, randomBytes } = CURVE;\n        let { lowS, prehash, extraEntropy: ent } = opts; // generates low-s sigs by default\n        if (lowS == null) lowS = true; // RFC6979 3.2: we skip step A, because we already provide hash\n        msgHash = (0, utils_ts_1.ensureBytes)(\"msgHash\", msgHash);\n        validateSigVerOpts(opts);\n        if (prehash) msgHash = (0, utils_ts_1.ensureBytes)(\"prehashed msgHash\", hash(msgHash));\n        // We can't later call bits2octets, since nested bits2int is broken for curves\n        // with nBitLength % 8 !== 0. Because of that, we unwrap it here as int2octets call.\n        // const bits2octets = (bits) => int2octets(bits2int_modN(bits))\n        const h1int = bits2int_modN(msgHash);\n        const d = normPrivateKeyToScalar(privateKey); // validate private key, convert to bigint\n        const seedArgs = [\n            int2octets(d),\n            int2octets(h1int)\n        ];\n        // extraEntropy. RFC6979 3.6: additional k' (optional).\n        if (ent != null && ent !== false) {\n            // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')\n            const e = ent === true ? randomBytes(Fp.BYTES) : ent; // generate random bytes OR pass as-is\n            seedArgs.push((0, utils_ts_1.ensureBytes)(\"extraEntropy\", e)); // check for being bytes\n        }\n        const seed = (0, utils_ts_1.concatBytes)(...seedArgs); // Step D of RFC6979 3.2\n        const m = h1int; // NOTE: no need to call bits2int second time here, it is inside truncateHash!\n        // Converts signature params into point w r/s, checks result for validity.\n        function k2sig(kBytes) {\n            // RFC 6979 Section 3.2, step 3: k = bits2int(T)\n            const k = bits2int(kBytes); // Cannot use fields methods, since it is group element\n            if (!isWithinCurveOrder(k)) return; // Important: all mod() calls here must be done over N\n            const ik = invN(k); // k^-1 mod n\n            const q = Point.BASE.multiply(k).toAffine(); // q = Gk\n            const r = modN(q.x); // r = q.x mod n\n            if (r === _0n) return;\n            // Can use scalar blinding b^-1(bm + bdr) where b ‚àà [1,q‚àí1] according to\n            // https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:\n            // a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT\n            const s = modN(ik * modN(m + r * d)); // Not using blinding here\n            if (s === _0n) return;\n            let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n); // recovery bit (2 or 3, when q.x > n)\n            let normS = s;\n            if (lowS && isBiggerThanHalfOrder(s)) {\n                normS = normalizeS(s); // if lowS was passed, ensure s is always\n                recovery ^= 1; // // in the bottom half of N\n            }\n            return new Signature(r, normS, recovery); // use normS, not s\n        }\n        return {\n            seed,\n            k2sig\n        };\n    }\n    const defaultSigOpts = {\n        lowS: CURVE.lowS,\n        prehash: false\n    };\n    const defaultVerOpts = {\n        lowS: CURVE.lowS,\n        prehash: false\n    };\n    /**\n     * Signs message hash with a private key.\n     * ```\n     * sign(m, d, k) where\n     *   (x, y) = G √ó k\n     *   r = x mod n\n     *   s = (m + dr)/k mod n\n     * ```\n     * @param msgHash NOT message. msg needs to be hashed to `msgHash`, or use `prehash`.\n     * @param privKey private key\n     * @param opts lowS for non-malleable sigs. extraEntropy for mixing randomness into k. prehash will hash first arg.\n     * @returns signature with recovery param\n     */ function sign(msgHash, privKey, opts = defaultSigOpts) {\n        const { seed, k2sig } = prepSig(msgHash, privKey, opts); // Steps A, D of RFC6979 3.2.\n        const C = CURVE;\n        const drbg = (0, utils_ts_1.createHmacDrbg)(C.hash.outputLen, C.nByteLength, C.hmac);\n        return drbg(seed, k2sig); // Steps B, C, D, E, F, G\n    }\n    // Enable precomputes. Slows down first publicKey computation by 20ms.\n    Point.BASE._setWindowSize(8);\n    // utils.precompute(8, ProjectivePoint.BASE)\n    /**\n     * Verifies a signature against message hash and public key.\n     * Rejects lowS signatures by default: to override,\n     * specify option `{lowS: false}`. Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:\n     *\n     * ```\n     * verify(r, s, h, P) where\n     *   U1 = hs^-1 mod n\n     *   U2 = rs^-1 mod n\n     *   R = U1‚ãÖG - U2‚ãÖP\n     *   mod(R.x, n) == r\n     * ```\n     */ function verify(signature, msgHash, publicKey, opts = defaultVerOpts) {\n        const sg = signature;\n        msgHash = (0, utils_ts_1.ensureBytes)(\"msgHash\", msgHash);\n        publicKey = (0, utils_ts_1.ensureBytes)(\"publicKey\", publicKey);\n        const { lowS, prehash, format } = opts;\n        // Verify opts, deduce signature format\n        validateSigVerOpts(opts);\n        if (\"strict\" in opts) throw new Error(\"options.strict was renamed to lowS\");\n        if (format !== undefined && format !== \"compact\" && format !== \"der\") throw new Error(\"format must be compact or der\");\n        const isHex = typeof sg === \"string\" || (0, utils_ts_1.isBytes)(sg);\n        const isObj = !isHex && !format && typeof sg === \"object\" && sg !== null && typeof sg.r === \"bigint\" && typeof sg.s === \"bigint\";\n        if (!isHex && !isObj) throw new Error(\"invalid signature, expected Uint8Array, hex string or Signature instance\");\n        let _sig = undefined;\n        let P;\n        try {\n            if (isObj) _sig = new Signature(sg.r, sg.s);\n            if (isHex) {\n                // Signature can be represented in 2 ways: compact (2*nByteLength) & DER (variable-length).\n                // Since DER can also be 2*nByteLength bytes, we check for it first.\n                try {\n                    if (format !== \"compact\") _sig = Signature.fromDER(sg);\n                } catch (derError) {\n                    if (!(derError instanceof exports.DER.Err)) throw derError;\n                }\n                if (!_sig && format !== \"der\") _sig = Signature.fromCompact(sg);\n            }\n            P = Point.fromHex(publicKey);\n        } catch (error) {\n            return false;\n        }\n        if (!_sig) return false;\n        if (lowS && _sig.hasHighS()) return false;\n        if (prehash) msgHash = CURVE.hash(msgHash);\n        const { r, s } = _sig;\n        const h = bits2int_modN(msgHash); // Cannot use fields methods, since it is group element\n        const is = invN(s); // s^-1\n        const u1 = modN(h * is); // u1 = hs^-1 mod n\n        const u2 = modN(r * is); // u2 = rs^-1 mod n\n        const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2)?.toAffine(); // R = u1‚ãÖG + u2‚ãÖP\n        if (!R) return false;\n        const v = modN(R.x);\n        return v === r;\n    }\n    return {\n        CURVE,\n        getPublicKey,\n        getSharedSecret,\n        sign,\n        verify,\n        ProjectivePoint: Point,\n        Signature,\n        utils\n    };\n}\n/**\n * Implementation of the Shallue and van de Woestijne method for any weierstrass curve.\n * TODO: check if there is a way to merge this with uvRatio in Edwards; move to modular.\n * b = True and y = sqrt(u / v) if (u / v) is square in F, and\n * b = False and y = sqrt(Z * (u / v)) otherwise.\n * @param Fp\n * @param Z\n * @returns\n */ function SWUFpSqrtRatio(Fp, Z) {\n    // Generic implementation\n    const q = Fp.ORDER;\n    let l = _0n;\n    for(let o = q - _1n; o % _2n === _0n; o /= _2n)l += _1n;\n    const c1 = l; // 1. c1, the largest integer such that 2^c1 divides q - 1.\n    // We need 2n ** c1 and 2n ** (c1-1). We can't use **; but we can use <<.\n    // 2n ** c1 == 2n << (c1-1)\n    const _2n_pow_c1_1 = _2n << c1 - _1n - _1n;\n    const _2n_pow_c1 = _2n_pow_c1_1 * _2n;\n    const c2 = (q - _1n) / _2n_pow_c1; // 2. c2 = (q - 1) / (2^c1)  # Integer arithmetic\n    const c3 = (c2 - _1n) / _2n; // 3. c3 = (c2 - 1) / 2            # Integer arithmetic\n    const c4 = _2n_pow_c1 - _1n; // 4. c4 = 2^c1 - 1                # Integer arithmetic\n    const c5 = _2n_pow_c1_1; // 5. c5 = 2^(c1 - 1)                  # Integer arithmetic\n    const c6 = Fp.pow(Z, c2); // 6. c6 = Z^c2\n    const c7 = Fp.pow(Z, (c2 + _1n) / _2n); // 7. c7 = Z^((c2 + 1) / 2)\n    let sqrtRatio = (u, v)=>{\n        let tv1 = c6; // 1. tv1 = c6\n        let tv2 = Fp.pow(v, c4); // 2. tv2 = v^c4\n        let tv3 = Fp.sqr(tv2); // 3. tv3 = tv2^2\n        tv3 = Fp.mul(tv3, v); // 4. tv3 = tv3 * v\n        let tv5 = Fp.mul(u, tv3); // 5. tv5 = u * tv3\n        tv5 = Fp.pow(tv5, c3); // 6. tv5 = tv5^c3\n        tv5 = Fp.mul(tv5, tv2); // 7. tv5 = tv5 * tv2\n        tv2 = Fp.mul(tv5, v); // 8. tv2 = tv5 * v\n        tv3 = Fp.mul(tv5, u); // 9. tv3 = tv5 * u\n        let tv4 = Fp.mul(tv3, tv2); // 10. tv4 = tv3 * tv2\n        tv5 = Fp.pow(tv4, c5); // 11. tv5 = tv4^c5\n        let isQR = Fp.eql(tv5, Fp.ONE); // 12. isQR = tv5 == 1\n        tv2 = Fp.mul(tv3, c7); // 13. tv2 = tv3 * c7\n        tv5 = Fp.mul(tv4, tv1); // 14. tv5 = tv4 * tv1\n        tv3 = Fp.cmov(tv2, tv3, isQR); // 15. tv3 = CMOV(tv2, tv3, isQR)\n        tv4 = Fp.cmov(tv5, tv4, isQR); // 16. tv4 = CMOV(tv5, tv4, isQR)\n        // 17. for i in (c1, c1 - 1, ..., 2):\n        for(let i = c1; i > _1n; i--){\n            let tv5 = i - _2n; // 18.    tv5 = i - 2\n            tv5 = _2n << tv5 - _1n; // 19.    tv5 = 2^tv5\n            let tvv5 = Fp.pow(tv4, tv5); // 20.    tv5 = tv4^tv5\n            const e1 = Fp.eql(tvv5, Fp.ONE); // 21.    e1 = tv5 == 1\n            tv2 = Fp.mul(tv3, tv1); // 22.    tv2 = tv3 * tv1\n            tv1 = Fp.mul(tv1, tv1); // 23.    tv1 = tv1 * tv1\n            tvv5 = Fp.mul(tv4, tv1); // 24.    tv5 = tv4 * tv1\n            tv3 = Fp.cmov(tv2, tv3, e1); // 25.    tv3 = CMOV(tv2, tv3, e1)\n            tv4 = Fp.cmov(tvv5, tv4, e1); // 26.    tv4 = CMOV(tv5, tv4, e1)\n        }\n        return {\n            isValid: isQR,\n            value: tv3\n        };\n    };\n    if (Fp.ORDER % _4n === _3n) {\n        // sqrt_ratio_3mod4(u, v)\n        const c1 = (Fp.ORDER - _3n) / _4n; // 1. c1 = (q - 3) / 4     # Integer arithmetic\n        const c2 = Fp.sqrt(Fp.neg(Z)); // 2. c2 = sqrt(-Z)\n        sqrtRatio = (u, v)=>{\n            let tv1 = Fp.sqr(v); // 1. tv1 = v^2\n            const tv2 = Fp.mul(u, v); // 2. tv2 = u * v\n            tv1 = Fp.mul(tv1, tv2); // 3. tv1 = tv1 * tv2\n            let y1 = Fp.pow(tv1, c1); // 4. y1 = tv1^c1\n            y1 = Fp.mul(y1, tv2); // 5. y1 = y1 * tv2\n            const y2 = Fp.mul(y1, c2); // 6. y2 = y1 * c2\n            const tv3 = Fp.mul(Fp.sqr(y1), v); // 7. tv3 = y1^2; 8. tv3 = tv3 * v\n            const isQR = Fp.eql(tv3, u); // 9. isQR = tv3 == u\n            let y = Fp.cmov(y2, y1, isQR); // 10. y = CMOV(y2, y1, isQR)\n            return {\n                isValid: isQR,\n                value: y\n            }; // 11. return (isQR, y) isQR ? y : y*c2\n        };\n    }\n    // No curves uses that\n    // if (Fp.ORDER % _8n === _5n) // sqrt_ratio_5mod8\n    return sqrtRatio;\n}\n/**\n * Simplified Shallue-van de Woestijne-Ulas Method\n * https://www.rfc-editor.org/rfc/rfc9380#section-6.6.2\n */ function mapToCurveSimpleSWU(Fp, opts) {\n    (0, modular_ts_1.validateField)(Fp);\n    if (!Fp.isValid(opts.A) || !Fp.isValid(opts.B) || !Fp.isValid(opts.Z)) throw new Error(\"mapToCurveSimpleSWU: invalid opts\");\n    const sqrtRatio = SWUFpSqrtRatio(Fp, opts.Z);\n    if (!Fp.isOdd) throw new Error(\"Fp.isOdd is not implemented!\");\n    // Input: u, an element of F.\n    // Output: (x, y), a point on E.\n    return (u)=>{\n        // prettier-ignore\n        let tv1, tv2, tv3, tv4, tv5, tv6, x, y;\n        tv1 = Fp.sqr(u); // 1.  tv1 = u^2\n        tv1 = Fp.mul(tv1, opts.Z); // 2.  tv1 = Z * tv1\n        tv2 = Fp.sqr(tv1); // 3.  tv2 = tv1^2\n        tv2 = Fp.add(tv2, tv1); // 4.  tv2 = tv2 + tv1\n        tv3 = Fp.add(tv2, Fp.ONE); // 5.  tv3 = tv2 + 1\n        tv3 = Fp.mul(tv3, opts.B); // 6.  tv3 = B * tv3\n        tv4 = Fp.cmov(opts.Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO)); // 7.  tv4 = CMOV(Z, -tv2, tv2 != 0)\n        tv4 = Fp.mul(tv4, opts.A); // 8.  tv4 = A * tv4\n        tv2 = Fp.sqr(tv3); // 9.  tv2 = tv3^2\n        tv6 = Fp.sqr(tv4); // 10. tv6 = tv4^2\n        tv5 = Fp.mul(tv6, opts.A); // 11. tv5 = A * tv6\n        tv2 = Fp.add(tv2, tv5); // 12. tv2 = tv2 + tv5\n        tv2 = Fp.mul(tv2, tv3); // 13. tv2 = tv2 * tv3\n        tv6 = Fp.mul(tv6, tv4); // 14. tv6 = tv6 * tv4\n        tv5 = Fp.mul(tv6, opts.B); // 15. tv5 = B * tv6\n        tv2 = Fp.add(tv2, tv5); // 16. tv2 = tv2 + tv5\n        x = Fp.mul(tv1, tv3); // 17.   x = tv1 * tv3\n        const { isValid, value } = sqrtRatio(tv2, tv6); // 18. (is_gx1_square, y1) = sqrt_ratio(tv2, tv6)\n        y = Fp.mul(tv1, u); // 19.   y = tv1 * u  -> Z * u^3 * y1\n        y = Fp.mul(y, value); // 20.   y = y * y1\n        x = Fp.cmov(x, tv3, isValid); // 21.   x = CMOV(x, tv3, is_gx1_square)\n        y = Fp.cmov(y, value, isValid); // 22.   y = CMOV(y, y1, is_gx1_square)\n        const e1 = Fp.isOdd(u) === Fp.isOdd(y); // 23.  e1 = sgn0(u) == sgn0(y)\n        y = Fp.cmov(Fp.neg(y), y, e1); // 24.   y = CMOV(-y, y, e1)\n        const tv4_inv = (0, modular_ts_1.FpInvertBatch)(Fp, [\n            tv4\n        ], true)[0];\n        x = Fp.mul(x, tv4_inv); // 25.   x = x / tv4\n        return {\n            x,\n            y\n        };\n    };\n} //# sourceMappingURL=weierstrass.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ox/node_modules/@noble/curves/abstract/weierstrass.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ox/node_modules/@noble/curves/secp256k1.js":
/*!*****************************************************************!*\
  !*** ./node_modules/ox/node_modules/@noble/curves/secp256k1.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.encodeToCurve = exports.hashToCurve = exports.secp256k1_hasher = exports.schnorr = exports.secp256k1 = void 0;\n/**\n * NIST secp256k1. See [pdf](https://www.secg.org/sec2-v2.pdf).\n *\n * Seems to be rigid (not backdoored)\n * [as per discussion](https://bitcointalk.org/index.php?topic=289795.msg3183975#msg3183975).\n *\n * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.\n * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.\n * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.\n * [See explanation](https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066).\n * @module\n */ /*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */ const sha2_1 = __webpack_require__(/*! @noble/hashes/sha2 */ \"(ssr)/./node_modules/ox/node_modules/@noble/hashes/sha2.js\");\nconst utils_1 = __webpack_require__(/*! @noble/hashes/utils */ \"(ssr)/./node_modules/ox/node_modules/@noble/hashes/utils.js\");\nconst _shortw_utils_ts_1 = __webpack_require__(/*! ./_shortw_utils.js */ \"(ssr)/./node_modules/ox/node_modules/@noble/curves/_shortw_utils.js\");\nconst hash_to_curve_ts_1 = __webpack_require__(/*! ./abstract/hash-to-curve.js */ \"(ssr)/./node_modules/ox/node_modules/@noble/curves/abstract/hash-to-curve.js\");\nconst modular_ts_1 = __webpack_require__(/*! ./abstract/modular.js */ \"(ssr)/./node_modules/ox/node_modules/@noble/curves/abstract/modular.js\");\nconst utils_ts_1 = __webpack_require__(/*! ./abstract/utils.js */ \"(ssr)/./node_modules/ox/node_modules/@noble/curves/abstract/utils.js\");\nconst weierstrass_ts_1 = __webpack_require__(/*! ./abstract/weierstrass.js */ \"(ssr)/./node_modules/ox/node_modules/@noble/curves/abstract/weierstrass.js\");\nconst secp256k1P = BigInt(\"0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f\");\nconst secp256k1N = BigInt(\"0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141\");\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst divNearest = (a, b)=>(a + b / _2n) / b;\n/**\n * ‚àön = n^((p+1)/4) for fields p = 3 mod 4. We unwrap the loop and multiply bit-by-bit.\n * (P+1n/4n).toString(2) would produce bits [223x 1, 0, 22x 1, 4x 0, 11, 00]\n */ function sqrtMod(y) {\n    const P = secp256k1P;\n    // prettier-ignore\n    const _3n = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);\n    // prettier-ignore\n    const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);\n    const b2 = y * y * y % P; // x^3, 11\n    const b3 = b2 * b2 * y % P; // x^7\n    const b6 = (0, modular_ts_1.pow2)(b3, _3n, P) * b3 % P;\n    const b9 = (0, modular_ts_1.pow2)(b6, _3n, P) * b3 % P;\n    const b11 = (0, modular_ts_1.pow2)(b9, _2n, P) * b2 % P;\n    const b22 = (0, modular_ts_1.pow2)(b11, _11n, P) * b11 % P;\n    const b44 = (0, modular_ts_1.pow2)(b22, _22n, P) * b22 % P;\n    const b88 = (0, modular_ts_1.pow2)(b44, _44n, P) * b44 % P;\n    const b176 = (0, modular_ts_1.pow2)(b88, _88n, P) * b88 % P;\n    const b220 = (0, modular_ts_1.pow2)(b176, _44n, P) * b44 % P;\n    const b223 = (0, modular_ts_1.pow2)(b220, _3n, P) * b3 % P;\n    const t1 = (0, modular_ts_1.pow2)(b223, _23n, P) * b22 % P;\n    const t2 = (0, modular_ts_1.pow2)(t1, _6n, P) * b2 % P;\n    const root = (0, modular_ts_1.pow2)(t2, _2n, P);\n    if (!Fpk1.eql(Fpk1.sqr(root), y)) throw new Error(\"Cannot find square root\");\n    return root;\n}\nconst Fpk1 = (0, modular_ts_1.Field)(secp256k1P, undefined, undefined, {\n    sqrt: sqrtMod\n});\n/**\n * secp256k1 curve, ECDSA and ECDH methods.\n *\n * Field: `2n**256n - 2n**32n - 2n**9n - 2n**8n - 2n**7n - 2n**6n - 2n**4n - 1n`\n *\n * @example\n * ```js\n * import { secp256k1 } from '@noble/curves/secp256k1';\n * const priv = secp256k1.utils.randomPrivateKey();\n * const pub = secp256k1.getPublicKey(priv);\n * const msg = new Uint8Array(32).fill(1); // message hash (not message) in ecdsa\n * const sig = secp256k1.sign(msg, priv); // `{prehash: true}` option is available\n * const isValid = secp256k1.verify(sig, msg, pub) === true;\n * ```\n */ exports.secp256k1 = (0, _shortw_utils_ts_1.createCurve)({\n    a: _0n,\n    b: BigInt(7),\n    Fp: Fpk1,\n    n: secp256k1N,\n    Gx: BigInt(\"55066263022277343669578718895168534326250603453777594175500187360389116729240\"),\n    Gy: BigInt(\"32670510020758816978083085130507043184471273380659243275938904335757337482424\"),\n    h: BigInt(1),\n    lowS: true,\n    endo: {\n        // Endomorphism, see above\n        beta: BigInt(\"0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee\"),\n        splitScalar: (k)=>{\n            const n = secp256k1N;\n            const a1 = BigInt(\"0x3086d221a7d46bcde86c90e49284eb15\");\n            const b1 = -_1n * BigInt(\"0xe4437ed6010e88286f547fa90abfe4c3\");\n            const a2 = BigInt(\"0x114ca50f7a8e2f3f657c1108d9d44cfd8\");\n            const b2 = a1;\n            const POW_2_128 = BigInt(\"0x100000000000000000000000000000000\"); // (2n**128n).toString(16)\n            const c1 = divNearest(b2 * k, n);\n            const c2 = divNearest(-b1 * k, n);\n            let k1 = (0, modular_ts_1.mod)(k - c1 * a1 - c2 * a2, n);\n            let k2 = (0, modular_ts_1.mod)(-c1 * b1 - c2 * b2, n);\n            const k1neg = k1 > POW_2_128;\n            const k2neg = k2 > POW_2_128;\n            if (k1neg) k1 = n - k1;\n            if (k2neg) k2 = n - k2;\n            if (k1 > POW_2_128 || k2 > POW_2_128) {\n                throw new Error(\"splitScalar: Endomorphism failed, k=\" + k);\n            }\n            return {\n                k1neg,\n                k1,\n                k2neg,\n                k2\n            };\n        }\n    }\n}, sha2_1.sha256);\n// Schnorr signatures are superior to ECDSA from above. Below is Schnorr-specific BIP0340 code.\n// https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\n/** An object mapping tags to their tagged hash prefix of [SHA256(tag) | SHA256(tag)] */ const TAGGED_HASH_PREFIXES = {};\nfunction taggedHash(tag, ...messages) {\n    let tagP = TAGGED_HASH_PREFIXES[tag];\n    if (tagP === undefined) {\n        const tagH = (0, sha2_1.sha256)(Uint8Array.from(tag, (c)=>c.charCodeAt(0)));\n        tagP = (0, utils_ts_1.concatBytes)(tagH, tagH);\n        TAGGED_HASH_PREFIXES[tag] = tagP;\n    }\n    return (0, sha2_1.sha256)((0, utils_ts_1.concatBytes)(tagP, ...messages));\n}\n// ECDSA compact points are 33-byte. Schnorr is 32: we strip first byte 0x02 or 0x03\nconst pointToBytes = (point)=>point.toRawBytes(true).slice(1);\nconst numTo32b = (n)=>(0, utils_ts_1.numberToBytesBE)(n, 32);\nconst modP = (x)=>(0, modular_ts_1.mod)(x, secp256k1P);\nconst modN = (x)=>(0, modular_ts_1.mod)(x, secp256k1N);\nconst Point = /* @__PURE__ */ (()=>exports.secp256k1.ProjectivePoint)();\nconst GmulAdd = (Q, a, b)=>Point.BASE.multiplyAndAddUnsafe(Q, a, b);\n// Calculate point, scalar and bytes\nfunction schnorrGetExtPubKey(priv) {\n    let d_ = exports.secp256k1.utils.normPrivateKeyToScalar(priv); // same method executed in fromPrivateKey\n    let p = Point.fromPrivateKey(d_); // P = d'‚ãÖG; 0 < d' < n check is done inside\n    const scalar = p.hasEvenY() ? d_ : modN(-d_);\n    return {\n        scalar: scalar,\n        bytes: pointToBytes(p)\n    };\n}\n/**\n * lift_x from BIP340. Convert 32-byte x coordinate to elliptic curve point.\n * @returns valid point checked for being on-curve\n */ function lift_x(x) {\n    (0, utils_ts_1.aInRange)(\"x\", x, _1n, secp256k1P); // Fail if x ‚â• p.\n    const xx = modP(x * x);\n    const c = modP(xx * x + BigInt(7)); // Let c = x¬≥ + 7 mod p.\n    let y = sqrtMod(c); // Let y = c^(p+1)/4 mod p.\n    if (y % _2n !== _0n) y = modP(-y); // Return the unique point P such that x(P) = x and\n    const p = new Point(x, y, _1n); // y(P) = y if y mod 2 = 0 or y(P) = p-y otherwise.\n    p.assertValidity();\n    return p;\n}\nconst num = utils_ts_1.bytesToNumberBE;\n/**\n * Create tagged hash, convert it to bigint, reduce modulo-n.\n */ function challenge(...args) {\n    return modN(num(taggedHash(\"BIP0340/challenge\", ...args)));\n}\n/**\n * Schnorr public key is just `x` coordinate of Point as per BIP340.\n */ function schnorrGetPublicKey(privateKey) {\n    return schnorrGetExtPubKey(privateKey).bytes; // d'=int(sk). Fail if d'=0 or d'‚â•n. Ret bytes(d'‚ãÖG)\n}\n/**\n * Creates Schnorr signature as per BIP340. Verifies itself before returning anything.\n * auxRand is optional and is not the sole source of k generation: bad CSPRNG won't be dangerous.\n */ function schnorrSign(message, privateKey, auxRand = (0, utils_1.randomBytes)(32)) {\n    const m = (0, utils_ts_1.ensureBytes)(\"message\", message);\n    const { bytes: px, scalar: d } = schnorrGetExtPubKey(privateKey); // checks for isWithinCurveOrder\n    const a = (0, utils_ts_1.ensureBytes)(\"auxRand\", auxRand, 32); // Auxiliary random data a: a 32-byte array\n    const t = numTo32b(d ^ num(taggedHash(\"BIP0340/aux\", a))); // Let t be the byte-wise xor of bytes(d) and hash/aux(a)\n    const rand = taggedHash(\"BIP0340/nonce\", t, px, m); // Let rand = hash/nonce(t || bytes(P) || m)\n    const k_ = modN(num(rand)); // Let k' = int(rand) mod n\n    if (k_ === _0n) throw new Error(\"sign failed: k is zero\"); // Fail if k' = 0.\n    const { bytes: rx, scalar: k } = schnorrGetExtPubKey(k_); // Let R = k'‚ãÖG.\n    const e = challenge(rx, px, m); // Let e = int(hash/challenge(bytes(R) || bytes(P) || m)) mod n.\n    const sig = new Uint8Array(64); // Let sig = bytes(R) || bytes((k + ed) mod n).\n    sig.set(rx, 0);\n    sig.set(numTo32b(modN(k + e * d)), 32);\n    // If Verify(bytes(P), m, sig) (see below) returns failure, abort\n    if (!schnorrVerify(sig, m, px)) throw new Error(\"sign: Invalid signature produced\");\n    return sig;\n}\n/**\n * Verifies Schnorr signature.\n * Will swallow errors & return false except for initial type validation of arguments.\n */ function schnorrVerify(signature, message, publicKey) {\n    const sig = (0, utils_ts_1.ensureBytes)(\"signature\", signature, 64);\n    const m = (0, utils_ts_1.ensureBytes)(\"message\", message);\n    const pub = (0, utils_ts_1.ensureBytes)(\"publicKey\", publicKey, 32);\n    try {\n        const P = lift_x(num(pub)); // P = lift_x(int(pk)); fail if that fails\n        const r = num(sig.subarray(0, 32)); // Let r = int(sig[0:32]); fail if r ‚â• p.\n        if (!(0, utils_ts_1.inRange)(r, _1n, secp256k1P)) return false;\n        const s = num(sig.subarray(32, 64)); // Let s = int(sig[32:64]); fail if s ‚â• n.\n        if (!(0, utils_ts_1.inRange)(s, _1n, secp256k1N)) return false;\n        const e = challenge(numTo32b(r), pointToBytes(P), m); // int(challenge(bytes(r)||bytes(P)||m))%n\n        const R = GmulAdd(P, s, modN(-e)); // R = s‚ãÖG - e‚ãÖP\n        if (!R || !R.hasEvenY() || R.toAffine().x !== r) return false; // -eP == (n-e)P\n        return true; // Fail if is_infinite(R) / not has_even_y(R) / x(R) ‚â† r.\n    } catch (error) {\n        return false;\n    }\n}\n/**\n * Schnorr signatures over secp256k1.\n * https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\n * @example\n * ```js\n * import { schnorr } from '@noble/curves/secp256k1';\n * const priv = schnorr.utils.randomPrivateKey();\n * const pub = schnorr.getPublicKey(priv);\n * const msg = new TextEncoder().encode('hello');\n * const sig = schnorr.sign(msg, priv);\n * const isValid = schnorr.verify(sig, msg, pub);\n * ```\n */ exports.schnorr = (()=>({\n        getPublicKey: schnorrGetPublicKey,\n        sign: schnorrSign,\n        verify: schnorrVerify,\n        utils: {\n            randomPrivateKey: exports.secp256k1.utils.randomPrivateKey,\n            lift_x,\n            pointToBytes,\n            numberToBytesBE: utils_ts_1.numberToBytesBE,\n            bytesToNumberBE: utils_ts_1.bytesToNumberBE,\n            taggedHash,\n            mod: modular_ts_1.mod\n        }\n    }))();\nconst isoMap = /* @__PURE__ */ (()=>(0, hash_to_curve_ts_1.isogenyMap)(Fpk1, [\n        // xNum\n        [\n            \"0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7\",\n            \"0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581\",\n            \"0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262\",\n            \"0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c\"\n        ],\n        // xDen\n        [\n            \"0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b\",\n            \"0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14\",\n            \"0x0000000000000000000000000000000000000000000000000000000000000001\"\n        ],\n        // yNum\n        [\n            \"0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c\",\n            \"0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3\",\n            \"0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931\",\n            \"0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84\"\n        ],\n        // yDen\n        [\n            \"0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b\",\n            \"0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573\",\n            \"0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f\",\n            \"0x0000000000000000000000000000000000000000000000000000000000000001\"\n        ]\n    ].map((i)=>i.map((j)=>BigInt(j)))))();\nconst mapSWU = /* @__PURE__ */ (()=>(0, weierstrass_ts_1.mapToCurveSimpleSWU)(Fpk1, {\n        A: BigInt(\"0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533\"),\n        B: BigInt(\"1771\"),\n        Z: Fpk1.create(BigInt(\"-11\"))\n    }))();\n/** Hashing / encoding to secp256k1 points / field. RFC 9380 methods. */ exports.secp256k1_hasher = (()=>(0, hash_to_curve_ts_1.createHasher)(exports.secp256k1.ProjectivePoint, (scalars)=>{\n        const { x, y } = mapSWU(Fpk1.create(scalars[0]));\n        return isoMap(x, y);\n    }, {\n        DST: \"secp256k1_XMD:SHA-256_SSWU_RO_\",\n        encodeDST: \"secp256k1_XMD:SHA-256_SSWU_NU_\",\n        p: Fpk1.ORDER,\n        m: 1,\n        k: 128,\n        expand: \"xmd\",\n        hash: sha2_1.sha256\n    }))();\nexports.hashToCurve = (()=>exports.secp256k1_hasher.hashToCurve)();\nexports.encodeToCurve = (()=>exports.secp256k1_hasher.encodeToCurve)(); //# sourceMappingURL=secp256k1.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ox/node_modules/@noble/curves/secp256k1.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ox/node_modules/@noble/hashes/_md.js":
/*!***********************************************************!*\
  !*** ./node_modules/ox/node_modules/@noble/hashes/_md.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.SHA512_IV = exports.SHA384_IV = exports.SHA224_IV = exports.SHA256_IV = exports.HashMD = void 0;\nexports.setBigUint64 = setBigUint64;\nexports.Chi = Chi;\nexports.Maj = Maj;\n/**\n * Internal Merkle-Damgard hash utils.\n * @module\n */ const utils_ts_1 = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/ox/node_modules/@noble/hashes/utils.js\");\n/** Polyfill for Safari 14. https://caniuse.com/mdn-javascript_builtins_dataview_setbiguint64 */ function setBigUint64(view, byteOffset, value, isLE) {\n    if (typeof view.setBigUint64 === \"function\") return view.setBigUint64(byteOffset, value, isLE);\n    const _32n = BigInt(32);\n    const _u32_max = BigInt(0xffffffff);\n    const wh = Number(value >> _32n & _u32_max);\n    const wl = Number(value & _u32_max);\n    const h = isLE ? 4 : 0;\n    const l = isLE ? 0 : 4;\n    view.setUint32(byteOffset + h, wh, isLE);\n    view.setUint32(byteOffset + l, wl, isLE);\n}\n/** Choice: a ? b : c */ function Chi(a, b, c) {\n    return a & b ^ ~a & c;\n}\n/** Majority function, true if any two inputs is true. */ function Maj(a, b, c) {\n    return a & b ^ a & c ^ b & c;\n}\n/**\n * Merkle-Damgard hash construction base class.\n * Could be used to create MD5, RIPEMD, SHA1, SHA2.\n */ class HashMD extends utils_ts_1.Hash {\n    constructor(blockLen, outputLen, padOffset, isLE){\n        super();\n        this.finished = false;\n        this.length = 0;\n        this.pos = 0;\n        this.destroyed = false;\n        this.blockLen = blockLen;\n        this.outputLen = outputLen;\n        this.padOffset = padOffset;\n        this.isLE = isLE;\n        this.buffer = new Uint8Array(blockLen);\n        this.view = (0, utils_ts_1.createView)(this.buffer);\n    }\n    update(data) {\n        (0, utils_ts_1.aexists)(this);\n        data = (0, utils_ts_1.toBytes)(data);\n        (0, utils_ts_1.abytes)(data);\n        const { view, buffer, blockLen } = this;\n        const len = data.length;\n        for(let pos = 0; pos < len;){\n            const take = Math.min(blockLen - this.pos, len - pos);\n            // Fast path: we have at least one block in input, cast it to view and process\n            if (take === blockLen) {\n                const dataView = (0, utils_ts_1.createView)(data);\n                for(; blockLen <= len - pos; pos += blockLen)this.process(dataView, pos);\n                continue;\n            }\n            buffer.set(data.subarray(pos, pos + take), this.pos);\n            this.pos += take;\n            pos += take;\n            if (this.pos === blockLen) {\n                this.process(view, 0);\n                this.pos = 0;\n            }\n        }\n        this.length += data.length;\n        this.roundClean();\n        return this;\n    }\n    digestInto(out) {\n        (0, utils_ts_1.aexists)(this);\n        (0, utils_ts_1.aoutput)(out, this);\n        this.finished = true;\n        // Padding\n        // We can avoid allocation of buffer for padding completely if it\n        // was previously not allocated here. But it won't change performance.\n        const { buffer, view, blockLen, isLE } = this;\n        let { pos } = this;\n        // append the bit '1' to the message\n        buffer[pos++] = 128;\n        (0, utils_ts_1.clean)(this.buffer.subarray(pos));\n        // we have less than padOffset left in buffer, so we cannot put length in\n        // current block, need process it and pad again\n        if (this.padOffset > blockLen - pos) {\n            this.process(view, 0);\n            pos = 0;\n        }\n        // Pad until full block byte with zeros\n        for(let i = pos; i < blockLen; i++)buffer[i] = 0;\n        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n        // So we just write lowest 64 bits of that value.\n        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n        this.process(view, 0);\n        const oview = (0, utils_ts_1.createView)(out);\n        const len = this.outputLen;\n        // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n        if (len % 4) throw new Error(\"_sha2: outputLen should be aligned to 32bit\");\n        const outLen = len / 4;\n        const state = this.get();\n        if (outLen > state.length) throw new Error(\"_sha2: outputLen bigger than state\");\n        for(let i = 0; i < outLen; i++)oview.setUint32(4 * i, state[i], isLE);\n    }\n    digest() {\n        const { buffer, outputLen } = this;\n        this.digestInto(buffer);\n        const res = buffer.slice(0, outputLen);\n        this.destroy();\n        return res;\n    }\n    _cloneInto(to) {\n        to || (to = new this.constructor());\n        to.set(...this.get());\n        const { blockLen, buffer, length, finished, destroyed, pos } = this;\n        to.destroyed = destroyed;\n        to.finished = finished;\n        to.length = length;\n        to.pos = pos;\n        if (length % blockLen) to.buffer.set(buffer);\n        return to;\n    }\n    clone() {\n        return this._cloneInto();\n    }\n}\nexports.HashMD = HashMD;\n/**\n * Initial SHA-2 state: fractional parts of square roots of first 16 primes 2..53.\n * Check out `test/misc/sha2-gen-iv.js` for recomputation guide.\n */ /** Initial SHA256 state. Bits 0..32 of frac part of sqrt of primes 2..19 */ exports.SHA256_IV = Uint32Array.from([\n    0x6a09e667,\n    0xbb67ae85,\n    0x3c6ef372,\n    0xa54ff53a,\n    0x510e527f,\n    0x9b05688c,\n    0x1f83d9ab,\n    0x5be0cd19\n]);\n/** Initial SHA224 state. Bits 32..64 of frac part of sqrt of primes 23..53 */ exports.SHA224_IV = Uint32Array.from([\n    0xc1059ed8,\n    0x367cd507,\n    0x3070dd17,\n    0xf70e5939,\n    0xffc00b31,\n    0x68581511,\n    0x64f98fa7,\n    0xbefa4fa4\n]);\n/** Initial SHA384 state. Bits 0..64 of frac part of sqrt of primes 23..53 */ exports.SHA384_IV = Uint32Array.from([\n    0xcbbb9d5d,\n    0xc1059ed8,\n    0x629a292a,\n    0x367cd507,\n    0x9159015a,\n    0x3070dd17,\n    0x152fecd8,\n    0xf70e5939,\n    0x67332667,\n    0xffc00b31,\n    0x8eb44a87,\n    0x68581511,\n    0xdb0c2e0d,\n    0x64f98fa7,\n    0x47b5481d,\n    0xbefa4fa4\n]);\n/** Initial SHA512 state. Bits 0..64 of frac part of sqrt of primes 2..19 */ exports.SHA512_IV = Uint32Array.from([\n    0x6a09e667,\n    0xf3bcc908,\n    0xbb67ae85,\n    0x84caa73b,\n    0x3c6ef372,\n    0xfe94f82b,\n    0xa54ff53a,\n    0x5f1d36f1,\n    0x510e527f,\n    0xade682d1,\n    0x9b05688c,\n    0x2b3e6c1f,\n    0x1f83d9ab,\n    0xfb41bd6b,\n    0x5be0cd19,\n    0x137e2179\n]); //# sourceMappingURL=_md.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ox/node_modules/@noble/hashes/_md.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ox/node_modules/@noble/hashes/_u64.js":
/*!************************************************************!*\
  !*** ./node_modules/ox/node_modules/@noble/hashes/_u64.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.toBig = exports.shrSL = exports.shrSH = exports.rotrSL = exports.rotrSH = exports.rotrBL = exports.rotrBH = exports.rotr32L = exports.rotr32H = exports.rotlSL = exports.rotlSH = exports.rotlBL = exports.rotlBH = exports.add5L = exports.add5H = exports.add4L = exports.add4H = exports.add3L = exports.add3H = void 0;\nexports.add = add;\nexports.fromBig = fromBig;\nexports.split = split;\n/**\n * Internal helpers for u64. BigUint64Array is too slow as per 2025, so we implement it using Uint32Array.\n * @todo re-check https://issues.chromium.org/issues/42212588\n * @module\n */ const U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1);\nconst _32n = /* @__PURE__ */ BigInt(32);\nfunction fromBig(n, le = false) {\n    if (le) return {\n        h: Number(n & U32_MASK64),\n        l: Number(n >> _32n & U32_MASK64)\n    };\n    return {\n        h: Number(n >> _32n & U32_MASK64) | 0,\n        l: Number(n & U32_MASK64) | 0\n    };\n}\nfunction split(lst, le = false) {\n    const len = lst.length;\n    let Ah = new Uint32Array(len);\n    let Al = new Uint32Array(len);\n    for(let i = 0; i < len; i++){\n        const { h, l } = fromBig(lst[i], le);\n        [Ah[i], Al[i]] = [\n            h,\n            l\n        ];\n    }\n    return [\n        Ah,\n        Al\n    ];\n}\nconst toBig = (h, l)=>BigInt(h >>> 0) << _32n | BigInt(l >>> 0);\nexports.toBig = toBig;\n// for Shift in [0, 32)\nconst shrSH = (h, _l, s)=>h >>> s;\nexports.shrSH = shrSH;\nconst shrSL = (h, l, s)=>h << 32 - s | l >>> s;\nexports.shrSL = shrSL;\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h, l, s)=>h >>> s | l << 32 - s;\nexports.rotrSH = rotrSH;\nconst rotrSL = (h, l, s)=>h << 32 - s | l >>> s;\nexports.rotrSL = rotrSL;\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h, l, s)=>h << 64 - s | l >>> s - 32;\nexports.rotrBH = rotrBH;\nconst rotrBL = (h, l, s)=>h >>> s - 32 | l << 64 - s;\nexports.rotrBL = rotrBL;\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (_h, l)=>l;\nexports.rotr32H = rotr32H;\nconst rotr32L = (h, _l)=>h;\nexports.rotr32L = rotr32L;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h, l, s)=>h << s | l >>> 32 - s;\nexports.rotlSH = rotlSH;\nconst rotlSL = (h, l, s)=>l << s | h >>> 32 - s;\nexports.rotlSL = rotlSL;\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h, l, s)=>l << s - 32 | h >>> 64 - s;\nexports.rotlBH = rotlBH;\nconst rotlBL = (h, l, s)=>h << s - 32 | l >>> 64 - s;\nexports.rotlBL = rotlBL;\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\nfunction add(Ah, Al, Bh, Bl) {\n    const l = (Al >>> 0) + (Bl >>> 0);\n    return {\n        h: Ah + Bh + (l / 2 ** 32 | 0) | 0,\n        l: l | 0\n    };\n}\n// Addition with more than 2 elements\nconst add3L = (Al, Bl, Cl)=>(Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nexports.add3L = add3L;\nconst add3H = (low, Ah, Bh, Ch)=>Ah + Bh + Ch + (low / 2 ** 32 | 0) | 0;\nexports.add3H = add3H;\nconst add4L = (Al, Bl, Cl, Dl)=>(Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nexports.add4L = add4L;\nconst add4H = (low, Ah, Bh, Ch, Dh)=>Ah + Bh + Ch + Dh + (low / 2 ** 32 | 0) | 0;\nexports.add4H = add4H;\nconst add5L = (Al, Bl, Cl, Dl, El)=>(Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nexports.add5L = add5L;\nconst add5H = (low, Ah, Bh, Ch, Dh, Eh)=>Ah + Bh + Ch + Dh + Eh + (low / 2 ** 32 | 0) | 0;\nexports.add5H = add5H;\n// prettier-ignore\nconst u64 = {\n    fromBig,\n    split,\n    toBig,\n    shrSH,\n    shrSL,\n    rotrSH,\n    rotrSL,\n    rotrBH,\n    rotrBL,\n    rotr32H,\n    rotr32L,\n    rotlSH,\n    rotlSL,\n    rotlBH,\n    rotlBL,\n    add,\n    add3L,\n    add3H,\n    add4L,\n    add4H,\n    add5H,\n    add5L\n};\nexports[\"default\"] = u64; //# sourceMappingURL=_u64.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ox/node_modules/@noble/hashes/_u64.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ox/node_modules/@noble/hashes/cryptoNode.js":
/*!******************************************************************!*\
  !*** ./node_modules/ox/node_modules/@noble/hashes/cryptoNode.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.crypto = void 0;\n/**\n * Internal webcrypto alias.\n * We prefer WebCrypto aka globalThis.crypto, which exists in node.js 16+.\n * Falls back to Node.js built-in crypto for Node.js <=v14.\n * See utils.ts for details.\n * @module\n */ // @ts-ignore\nconst nc = __webpack_require__(/*! node:crypto */ \"node:crypto\");\nexports.crypto = nc && typeof nc === \"object\" && \"webcrypto\" in nc ? nc.webcrypto : nc && typeof nc === \"object\" && \"randomBytes\" in nc ? nc : undefined; //# sourceMappingURL=cryptoNode.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb3gvbm9kZV9tb2R1bGVzL0Bub2JsZS9oYXNoZXMvY3J5cHRvTm9kZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsY0FBYyxHQUFHLEtBQUs7QUFDdEI7Ozs7OztDQU1DLEdBQ0QsYUFBYTtBQUNiLE1BQU1HLEtBQUtDLG1CQUFPQSxDQUFDLGdDQUFhO0FBQ2hDSixjQUFjLEdBQUdHLE1BQU0sT0FBT0EsT0FBTyxZQUFZLGVBQWVBLEtBQzFEQSxHQUFHRSxTQUFTLEdBQ1pGLE1BQU0sT0FBT0EsT0FBTyxZQUFZLGlCQUFpQkEsS0FDN0NBLEtBQ0FHLFdBQ1Ysc0NBQXNDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd3N0b24tdWkvLi9ub2RlX21vZHVsZXMvb3gvbm9kZV9tb2R1bGVzL0Bub2JsZS9oYXNoZXMvY3J5cHRvTm9kZS5qcz9iZTU2Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5jcnlwdG8gPSB2b2lkIDA7XG4vKipcbiAqIEludGVybmFsIHdlYmNyeXB0byBhbGlhcy5cbiAqIFdlIHByZWZlciBXZWJDcnlwdG8gYWthIGdsb2JhbFRoaXMuY3J5cHRvLCB3aGljaCBleGlzdHMgaW4gbm9kZS5qcyAxNisuXG4gKiBGYWxscyBiYWNrIHRvIE5vZGUuanMgYnVpbHQtaW4gY3J5cHRvIGZvciBOb2RlLmpzIDw9djE0LlxuICogU2VlIHV0aWxzLnRzIGZvciBkZXRhaWxzLlxuICogQG1vZHVsZVxuICovXG4vLyBAdHMtaWdub3JlXG5jb25zdCBuYyA9IHJlcXVpcmUoXCJub2RlOmNyeXB0b1wiKTtcbmV4cG9ydHMuY3J5cHRvID0gbmMgJiYgdHlwZW9mIG5jID09PSAnb2JqZWN0JyAmJiAnd2ViY3J5cHRvJyBpbiBuY1xuICAgID8gbmMud2ViY3J5cHRvXG4gICAgOiBuYyAmJiB0eXBlb2YgbmMgPT09ICdvYmplY3QnICYmICdyYW5kb21CeXRlcycgaW4gbmNcbiAgICAgICAgPyBuY1xuICAgICAgICA6IHVuZGVmaW5lZDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNyeXB0b05vZGUuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiY3J5cHRvIiwibmMiLCJyZXF1aXJlIiwid2ViY3J5cHRvIiwidW5kZWZpbmVkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ox/node_modules/@noble/hashes/cryptoNode.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ox/node_modules/@noble/hashes/hmac.js":
/*!************************************************************!*\
  !*** ./node_modules/ox/node_modules/@noble/hashes/hmac.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.hmac = exports.HMAC = void 0;\n/**\n * HMAC: RFC2104 message authentication code.\n * @module\n */ const utils_ts_1 = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/ox/node_modules/@noble/hashes/utils.js\");\nclass HMAC extends utils_ts_1.Hash {\n    constructor(hash, _key){\n        super();\n        this.finished = false;\n        this.destroyed = false;\n        (0, utils_ts_1.ahash)(hash);\n        const key = (0, utils_ts_1.toBytes)(_key);\n        this.iHash = hash.create();\n        if (typeof this.iHash.update !== \"function\") throw new Error(\"Expected instance of class which extends utils.Hash\");\n        this.blockLen = this.iHash.blockLen;\n        this.outputLen = this.iHash.outputLen;\n        const blockLen = this.blockLen;\n        const pad = new Uint8Array(blockLen);\n        // blockLen can be bigger than outputLen\n        pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n        for(let i = 0; i < pad.length; i++)pad[i] ^= 0x36;\n        this.iHash.update(pad);\n        // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n        this.oHash = hash.create();\n        // Undo internal XOR && apply outer XOR\n        for(let i = 0; i < pad.length; i++)pad[i] ^= 0x36 ^ 0x5c;\n        this.oHash.update(pad);\n        (0, utils_ts_1.clean)(pad);\n    }\n    update(buf) {\n        (0, utils_ts_1.aexists)(this);\n        this.iHash.update(buf);\n        return this;\n    }\n    digestInto(out) {\n        (0, utils_ts_1.aexists)(this);\n        (0, utils_ts_1.abytes)(out, this.outputLen);\n        this.finished = true;\n        this.iHash.digestInto(out);\n        this.oHash.update(out);\n        this.oHash.digestInto(out);\n        this.destroy();\n    }\n    digest() {\n        const out = new Uint8Array(this.oHash.outputLen);\n        this.digestInto(out);\n        return out;\n    }\n    _cloneInto(to) {\n        // Create new instance without calling constructor since key already in state and we don't know it.\n        to || (to = Object.create(Object.getPrototypeOf(this), {}));\n        const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n        to = to;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        to.blockLen = blockLen;\n        to.outputLen = outputLen;\n        to.oHash = oHash._cloneInto(to.oHash);\n        to.iHash = iHash._cloneInto(to.iHash);\n        return to;\n    }\n    clone() {\n        return this._cloneInto();\n    }\n    destroy() {\n        this.destroyed = true;\n        this.oHash.destroy();\n        this.iHash.destroy();\n    }\n}\nexports.HMAC = HMAC;\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n * @example\n * import { hmac } from '@noble/hashes/hmac';\n * import { sha256 } from '@noble/hashes/sha2';\n * const mac1 = hmac(sha256, 'key', 'message');\n */ const hmac = (hash, key, message)=>new HMAC(hash, key).update(message).digest();\nexports.hmac = hmac;\nexports.hmac.create = (hash, key)=>new HMAC(hash, key); //# sourceMappingURL=hmac.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ox/node_modules/@noble/hashes/hmac.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ox/node_modules/@noble/hashes/legacy.js":
/*!**************************************************************!*\
  !*** ./node_modules/ox/node_modules/@noble/hashes/legacy.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ripemd160 = exports.RIPEMD160 = exports.md5 = exports.MD5 = exports.sha1 = exports.SHA1 = void 0;\n/**\n\nSHA1 (RFC 3174), MD5 (RFC 1321) and RIPEMD160 (RFC 2286) legacy, weak hash functions.\nDon't use them in a new protocol. What \"weak\" means:\n\n- Collisions can be made with 2^18 effort in MD5, 2^60 in SHA1, 2^80 in RIPEMD160.\n- No practical pre-image attacks (only theoretical, 2^123.4)\n- HMAC seems kinda ok: https://datatracker.ietf.org/doc/html/rfc6151\n * @module\n */ const _md_ts_1 = __webpack_require__(/*! ./_md.js */ \"(ssr)/./node_modules/ox/node_modules/@noble/hashes/_md.js\");\nconst utils_ts_1 = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/ox/node_modules/@noble/hashes/utils.js\");\n/** Initial SHA1 state */ const SHA1_IV = /* @__PURE__ */ Uint32Array.from([\n    0x67452301,\n    0xefcdab89,\n    0x98badcfe,\n    0x10325476,\n    0xc3d2e1f0\n]);\n// Reusable temporary buffer\nconst SHA1_W = /* @__PURE__ */ new Uint32Array(80);\n/** SHA1 legacy hash class. */ class SHA1 extends _md_ts_1.HashMD {\n    constructor(){\n        super(64, 20, 8, false);\n        this.A = SHA1_IV[0] | 0;\n        this.B = SHA1_IV[1] | 0;\n        this.C = SHA1_IV[2] | 0;\n        this.D = SHA1_IV[3] | 0;\n        this.E = SHA1_IV[4] | 0;\n    }\n    get() {\n        const { A, B, C, D, E } = this;\n        return [\n            A,\n            B,\n            C,\n            D,\n            E\n        ];\n    }\n    set(A, B, C, D, E) {\n        this.A = A | 0;\n        this.B = B | 0;\n        this.C = C | 0;\n        this.D = D | 0;\n        this.E = E | 0;\n    }\n    process(view, offset) {\n        for(let i = 0; i < 16; i++, offset += 4)SHA1_W[i] = view.getUint32(offset, false);\n        for(let i = 16; i < 80; i++)SHA1_W[i] = (0, utils_ts_1.rotl)(SHA1_W[i - 3] ^ SHA1_W[i - 8] ^ SHA1_W[i - 14] ^ SHA1_W[i - 16], 1);\n        // Compression function main loop, 80 rounds\n        let { A, B, C, D, E } = this;\n        for(let i = 0; i < 80; i++){\n            let F, K;\n            if (i < 20) {\n                F = (0, _md_ts_1.Chi)(B, C, D);\n                K = 0x5a827999;\n            } else if (i < 40) {\n                F = B ^ C ^ D;\n                K = 0x6ed9eba1;\n            } else if (i < 60) {\n                F = (0, _md_ts_1.Maj)(B, C, D);\n                K = 0x8f1bbcdc;\n            } else {\n                F = B ^ C ^ D;\n                K = 0xca62c1d6;\n            }\n            const T = (0, utils_ts_1.rotl)(A, 5) + F + E + K + SHA1_W[i] | 0;\n            E = D;\n            D = C;\n            C = (0, utils_ts_1.rotl)(B, 30);\n            B = A;\n            A = T;\n        }\n        // Add the compressed chunk to the current hash value\n        A = A + this.A | 0;\n        B = B + this.B | 0;\n        C = C + this.C | 0;\n        D = D + this.D | 0;\n        E = E + this.E | 0;\n        this.set(A, B, C, D, E);\n    }\n    roundClean() {\n        (0, utils_ts_1.clean)(SHA1_W);\n    }\n    destroy() {\n        this.set(0, 0, 0, 0, 0);\n        (0, utils_ts_1.clean)(this.buffer);\n    }\n}\nexports.SHA1 = SHA1;\n/** SHA1 (RFC 3174) legacy hash function. It was cryptographically broken. */ exports.sha1 = (0, utils_ts_1.createHasher)(()=>new SHA1());\n/** Per-round constants */ const p32 = /* @__PURE__ */ Math.pow(2, 32);\nconst K = /* @__PURE__ */ Array.from({\n    length: 64\n}, (_, i)=>Math.floor(p32 * Math.abs(Math.sin(i + 1))));\n/** md5 initial state: same as sha1, but 4 u32 instead of 5. */ const MD5_IV = /* @__PURE__ */ SHA1_IV.slice(0, 4);\n// Reusable temporary buffer\nconst MD5_W = /* @__PURE__ */ new Uint32Array(16);\n/** MD5 legacy hash class. */ class MD5 extends _md_ts_1.HashMD {\n    constructor(){\n        super(64, 16, 8, true);\n        this.A = MD5_IV[0] | 0;\n        this.B = MD5_IV[1] | 0;\n        this.C = MD5_IV[2] | 0;\n        this.D = MD5_IV[3] | 0;\n    }\n    get() {\n        const { A, B, C, D } = this;\n        return [\n            A,\n            B,\n            C,\n            D\n        ];\n    }\n    set(A, B, C, D) {\n        this.A = A | 0;\n        this.B = B | 0;\n        this.C = C | 0;\n        this.D = D | 0;\n    }\n    process(view, offset) {\n        for(let i = 0; i < 16; i++, offset += 4)MD5_W[i] = view.getUint32(offset, true);\n        // Compression function main loop, 64 rounds\n        let { A, B, C, D } = this;\n        for(let i = 0; i < 64; i++){\n            let F, g, s;\n            if (i < 16) {\n                F = (0, _md_ts_1.Chi)(B, C, D);\n                g = i;\n                s = [\n                    7,\n                    12,\n                    17,\n                    22\n                ];\n            } else if (i < 32) {\n                F = (0, _md_ts_1.Chi)(D, B, C);\n                g = (5 * i + 1) % 16;\n                s = [\n                    5,\n                    9,\n                    14,\n                    20\n                ];\n            } else if (i < 48) {\n                F = B ^ C ^ D;\n                g = (3 * i + 5) % 16;\n                s = [\n                    4,\n                    11,\n                    16,\n                    23\n                ];\n            } else {\n                F = C ^ (B | ~D);\n                g = 7 * i % 16;\n                s = [\n                    6,\n                    10,\n                    15,\n                    21\n                ];\n            }\n            F = F + A + K[i] + MD5_W[g];\n            A = D;\n            D = C;\n            C = B;\n            B = B + (0, utils_ts_1.rotl)(F, s[i % 4]);\n        }\n        // Add the compressed chunk to the current hash value\n        A = A + this.A | 0;\n        B = B + this.B | 0;\n        C = C + this.C | 0;\n        D = D + this.D | 0;\n        this.set(A, B, C, D);\n    }\n    roundClean() {\n        (0, utils_ts_1.clean)(MD5_W);\n    }\n    destroy() {\n        this.set(0, 0, 0, 0);\n        (0, utils_ts_1.clean)(this.buffer);\n    }\n}\nexports.MD5 = MD5;\n/**\n * MD5 (RFC 1321) legacy hash function. It was cryptographically broken.\n * MD5 architecture is similar to SHA1, with some differences:\n * - Reduced output length: 16 bytes (128 bit) instead of 20\n * - 64 rounds, instead of 80\n * - Little-endian: could be faster, but will require more code\n * - Non-linear index selection: huge speed-up for unroll\n * - Per round constants: more memory accesses, additional speed-up for unroll\n */ exports.md5 = (0, utils_ts_1.createHasher)(()=>new MD5());\n// RIPEMD-160\nconst Rho160 = /* @__PURE__ */ Uint8Array.from([\n    7,\n    4,\n    13,\n    1,\n    10,\n    6,\n    15,\n    3,\n    12,\n    0,\n    9,\n    5,\n    2,\n    14,\n    11,\n    8\n]);\nconst Id160 = /* @__PURE__ */ (()=>Uint8Array.from(new Array(16).fill(0).map((_, i)=>i)))();\nconst Pi160 = /* @__PURE__ */ (()=>Id160.map((i)=>(9 * i + 5) % 16))();\nconst idxLR = /* @__PURE__ */ (()=>{\n    const L = [\n        Id160\n    ];\n    const R = [\n        Pi160\n    ];\n    const res = [\n        L,\n        R\n    ];\n    for(let i = 0; i < 4; i++)for (let j of res)j.push(j[i].map((k)=>Rho160[k]));\n    return res;\n})();\nconst idxL = /* @__PURE__ */ (()=>idxLR[0])();\nconst idxR = /* @__PURE__ */ (()=>idxLR[1])();\n// const [idxL, idxR] = idxLR;\nconst shifts160 = /* @__PURE__ */ [\n    [\n        11,\n        14,\n        15,\n        12,\n        5,\n        8,\n        7,\n        9,\n        11,\n        13,\n        14,\n        15,\n        6,\n        7,\n        9,\n        8\n    ],\n    [\n        12,\n        13,\n        11,\n        15,\n        6,\n        9,\n        9,\n        7,\n        12,\n        15,\n        11,\n        13,\n        7,\n        8,\n        7,\n        7\n    ],\n    [\n        13,\n        15,\n        14,\n        11,\n        7,\n        7,\n        6,\n        8,\n        13,\n        14,\n        13,\n        12,\n        5,\n        5,\n        6,\n        9\n    ],\n    [\n        14,\n        11,\n        12,\n        14,\n        8,\n        6,\n        5,\n        5,\n        15,\n        12,\n        15,\n        14,\n        9,\n        9,\n        8,\n        6\n    ],\n    [\n        15,\n        12,\n        13,\n        13,\n        9,\n        5,\n        8,\n        6,\n        14,\n        11,\n        12,\n        11,\n        8,\n        6,\n        5,\n        5\n    ]\n].map((i)=>Uint8Array.from(i));\nconst shiftsL160 = /* @__PURE__ */ idxL.map((idx, i)=>idx.map((j)=>shifts160[i][j]));\nconst shiftsR160 = /* @__PURE__ */ idxR.map((idx, i)=>idx.map((j)=>shifts160[i][j]));\nconst Kl160 = /* @__PURE__ */ Uint32Array.from([\n    0x00000000,\n    0x5a827999,\n    0x6ed9eba1,\n    0x8f1bbcdc,\n    0xa953fd4e\n]);\nconst Kr160 = /* @__PURE__ */ Uint32Array.from([\n    0x50a28be6,\n    0x5c4dd124,\n    0x6d703ef3,\n    0x7a6d76e9,\n    0x00000000\n]);\n// It's called f() in spec.\nfunction ripemd_f(group, x, y, z) {\n    if (group === 0) return x ^ y ^ z;\n    if (group === 1) return x & y | ~x & z;\n    if (group === 2) return (x | ~y) ^ z;\n    if (group === 3) return x & z | y & ~z;\n    return x ^ (y | ~z);\n}\n// Reusable temporary buffer\nconst BUF_160 = /* @__PURE__ */ new Uint32Array(16);\nclass RIPEMD160 extends _md_ts_1.HashMD {\n    constructor(){\n        super(64, 20, 8, true);\n        this.h0 = 0x67452301 | 0;\n        this.h1 = 0xefcdab89 | 0;\n        this.h2 = 0x98badcfe | 0;\n        this.h3 = 0x10325476 | 0;\n        this.h4 = 0xc3d2e1f0 | 0;\n    }\n    get() {\n        const { h0, h1, h2, h3, h4 } = this;\n        return [\n            h0,\n            h1,\n            h2,\n            h3,\n            h4\n        ];\n    }\n    set(h0, h1, h2, h3, h4) {\n        this.h0 = h0 | 0;\n        this.h1 = h1 | 0;\n        this.h2 = h2 | 0;\n        this.h3 = h3 | 0;\n        this.h4 = h4 | 0;\n    }\n    process(view, offset) {\n        for(let i = 0; i < 16; i++, offset += 4)BUF_160[i] = view.getUint32(offset, true);\n        // prettier-ignore\n        let al = this.h0 | 0, ar = al, bl = this.h1 | 0, br = bl, cl = this.h2 | 0, cr = cl, dl = this.h3 | 0, dr = dl, el = this.h4 | 0, er = el;\n        // Instead of iterating 0 to 80, we split it into 5 groups\n        // And use the groups in constants, functions, etc. Much simpler\n        for(let group = 0; group < 5; group++){\n            const rGroup = 4 - group;\n            const hbl = Kl160[group], hbr = Kr160[group]; // prettier-ignore\n            const rl = idxL[group], rr = idxR[group]; // prettier-ignore\n            const sl = shiftsL160[group], sr = shiftsR160[group]; // prettier-ignore\n            for(let i = 0; i < 16; i++){\n                const tl = (0, utils_ts_1.rotl)(al + ripemd_f(group, bl, cl, dl) + BUF_160[rl[i]] + hbl, sl[i]) + el | 0;\n                al = el, el = dl, dl = (0, utils_ts_1.rotl)(cl, 10) | 0, cl = bl, bl = tl; // prettier-ignore\n            }\n            // 2 loops are 10% faster\n            for(let i = 0; i < 16; i++){\n                const tr = (0, utils_ts_1.rotl)(ar + ripemd_f(rGroup, br, cr, dr) + BUF_160[rr[i]] + hbr, sr[i]) + er | 0;\n                ar = er, er = dr, dr = (0, utils_ts_1.rotl)(cr, 10) | 0, cr = br, br = tr; // prettier-ignore\n            }\n        }\n        // Add the compressed chunk to the current hash value\n        this.set(this.h1 + cl + dr | 0, this.h2 + dl + er | 0, this.h3 + el + ar | 0, this.h4 + al + br | 0, this.h0 + bl + cr | 0);\n    }\n    roundClean() {\n        (0, utils_ts_1.clean)(BUF_160);\n    }\n    destroy() {\n        this.destroyed = true;\n        (0, utils_ts_1.clean)(this.buffer);\n        this.set(0, 0, 0, 0, 0);\n    }\n}\nexports.RIPEMD160 = RIPEMD160;\n/**\n * RIPEMD-160 - a legacy hash function from 1990s.\n * * https://homes.esat.kuleuven.be/~bosselae/ripemd160.html\n * * https://homes.esat.kuleuven.be/~bosselae/ripemd160/pdf/AB-9601/AB-9601.pdf\n */ exports.ripemd160 = (0, utils_ts_1.createHasher)(()=>new RIPEMD160()); //# sourceMappingURL=legacy.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ox/node_modules/@noble/hashes/legacy.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ox/node_modules/@noble/hashes/ripemd160.js":
/*!*****************************************************************!*\
  !*** ./node_modules/ox/node_modules/@noble/hashes/ripemd160.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ripemd160 = exports.RIPEMD160 = void 0;\n/**\n * RIPEMD-160 legacy hash function.\n * https://homes.esat.kuleuven.be/~bosselae/ripemd160.html\n * https://homes.esat.kuleuven.be/~bosselae/ripemd160/pdf/AB-9601/AB-9601.pdf\n * @module\n * @deprecated\n */ const legacy_ts_1 = __webpack_require__(/*! ./legacy.js */ \"(ssr)/./node_modules/ox/node_modules/@noble/hashes/legacy.js\");\n/** @deprecated Use import from `noble/hashes/legacy` module */ exports.RIPEMD160 = legacy_ts_1.RIPEMD160;\n/** @deprecated Use import from `noble/hashes/legacy` module */ exports.ripemd160 = legacy_ts_1.ripemd160; //# sourceMappingURL=ripemd160.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb3gvbm9kZV9tb2R1bGVzL0Bub2JsZS9oYXNoZXMvcmlwZW1kMTYwLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxpQkFBaUIsR0FBR0EsaUJBQWlCLEdBQUcsS0FBSztBQUM3Qzs7Ozs7O0NBTUMsR0FDRCxNQUFNSSxjQUFjQyxtQkFBT0EsQ0FBQyxpRkFBYTtBQUN6Qyw2REFBNkQsR0FDN0RMLGlCQUFpQixHQUFHSSxZQUFZRCxTQUFTO0FBQ3pDLDZEQUE2RCxHQUM3REgsaUJBQWlCLEdBQUdJLFlBQVlGLFNBQVMsRUFDekMscUNBQXFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd3N0b24tdWkvLi9ub2RlX21vZHVsZXMvb3gvbm9kZV9tb2R1bGVzL0Bub2JsZS9oYXNoZXMvcmlwZW1kMTYwLmpzPzUzNTEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnJpcGVtZDE2MCA9IGV4cG9ydHMuUklQRU1EMTYwID0gdm9pZCAwO1xuLyoqXG4gKiBSSVBFTUQtMTYwIGxlZ2FjeSBoYXNoIGZ1bmN0aW9uLlxuICogaHR0cHM6Ly9ob21lcy5lc2F0Lmt1bGV1dmVuLmJlL35ib3NzZWxhZS9yaXBlbWQxNjAuaHRtbFxuICogaHR0cHM6Ly9ob21lcy5lc2F0Lmt1bGV1dmVuLmJlL35ib3NzZWxhZS9yaXBlbWQxNjAvcGRmL0FCLTk2MDEvQUItOTYwMS5wZGZcbiAqIEBtb2R1bGVcbiAqIEBkZXByZWNhdGVkXG4gKi9cbmNvbnN0IGxlZ2FjeV90c18xID0gcmVxdWlyZShcIi4vbGVnYWN5LmpzXCIpO1xuLyoqIEBkZXByZWNhdGVkIFVzZSBpbXBvcnQgZnJvbSBgbm9ibGUvaGFzaGVzL2xlZ2FjeWAgbW9kdWxlICovXG5leHBvcnRzLlJJUEVNRDE2MCA9IGxlZ2FjeV90c18xLlJJUEVNRDE2MDtcbi8qKiBAZGVwcmVjYXRlZCBVc2UgaW1wb3J0IGZyb20gYG5vYmxlL2hhc2hlcy9sZWdhY3lgIG1vZHVsZSAqL1xuZXhwb3J0cy5yaXBlbWQxNjAgPSBsZWdhY3lfdHNfMS5yaXBlbWQxNjA7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yaXBlbWQxNjAuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwicmlwZW1kMTYwIiwiUklQRU1EMTYwIiwibGVnYWN5X3RzXzEiLCJyZXF1aXJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ox/node_modules/@noble/hashes/ripemd160.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ox/node_modules/@noble/hashes/sha2.js":
/*!************************************************************!*\
  !*** ./node_modules/ox/node_modules/@noble/hashes/sha2.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.sha512_224 = exports.sha512_256 = exports.sha384 = exports.sha512 = exports.sha224 = exports.sha256 = exports.SHA512_256 = exports.SHA512_224 = exports.SHA384 = exports.SHA512 = exports.SHA224 = exports.SHA256 = void 0;\n/**\n * SHA2 hash function. A.k.a. sha256, sha384, sha512, sha512_224, sha512_256.\n * SHA256 is the fastest hash implementable in JS, even faster than Blake3.\n * Check out [RFC 4634](https://datatracker.ietf.org/doc/html/rfc4634) and\n * [FIPS 180-4](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf).\n * @module\n */ const _md_ts_1 = __webpack_require__(/*! ./_md.js */ \"(ssr)/./node_modules/ox/node_modules/@noble/hashes/_md.js\");\nconst u64 = __webpack_require__(/*! ./_u64.js */ \"(ssr)/./node_modules/ox/node_modules/@noble/hashes/_u64.js\");\nconst utils_ts_1 = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/ox/node_modules/@noble/hashes/utils.js\");\n/**\n * Round constants:\n * First 32 bits of fractional parts of the cube roots of the first 64 primes 2..311)\n */ // prettier-ignore\nconst SHA256_K = /* @__PURE__ */ Uint32Array.from([\n    0x428a2f98,\n    0x71374491,\n    0xb5c0fbcf,\n    0xe9b5dba5,\n    0x3956c25b,\n    0x59f111f1,\n    0x923f82a4,\n    0xab1c5ed5,\n    0xd807aa98,\n    0x12835b01,\n    0x243185be,\n    0x550c7dc3,\n    0x72be5d74,\n    0x80deb1fe,\n    0x9bdc06a7,\n    0xc19bf174,\n    0xe49b69c1,\n    0xefbe4786,\n    0x0fc19dc6,\n    0x240ca1cc,\n    0x2de92c6f,\n    0x4a7484aa,\n    0x5cb0a9dc,\n    0x76f988da,\n    0x983e5152,\n    0xa831c66d,\n    0xb00327c8,\n    0xbf597fc7,\n    0xc6e00bf3,\n    0xd5a79147,\n    0x06ca6351,\n    0x14292967,\n    0x27b70a85,\n    0x2e1b2138,\n    0x4d2c6dfc,\n    0x53380d13,\n    0x650a7354,\n    0x766a0abb,\n    0x81c2c92e,\n    0x92722c85,\n    0xa2bfe8a1,\n    0xa81a664b,\n    0xc24b8b70,\n    0xc76c51a3,\n    0xd192e819,\n    0xd6990624,\n    0xf40e3585,\n    0x106aa070,\n    0x19a4c116,\n    0x1e376c08,\n    0x2748774c,\n    0x34b0bcb5,\n    0x391c0cb3,\n    0x4ed8aa4a,\n    0x5b9cca4f,\n    0x682e6ff3,\n    0x748f82ee,\n    0x78a5636f,\n    0x84c87814,\n    0x8cc70208,\n    0x90befffa,\n    0xa4506ceb,\n    0xbef9a3f7,\n    0xc67178f2\n]);\n/** Reusable temporary buffer. \"W\" comes straight from spec. */ const SHA256_W = /* @__PURE__ */ new Uint32Array(64);\nclass SHA256 extends _md_ts_1.HashMD {\n    constructor(outputLen = 32){\n        super(64, outputLen, 8, false);\n        // We cannot use array here since array allows indexing by variable\n        // which means optimizer/compiler cannot use registers.\n        this.A = _md_ts_1.SHA256_IV[0] | 0;\n        this.B = _md_ts_1.SHA256_IV[1] | 0;\n        this.C = _md_ts_1.SHA256_IV[2] | 0;\n        this.D = _md_ts_1.SHA256_IV[3] | 0;\n        this.E = _md_ts_1.SHA256_IV[4] | 0;\n        this.F = _md_ts_1.SHA256_IV[5] | 0;\n        this.G = _md_ts_1.SHA256_IV[6] | 0;\n        this.H = _md_ts_1.SHA256_IV[7] | 0;\n    }\n    get() {\n        const { A, B, C, D, E, F, G, H } = this;\n        return [\n            A,\n            B,\n            C,\n            D,\n            E,\n            F,\n            G,\n            H\n        ];\n    }\n    // prettier-ignore\n    set(A, B, C, D, E, F, G, H) {\n        this.A = A | 0;\n        this.B = B | 0;\n        this.C = C | 0;\n        this.D = D | 0;\n        this.E = E | 0;\n        this.F = F | 0;\n        this.G = G | 0;\n        this.H = H | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n        for(let i = 0; i < 16; i++, offset += 4)SHA256_W[i] = view.getUint32(offset, false);\n        for(let i = 16; i < 64; i++){\n            const W15 = SHA256_W[i - 15];\n            const W2 = SHA256_W[i - 2];\n            const s0 = (0, utils_ts_1.rotr)(W15, 7) ^ (0, utils_ts_1.rotr)(W15, 18) ^ W15 >>> 3;\n            const s1 = (0, utils_ts_1.rotr)(W2, 17) ^ (0, utils_ts_1.rotr)(W2, 19) ^ W2 >>> 10;\n            SHA256_W[i] = s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16] | 0;\n        }\n        // Compression function main loop, 64 rounds\n        let { A, B, C, D, E, F, G, H } = this;\n        for(let i = 0; i < 64; i++){\n            const sigma1 = (0, utils_ts_1.rotr)(E, 6) ^ (0, utils_ts_1.rotr)(E, 11) ^ (0, utils_ts_1.rotr)(E, 25);\n            const T1 = H + sigma1 + (0, _md_ts_1.Chi)(E, F, G) + SHA256_K[i] + SHA256_W[i] | 0;\n            const sigma0 = (0, utils_ts_1.rotr)(A, 2) ^ (0, utils_ts_1.rotr)(A, 13) ^ (0, utils_ts_1.rotr)(A, 22);\n            const T2 = sigma0 + (0, _md_ts_1.Maj)(A, B, C) | 0;\n            H = G;\n            G = F;\n            F = E;\n            E = D + T1 | 0;\n            D = C;\n            C = B;\n            B = A;\n            A = T1 + T2 | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        A = A + this.A | 0;\n        B = B + this.B | 0;\n        C = C + this.C | 0;\n        D = D + this.D | 0;\n        E = E + this.E | 0;\n        F = F + this.F | 0;\n        G = G + this.G | 0;\n        H = H + this.H | 0;\n        this.set(A, B, C, D, E, F, G, H);\n    }\n    roundClean() {\n        (0, utils_ts_1.clean)(SHA256_W);\n    }\n    destroy() {\n        this.set(0, 0, 0, 0, 0, 0, 0, 0);\n        (0, utils_ts_1.clean)(this.buffer);\n    }\n}\nexports.SHA256 = SHA256;\nclass SHA224 extends SHA256 {\n    constructor(){\n        super(28);\n        this.A = _md_ts_1.SHA224_IV[0] | 0;\n        this.B = _md_ts_1.SHA224_IV[1] | 0;\n        this.C = _md_ts_1.SHA224_IV[2] | 0;\n        this.D = _md_ts_1.SHA224_IV[3] | 0;\n        this.E = _md_ts_1.SHA224_IV[4] | 0;\n        this.F = _md_ts_1.SHA224_IV[5] | 0;\n        this.G = _md_ts_1.SHA224_IV[6] | 0;\n        this.H = _md_ts_1.SHA224_IV[7] | 0;\n    }\n}\nexports.SHA224 = SHA224;\n// SHA2-512 is slower than sha256 in js because u64 operations are slow.\n// Round contants\n// First 32 bits of the fractional parts of the cube roots of the first 80 primes 2..409\n// prettier-ignore\nconst K512 = /* @__PURE__ */ (()=>u64.split([\n        \"0x428a2f98d728ae22\",\n        \"0x7137449123ef65cd\",\n        \"0xb5c0fbcfec4d3b2f\",\n        \"0xe9b5dba58189dbbc\",\n        \"0x3956c25bf348b538\",\n        \"0x59f111f1b605d019\",\n        \"0x923f82a4af194f9b\",\n        \"0xab1c5ed5da6d8118\",\n        \"0xd807aa98a3030242\",\n        \"0x12835b0145706fbe\",\n        \"0x243185be4ee4b28c\",\n        \"0x550c7dc3d5ffb4e2\",\n        \"0x72be5d74f27b896f\",\n        \"0x80deb1fe3b1696b1\",\n        \"0x9bdc06a725c71235\",\n        \"0xc19bf174cf692694\",\n        \"0xe49b69c19ef14ad2\",\n        \"0xefbe4786384f25e3\",\n        \"0x0fc19dc68b8cd5b5\",\n        \"0x240ca1cc77ac9c65\",\n        \"0x2de92c6f592b0275\",\n        \"0x4a7484aa6ea6e483\",\n        \"0x5cb0a9dcbd41fbd4\",\n        \"0x76f988da831153b5\",\n        \"0x983e5152ee66dfab\",\n        \"0xa831c66d2db43210\",\n        \"0xb00327c898fb213f\",\n        \"0xbf597fc7beef0ee4\",\n        \"0xc6e00bf33da88fc2\",\n        \"0xd5a79147930aa725\",\n        \"0x06ca6351e003826f\",\n        \"0x142929670a0e6e70\",\n        \"0x27b70a8546d22ffc\",\n        \"0x2e1b21385c26c926\",\n        \"0x4d2c6dfc5ac42aed\",\n        \"0x53380d139d95b3df\",\n        \"0x650a73548baf63de\",\n        \"0x766a0abb3c77b2a8\",\n        \"0x81c2c92e47edaee6\",\n        \"0x92722c851482353b\",\n        \"0xa2bfe8a14cf10364\",\n        \"0xa81a664bbc423001\",\n        \"0xc24b8b70d0f89791\",\n        \"0xc76c51a30654be30\",\n        \"0xd192e819d6ef5218\",\n        \"0xd69906245565a910\",\n        \"0xf40e35855771202a\",\n        \"0x106aa07032bbd1b8\",\n        \"0x19a4c116b8d2d0c8\",\n        \"0x1e376c085141ab53\",\n        \"0x2748774cdf8eeb99\",\n        \"0x34b0bcb5e19b48a8\",\n        \"0x391c0cb3c5c95a63\",\n        \"0x4ed8aa4ae3418acb\",\n        \"0x5b9cca4f7763e373\",\n        \"0x682e6ff3d6b2b8a3\",\n        \"0x748f82ee5defb2fc\",\n        \"0x78a5636f43172f60\",\n        \"0x84c87814a1f0ab72\",\n        \"0x8cc702081a6439ec\",\n        \"0x90befffa23631e28\",\n        \"0xa4506cebde82bde9\",\n        \"0xbef9a3f7b2c67915\",\n        \"0xc67178f2e372532b\",\n        \"0xca273eceea26619c\",\n        \"0xd186b8c721c0c207\",\n        \"0xeada7dd6cde0eb1e\",\n        \"0xf57d4f7fee6ed178\",\n        \"0x06f067aa72176fba\",\n        \"0x0a637dc5a2c898a6\",\n        \"0x113f9804bef90dae\",\n        \"0x1b710b35131c471b\",\n        \"0x28db77f523047d84\",\n        \"0x32caab7b40c72493\",\n        \"0x3c9ebe0a15c9bebc\",\n        \"0x431d67c49c100d4c\",\n        \"0x4cc5d4becb3e42b6\",\n        \"0x597f299cfc657e2a\",\n        \"0x5fcb6fab3ad6faec\",\n        \"0x6c44198c4a475817\"\n    ].map((n)=>BigInt(n))))();\nconst SHA512_Kh = /* @__PURE__ */ (()=>K512[0])();\nconst SHA512_Kl = /* @__PURE__ */ (()=>K512[1])();\n// Reusable temporary buffers\nconst SHA512_W_H = /* @__PURE__ */ new Uint32Array(80);\nconst SHA512_W_L = /* @__PURE__ */ new Uint32Array(80);\nclass SHA512 extends _md_ts_1.HashMD {\n    constructor(outputLen = 64){\n        super(128, outputLen, 16, false);\n        // We cannot use array here since array allows indexing by variable\n        // which means optimizer/compiler cannot use registers.\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = _md_ts_1.SHA512_IV[0] | 0;\n        this.Al = _md_ts_1.SHA512_IV[1] | 0;\n        this.Bh = _md_ts_1.SHA512_IV[2] | 0;\n        this.Bl = _md_ts_1.SHA512_IV[3] | 0;\n        this.Ch = _md_ts_1.SHA512_IV[4] | 0;\n        this.Cl = _md_ts_1.SHA512_IV[5] | 0;\n        this.Dh = _md_ts_1.SHA512_IV[6] | 0;\n        this.Dl = _md_ts_1.SHA512_IV[7] | 0;\n        this.Eh = _md_ts_1.SHA512_IV[8] | 0;\n        this.El = _md_ts_1.SHA512_IV[9] | 0;\n        this.Fh = _md_ts_1.SHA512_IV[10] | 0;\n        this.Fl = _md_ts_1.SHA512_IV[11] | 0;\n        this.Gh = _md_ts_1.SHA512_IV[12] | 0;\n        this.Gl = _md_ts_1.SHA512_IV[13] | 0;\n        this.Hh = _md_ts_1.SHA512_IV[14] | 0;\n        this.Hl = _md_ts_1.SHA512_IV[15] | 0;\n    }\n    // prettier-ignore\n    get() {\n        const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        return [\n            Ah,\n            Al,\n            Bh,\n            Bl,\n            Ch,\n            Cl,\n            Dh,\n            Dl,\n            Eh,\n            El,\n            Fh,\n            Fl,\n            Gh,\n            Gl,\n            Hh,\n            Hl\n        ];\n    }\n    // prettier-ignore\n    set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {\n        this.Ah = Ah | 0;\n        this.Al = Al | 0;\n        this.Bh = Bh | 0;\n        this.Bl = Bl | 0;\n        this.Ch = Ch | 0;\n        this.Cl = Cl | 0;\n        this.Dh = Dh | 0;\n        this.Dl = Dl | 0;\n        this.Eh = Eh | 0;\n        this.El = El | 0;\n        this.Fh = Fh | 0;\n        this.Fl = Fl | 0;\n        this.Gh = Gh | 0;\n        this.Gl = Gl | 0;\n        this.Hh = Hh | 0;\n        this.Hl = Hl | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 64 words w[16..79] of the message schedule array\n        for(let i = 0; i < 16; i++, offset += 4){\n            SHA512_W_H[i] = view.getUint32(offset);\n            SHA512_W_L[i] = view.getUint32(offset += 4);\n        }\n        for(let i = 16; i < 80; i++){\n            // s0 := (w[i-15] rightrotate 1) xor (w[i-15] rightrotate 8) xor (w[i-15] rightshift 7)\n            const W15h = SHA512_W_H[i - 15] | 0;\n            const W15l = SHA512_W_L[i - 15] | 0;\n            const s0h = u64.rotrSH(W15h, W15l, 1) ^ u64.rotrSH(W15h, W15l, 8) ^ u64.shrSH(W15h, W15l, 7);\n            const s0l = u64.rotrSL(W15h, W15l, 1) ^ u64.rotrSL(W15h, W15l, 8) ^ u64.shrSL(W15h, W15l, 7);\n            // s1 := (w[i-2] rightrotate 19) xor (w[i-2] rightrotate 61) xor (w[i-2] rightshift 6)\n            const W2h = SHA512_W_H[i - 2] | 0;\n            const W2l = SHA512_W_L[i - 2] | 0;\n            const s1h = u64.rotrSH(W2h, W2l, 19) ^ u64.rotrBH(W2h, W2l, 61) ^ u64.shrSH(W2h, W2l, 6);\n            const s1l = u64.rotrSL(W2h, W2l, 19) ^ u64.rotrBL(W2h, W2l, 61) ^ u64.shrSL(W2h, W2l, 6);\n            // SHA256_W[i] = s0 + s1 + SHA256_W[i - 7] + SHA256_W[i - 16];\n            const SUMl = u64.add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);\n            const SUMh = u64.add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);\n            SHA512_W_H[i] = SUMh | 0;\n            SHA512_W_L[i] = SUMl | 0;\n        }\n        let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        // Compression function main loop, 80 rounds\n        for(let i = 0; i < 80; i++){\n            // S1 := (e rightrotate 14) xor (e rightrotate 18) xor (e rightrotate 41)\n            const sigma1h = u64.rotrSH(Eh, El, 14) ^ u64.rotrSH(Eh, El, 18) ^ u64.rotrBH(Eh, El, 41);\n            const sigma1l = u64.rotrSL(Eh, El, 14) ^ u64.rotrSL(Eh, El, 18) ^ u64.rotrBL(Eh, El, 41);\n            //const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const CHIh = Eh & Fh ^ ~Eh & Gh;\n            const CHIl = El & Fl ^ ~El & Gl;\n            // T1 = H + sigma1 + Chi(E, F, G) + SHA512_K[i] + SHA512_W[i]\n            // prettier-ignore\n            const T1ll = u64.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);\n            const T1h = u64.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);\n            const T1l = T1ll | 0;\n            // S0 := (a rightrotate 28) xor (a rightrotate 34) xor (a rightrotate 39)\n            const sigma0h = u64.rotrSH(Ah, Al, 28) ^ u64.rotrBH(Ah, Al, 34) ^ u64.rotrBH(Ah, Al, 39);\n            const sigma0l = u64.rotrSL(Ah, Al, 28) ^ u64.rotrBL(Ah, Al, 34) ^ u64.rotrBL(Ah, Al, 39);\n            const MAJh = Ah & Bh ^ Ah & Ch ^ Bh & Ch;\n            const MAJl = Al & Bl ^ Al & Cl ^ Bl & Cl;\n            Hh = Gh | 0;\n            Hl = Gl | 0;\n            Gh = Fh | 0;\n            Gl = Fl | 0;\n            Fh = Eh | 0;\n            Fl = El | 0;\n            ({ h: Eh, l: El } = u64.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));\n            Dh = Ch | 0;\n            Dl = Cl | 0;\n            Ch = Bh | 0;\n            Cl = Bl | 0;\n            Bh = Ah | 0;\n            Bl = Al | 0;\n            const All = u64.add3L(T1l, sigma0l, MAJl);\n            Ah = u64.add3H(All, T1h, sigma0h, MAJh);\n            Al = All | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        ({ h: Ah, l: Al } = u64.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));\n        ({ h: Bh, l: Bl } = u64.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));\n        ({ h: Ch, l: Cl } = u64.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));\n        ({ h: Dh, l: Dl } = u64.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));\n        ({ h: Eh, l: El } = u64.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));\n        ({ h: Fh, l: Fl } = u64.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));\n        ({ h: Gh, l: Gl } = u64.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));\n        ({ h: Hh, l: Hl } = u64.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));\n        this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);\n    }\n    roundClean() {\n        (0, utils_ts_1.clean)(SHA512_W_H, SHA512_W_L);\n    }\n    destroy() {\n        (0, utils_ts_1.clean)(this.buffer);\n        this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n    }\n}\nexports.SHA512 = SHA512;\nclass SHA384 extends SHA512 {\n    constructor(){\n        super(48);\n        this.Ah = _md_ts_1.SHA384_IV[0] | 0;\n        this.Al = _md_ts_1.SHA384_IV[1] | 0;\n        this.Bh = _md_ts_1.SHA384_IV[2] | 0;\n        this.Bl = _md_ts_1.SHA384_IV[3] | 0;\n        this.Ch = _md_ts_1.SHA384_IV[4] | 0;\n        this.Cl = _md_ts_1.SHA384_IV[5] | 0;\n        this.Dh = _md_ts_1.SHA384_IV[6] | 0;\n        this.Dl = _md_ts_1.SHA384_IV[7] | 0;\n        this.Eh = _md_ts_1.SHA384_IV[8] | 0;\n        this.El = _md_ts_1.SHA384_IV[9] | 0;\n        this.Fh = _md_ts_1.SHA384_IV[10] | 0;\n        this.Fl = _md_ts_1.SHA384_IV[11] | 0;\n        this.Gh = _md_ts_1.SHA384_IV[12] | 0;\n        this.Gl = _md_ts_1.SHA384_IV[13] | 0;\n        this.Hh = _md_ts_1.SHA384_IV[14] | 0;\n        this.Hl = _md_ts_1.SHA384_IV[15] | 0;\n    }\n}\nexports.SHA384 = SHA384;\n/**\n * Truncated SHA512/256 and SHA512/224.\n * SHA512_IV is XORed with 0xa5a5a5a5a5a5a5a5, then used as \"intermediary\" IV of SHA512/t.\n * Then t hashes string to produce result IV.\n * See `test/misc/sha2-gen-iv.js`.\n */ /** SHA512/224 IV */ const T224_IV = /* @__PURE__ */ Uint32Array.from([\n    0x8c3d37c8,\n    0x19544da2,\n    0x73e19966,\n    0x89dcd4d6,\n    0x1dfab7ae,\n    0x32ff9c82,\n    0x679dd514,\n    0x582f9fcf,\n    0x0f6d2b69,\n    0x7bd44da8,\n    0x77e36f73,\n    0x04c48942,\n    0x3f9d85a8,\n    0x6a1d36c8,\n    0x1112e6ad,\n    0x91d692a1\n]);\n/** SHA512/256 IV */ const T256_IV = /* @__PURE__ */ Uint32Array.from([\n    0x22312194,\n    0xfc2bf72c,\n    0x9f555fa3,\n    0xc84c64c2,\n    0x2393b86b,\n    0x6f53b151,\n    0x96387719,\n    0x5940eabd,\n    0x96283ee2,\n    0xa88effe3,\n    0xbe5e1e25,\n    0x53863992,\n    0x2b0199fc,\n    0x2c85b8aa,\n    0x0eb72ddc,\n    0x81c52ca2\n]);\nclass SHA512_224 extends SHA512 {\n    constructor(){\n        super(28);\n        this.Ah = T224_IV[0] | 0;\n        this.Al = T224_IV[1] | 0;\n        this.Bh = T224_IV[2] | 0;\n        this.Bl = T224_IV[3] | 0;\n        this.Ch = T224_IV[4] | 0;\n        this.Cl = T224_IV[5] | 0;\n        this.Dh = T224_IV[6] | 0;\n        this.Dl = T224_IV[7] | 0;\n        this.Eh = T224_IV[8] | 0;\n        this.El = T224_IV[9] | 0;\n        this.Fh = T224_IV[10] | 0;\n        this.Fl = T224_IV[11] | 0;\n        this.Gh = T224_IV[12] | 0;\n        this.Gl = T224_IV[13] | 0;\n        this.Hh = T224_IV[14] | 0;\n        this.Hl = T224_IV[15] | 0;\n    }\n}\nexports.SHA512_224 = SHA512_224;\nclass SHA512_256 extends SHA512 {\n    constructor(){\n        super(32);\n        this.Ah = T256_IV[0] | 0;\n        this.Al = T256_IV[1] | 0;\n        this.Bh = T256_IV[2] | 0;\n        this.Bl = T256_IV[3] | 0;\n        this.Ch = T256_IV[4] | 0;\n        this.Cl = T256_IV[5] | 0;\n        this.Dh = T256_IV[6] | 0;\n        this.Dl = T256_IV[7] | 0;\n        this.Eh = T256_IV[8] | 0;\n        this.El = T256_IV[9] | 0;\n        this.Fh = T256_IV[10] | 0;\n        this.Fl = T256_IV[11] | 0;\n        this.Gh = T256_IV[12] | 0;\n        this.Gl = T256_IV[13] | 0;\n        this.Hh = T256_IV[14] | 0;\n        this.Hl = T256_IV[15] | 0;\n    }\n}\nexports.SHA512_256 = SHA512_256;\n/**\n * SHA2-256 hash function from RFC 4634.\n *\n * It is the fastest JS hash, even faster than Blake3.\n * To break sha256 using birthday attack, attackers need to try 2^128 hashes.\n * BTC network is doing 2^70 hashes/sec (2^95 hashes/year) as per 2025.\n */ exports.sha256 = (0, utils_ts_1.createHasher)(()=>new SHA256());\n/** SHA2-224 hash function from RFC 4634 */ exports.sha224 = (0, utils_ts_1.createHasher)(()=>new SHA224());\n/** SHA2-512 hash function from RFC 4634. */ exports.sha512 = (0, utils_ts_1.createHasher)(()=>new SHA512());\n/** SHA2-384 hash function from RFC 4634. */ exports.sha384 = (0, utils_ts_1.createHasher)(()=>new SHA384());\n/**\n * SHA2-512/256 \"truncated\" hash function, with improved resistance to length extension attacks.\n * See the paper on [truncated SHA512](https://eprint.iacr.org/2010/548.pdf).\n */ exports.sha512_256 = (0, utils_ts_1.createHasher)(()=>new SHA512_256());\n/**\n * SHA2-512/224 \"truncated\" hash function, with improved resistance to length extension attacks.\n * See the paper on [truncated SHA512](https://eprint.iacr.org/2010/548.pdf).\n */ exports.sha512_224 = (0, utils_ts_1.createHasher)(()=>new SHA512_224()); //# sourceMappingURL=sha2.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ox/node_modules/@noble/hashes/sha2.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ox/node_modules/@noble/hashes/sha256.js":
/*!**************************************************************!*\
  !*** ./node_modules/ox/node_modules/@noble/hashes/sha256.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.sha224 = exports.SHA224 = exports.sha256 = exports.SHA256 = void 0;\n/**\n * SHA2-256 a.k.a. sha256. In JS, it is the fastest hash, even faster than Blake3.\n *\n * To break sha256 using birthday attack, attackers need to try 2^128 hashes.\n * BTC network is doing 2^70 hashes/sec (2^95 hashes/year) as per 2025.\n *\n * Check out [FIPS 180-4](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf).\n * @module\n * @deprecated\n */ const sha2_ts_1 = __webpack_require__(/*! ./sha2.js */ \"(ssr)/./node_modules/ox/node_modules/@noble/hashes/sha2.js\");\n/** @deprecated Use import from `noble/hashes/sha2` module */ exports.SHA256 = sha2_ts_1.SHA256;\n/** @deprecated Use import from `noble/hashes/sha2` module */ exports.sha256 = sha2_ts_1.sha256;\n/** @deprecated Use import from `noble/hashes/sha2` module */ exports.SHA224 = sha2_ts_1.SHA224;\n/** @deprecated Use import from `noble/hashes/sha2` module */ exports.sha224 = sha2_ts_1.sha224; //# sourceMappingURL=sha256.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb3gvbm9kZV9tb2R1bGVzL0Bub2JsZS9oYXNoZXMvc2hhMjU2LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxjQUFjLEdBQUdBLGNBQWMsR0FBR0EsY0FBYyxHQUFHQSxjQUFjLEdBQUcsS0FBSztBQUN6RTs7Ozs7Ozs7O0NBU0MsR0FDRCxNQUFNTSxZQUFZQyxtQkFBT0EsQ0FBQyw2RUFBVztBQUNyQywyREFBMkQsR0FDM0RQLGNBQWMsR0FBR00sVUFBVUQsTUFBTTtBQUNqQywyREFBMkQsR0FDM0RMLGNBQWMsR0FBR00sVUFBVUYsTUFBTTtBQUNqQywyREFBMkQsR0FDM0RKLGNBQWMsR0FBR00sVUFBVUgsTUFBTTtBQUNqQywyREFBMkQsR0FDM0RILGNBQWMsR0FBR00sVUFBVUosTUFBTSxFQUNqQyxrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93c3Rvbi11aS8uL25vZGVfbW9kdWxlcy9veC9ub2RlX21vZHVsZXMvQG5vYmxlL2hhc2hlcy9zaGEyNTYuanM/NDNmOCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuc2hhMjI0ID0gZXhwb3J0cy5TSEEyMjQgPSBleHBvcnRzLnNoYTI1NiA9IGV4cG9ydHMuU0hBMjU2ID0gdm9pZCAwO1xuLyoqXG4gKiBTSEEyLTI1NiBhLmsuYS4gc2hhMjU2LiBJbiBKUywgaXQgaXMgdGhlIGZhc3Rlc3QgaGFzaCwgZXZlbiBmYXN0ZXIgdGhhbiBCbGFrZTMuXG4gKlxuICogVG8gYnJlYWsgc2hhMjU2IHVzaW5nIGJpcnRoZGF5IGF0dGFjaywgYXR0YWNrZXJzIG5lZWQgdG8gdHJ5IDJeMTI4IGhhc2hlcy5cbiAqIEJUQyBuZXR3b3JrIGlzIGRvaW5nIDJeNzAgaGFzaGVzL3NlYyAoMl45NSBoYXNoZXMveWVhcikgYXMgcGVyIDIwMjUuXG4gKlxuICogQ2hlY2sgb3V0IFtGSVBTIDE4MC00XShodHRwczovL252bHB1YnMubmlzdC5nb3YvbmlzdHB1YnMvRklQUy9OSVNULkZJUFMuMTgwLTQucGRmKS5cbiAqIEBtb2R1bGVcbiAqIEBkZXByZWNhdGVkXG4gKi9cbmNvbnN0IHNoYTJfdHNfMSA9IHJlcXVpcmUoXCIuL3NoYTIuanNcIik7XG4vKiogQGRlcHJlY2F0ZWQgVXNlIGltcG9ydCBmcm9tIGBub2JsZS9oYXNoZXMvc2hhMmAgbW9kdWxlICovXG5leHBvcnRzLlNIQTI1NiA9IHNoYTJfdHNfMS5TSEEyNTY7XG4vKiogQGRlcHJlY2F0ZWQgVXNlIGltcG9ydCBmcm9tIGBub2JsZS9oYXNoZXMvc2hhMmAgbW9kdWxlICovXG5leHBvcnRzLnNoYTI1NiA9IHNoYTJfdHNfMS5zaGEyNTY7XG4vKiogQGRlcHJlY2F0ZWQgVXNlIGltcG9ydCBmcm9tIGBub2JsZS9oYXNoZXMvc2hhMmAgbW9kdWxlICovXG5leHBvcnRzLlNIQTIyNCA9IHNoYTJfdHNfMS5TSEEyMjQ7XG4vKiogQGRlcHJlY2F0ZWQgVXNlIGltcG9ydCBmcm9tIGBub2JsZS9oYXNoZXMvc2hhMmAgbW9kdWxlICovXG5leHBvcnRzLnNoYTIyNCA9IHNoYTJfdHNfMS5zaGEyMjQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zaGEyNTYuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwic2hhMjI0IiwiU0hBMjI0Iiwic2hhMjU2IiwiU0hBMjU2Iiwic2hhMl90c18xIiwicmVxdWlyZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ox/node_modules/@noble/hashes/sha256.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ox/node_modules/@noble/hashes/sha3.js":
/*!************************************************************!*\
  !*** ./node_modules/ox/node_modules/@noble/hashes/sha3.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.shake256 = exports.shake128 = exports.keccak_512 = exports.keccak_384 = exports.keccak_256 = exports.keccak_224 = exports.sha3_512 = exports.sha3_384 = exports.sha3_256 = exports.sha3_224 = exports.Keccak = void 0;\nexports.keccakP = keccakP;\n/**\n * SHA3 (keccak) hash function, based on a new \"Sponge function\" design.\n * Different from older hashes, the internal state is bigger than output size.\n *\n * Check out [FIPS-202](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.202.pdf),\n * [Website](https://keccak.team/keccak.html),\n * [the differences between SHA-3 and Keccak](https://crypto.stackexchange.com/questions/15727/what-are-the-key-differences-between-the-draft-sha-3-standard-and-the-keccak-sub).\n *\n * Check out `sha3-addons` module for cSHAKE, k12, and others.\n * @module\n */ const _u64_ts_1 = __webpack_require__(/*! ./_u64.js */ \"(ssr)/./node_modules/ox/node_modules/@noble/hashes/_u64.js\");\n// prettier-ignore\nconst utils_ts_1 = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/ox/node_modules/@noble/hashes/utils.js\");\n// No __PURE__ annotations in sha3 header:\n// EVERYTHING is in fact used on every export.\n// Various per round constants calculations\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst _7n = BigInt(7);\nconst _256n = BigInt(256);\nconst _0x71n = BigInt(0x71);\nconst SHA3_PI = [];\nconst SHA3_ROTL = [];\nconst _SHA3_IOTA = [];\nfor(let round = 0, R = _1n, x = 1, y = 0; round < 24; round++){\n    // Pi\n    [x, y] = [\n        y,\n        (2 * x + 3 * y) % 5\n    ];\n    SHA3_PI.push(2 * (5 * y + x));\n    // Rotational\n    SHA3_ROTL.push((round + 1) * (round + 2) / 2 % 64);\n    // Iota\n    let t = _0n;\n    for(let j = 0; j < 7; j++){\n        R = (R << _1n ^ (R >> _7n) * _0x71n) % _256n;\n        if (R & _2n) t ^= _1n << (_1n << /* @__PURE__ */ BigInt(j)) - _1n;\n    }\n    _SHA3_IOTA.push(t);\n}\nconst IOTAS = (0, _u64_ts_1.split)(_SHA3_IOTA, true);\nconst SHA3_IOTA_H = IOTAS[0];\nconst SHA3_IOTA_L = IOTAS[1];\n// Left rotation (without 0, 32, 64)\nconst rotlH = (h, l, s)=>s > 32 ? (0, _u64_ts_1.rotlBH)(h, l, s) : (0, _u64_ts_1.rotlSH)(h, l, s);\nconst rotlL = (h, l, s)=>s > 32 ? (0, _u64_ts_1.rotlBL)(h, l, s) : (0, _u64_ts_1.rotlSL)(h, l, s);\n/** `keccakf1600` internal function, additionally allows to adjust round count. */ function keccakP(s, rounds = 24) {\n    const B = new Uint32Array(5 * 2);\n    // NOTE: all indices are x2 since we store state as u32 instead of u64 (bigints to slow in js)\n    for(let round = 24 - rounds; round < 24; round++){\n        // Theta Œ∏\n        for(let x = 0; x < 10; x++)B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];\n        for(let x = 0; x < 10; x += 2){\n            const idx1 = (x + 8) % 10;\n            const idx0 = (x + 2) % 10;\n            const B0 = B[idx0];\n            const B1 = B[idx0 + 1];\n            const Th = rotlH(B0, B1, 1) ^ B[idx1];\n            const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];\n            for(let y = 0; y < 50; y += 10){\n                s[x + y] ^= Th;\n                s[x + y + 1] ^= Tl;\n            }\n        }\n        // Rho (œÅ) and Pi (œÄ)\n        let curH = s[2];\n        let curL = s[3];\n        for(let t = 0; t < 24; t++){\n            const shift = SHA3_ROTL[t];\n            const Th = rotlH(curH, curL, shift);\n            const Tl = rotlL(curH, curL, shift);\n            const PI = SHA3_PI[t];\n            curH = s[PI];\n            curL = s[PI + 1];\n            s[PI] = Th;\n            s[PI + 1] = Tl;\n        }\n        // Chi (œá)\n        for(let y = 0; y < 50; y += 10){\n            for(let x = 0; x < 10; x++)B[x] = s[y + x];\n            for(let x = 0; x < 10; x++)s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];\n        }\n        // Iota (Œπ)\n        s[0] ^= SHA3_IOTA_H[round];\n        s[1] ^= SHA3_IOTA_L[round];\n    }\n    (0, utils_ts_1.clean)(B);\n}\n/** Keccak sponge function. */ class Keccak extends utils_ts_1.Hash {\n    // NOTE: we accept arguments in bytes instead of bits here.\n    constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24){\n        super();\n        this.pos = 0;\n        this.posOut = 0;\n        this.finished = false;\n        this.destroyed = false;\n        this.enableXOF = false;\n        this.blockLen = blockLen;\n        this.suffix = suffix;\n        this.outputLen = outputLen;\n        this.enableXOF = enableXOF;\n        this.rounds = rounds;\n        // Can be passed from user as dkLen\n        (0, utils_ts_1.anumber)(outputLen);\n        // 1600 = 5x5 matrix of 64bit.  1600 bits === 200 bytes\n        // 0 < blockLen < 200\n        if (!(0 < blockLen && blockLen < 200)) throw new Error(\"only keccak-f1600 function is supported\");\n        this.state = new Uint8Array(200);\n        this.state32 = (0, utils_ts_1.u32)(this.state);\n    }\n    clone() {\n        return this._cloneInto();\n    }\n    keccak() {\n        (0, utils_ts_1.swap32IfBE)(this.state32);\n        keccakP(this.state32, this.rounds);\n        (0, utils_ts_1.swap32IfBE)(this.state32);\n        this.posOut = 0;\n        this.pos = 0;\n    }\n    update(data) {\n        (0, utils_ts_1.aexists)(this);\n        data = (0, utils_ts_1.toBytes)(data);\n        (0, utils_ts_1.abytes)(data);\n        const { blockLen, state } = this;\n        const len = data.length;\n        for(let pos = 0; pos < len;){\n            const take = Math.min(blockLen - this.pos, len - pos);\n            for(let i = 0; i < take; i++)state[this.pos++] ^= data[pos++];\n            if (this.pos === blockLen) this.keccak();\n        }\n        return this;\n    }\n    finish() {\n        if (this.finished) return;\n        this.finished = true;\n        const { state, suffix, pos, blockLen } = this;\n        // Do the padding\n        state[pos] ^= suffix;\n        if ((suffix & 0x80) !== 0 && pos === blockLen - 1) this.keccak();\n        state[blockLen - 1] ^= 0x80;\n        this.keccak();\n    }\n    writeInto(out) {\n        (0, utils_ts_1.aexists)(this, false);\n        (0, utils_ts_1.abytes)(out);\n        this.finish();\n        const bufferOut = this.state;\n        const { blockLen } = this;\n        for(let pos = 0, len = out.length; pos < len;){\n            if (this.posOut >= blockLen) this.keccak();\n            const take = Math.min(blockLen - this.posOut, len - pos);\n            out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);\n            this.posOut += take;\n            pos += take;\n        }\n        return out;\n    }\n    xofInto(out) {\n        // Sha3/Keccak usage with XOF is probably mistake, only SHAKE instances can do XOF\n        if (!this.enableXOF) throw new Error(\"XOF is not possible for this instance\");\n        return this.writeInto(out);\n    }\n    xof(bytes) {\n        (0, utils_ts_1.anumber)(bytes);\n        return this.xofInto(new Uint8Array(bytes));\n    }\n    digestInto(out) {\n        (0, utils_ts_1.aoutput)(out, this);\n        if (this.finished) throw new Error(\"digest() was already called\");\n        this.writeInto(out);\n        this.destroy();\n        return out;\n    }\n    digest() {\n        return this.digestInto(new Uint8Array(this.outputLen));\n    }\n    destroy() {\n        this.destroyed = true;\n        (0, utils_ts_1.clean)(this.state);\n    }\n    _cloneInto(to) {\n        const { blockLen, suffix, outputLen, rounds, enableXOF } = this;\n        to || (to = new Keccak(blockLen, suffix, outputLen, enableXOF, rounds));\n        to.state32.set(this.state32);\n        to.pos = this.pos;\n        to.posOut = this.posOut;\n        to.finished = this.finished;\n        to.rounds = rounds;\n        // Suffix can change in cSHAKE\n        to.suffix = suffix;\n        to.outputLen = outputLen;\n        to.enableXOF = enableXOF;\n        to.destroyed = this.destroyed;\n        return to;\n    }\n}\nexports.Keccak = Keccak;\nconst gen = (suffix, blockLen, outputLen)=>(0, utils_ts_1.createHasher)(()=>new Keccak(blockLen, suffix, outputLen));\n/** SHA3-224 hash function. */ exports.sha3_224 = (()=>gen(0x06, 144, 224 / 8))();\n/** SHA3-256 hash function. Different from keccak-256. */ exports.sha3_256 = (()=>gen(0x06, 136, 256 / 8))();\n/** SHA3-384 hash function. */ exports.sha3_384 = (()=>gen(0x06, 104, 384 / 8))();\n/** SHA3-512 hash function. */ exports.sha3_512 = (()=>gen(0x06, 72, 512 / 8))();\n/** keccak-224 hash function. */ exports.keccak_224 = (()=>gen(0x01, 144, 224 / 8))();\n/** keccak-256 hash function. Different from SHA3-256. */ exports.keccak_256 = (()=>gen(0x01, 136, 256 / 8))();\n/** keccak-384 hash function. */ exports.keccak_384 = (()=>gen(0x01, 104, 384 / 8))();\n/** keccak-512 hash function. */ exports.keccak_512 = (()=>gen(0x01, 72, 512 / 8))();\nconst genShake = (suffix, blockLen, outputLen)=>(0, utils_ts_1.createXOFer)((opts = {})=>new Keccak(blockLen, suffix, opts.dkLen === undefined ? outputLen : opts.dkLen, true));\n/** SHAKE128 XOF with 128-bit security. */ exports.shake128 = (()=>genShake(0x1f, 168, 128 / 8))();\n/** SHAKE256 XOF with 256-bit security. */ exports.shake256 = (()=>genShake(0x1f, 136, 256 / 8))(); //# sourceMappingURL=sha3.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ox/node_modules/@noble/hashes/sha3.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ox/node_modules/@noble/hashes/utils.js":
/*!*************************************************************!*\
  !*** ./node_modules/ox/node_modules/@noble/hashes/utils.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * Utilities for hex, bytes, CSPRNG.\n * @module\n */ /*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.wrapXOFConstructorWithOpts = exports.wrapConstructorWithOpts = exports.wrapConstructor = exports.Hash = exports.nextTick = exports.swap32IfBE = exports.byteSwapIfBE = exports.swap8IfBE = exports.isLE = void 0;\nexports.isBytes = isBytes;\nexports.anumber = anumber;\nexports.abytes = abytes;\nexports.ahash = ahash;\nexports.aexists = aexists;\nexports.aoutput = aoutput;\nexports.u8 = u8;\nexports.u32 = u32;\nexports.clean = clean;\nexports.createView = createView;\nexports.rotr = rotr;\nexports.rotl = rotl;\nexports.byteSwap = byteSwap;\nexports.byteSwap32 = byteSwap32;\nexports.bytesToHex = bytesToHex;\nexports.hexToBytes = hexToBytes;\nexports.asyncLoop = asyncLoop;\nexports.utf8ToBytes = utf8ToBytes;\nexports.bytesToUtf8 = bytesToUtf8;\nexports.toBytes = toBytes;\nexports.kdfInputToBytes = kdfInputToBytes;\nexports.concatBytes = concatBytes;\nexports.checkOpts = checkOpts;\nexports.createHasher = createHasher;\nexports.createOptHasher = createOptHasher;\nexports.createXOFer = createXOFer;\nexports.randomBytes = randomBytes;\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// node.js versions earlier than v19 don't declare it in global scope.\n// For node.js, package.json#exports field mapping rewrites import\n// from `crypto` to `cryptoNode`, which imports native module.\n// Makes the utils un-importable in browsers without a bundler.\n// Once node.js 18 is deprecated (2025-04-30), we can just drop the import.\nconst crypto_1 = __webpack_require__(/*! @noble/hashes/crypto */ \"(ssr)/./node_modules/ox/node_modules/@noble/hashes/cryptoNode.js\");\n/** Checks if something is Uint8Array. Be careful: nodejs Buffer will return true. */ function isBytes(a) {\n    return a instanceof Uint8Array || ArrayBuffer.isView(a) && a.constructor.name === \"Uint8Array\";\n}\n/** Asserts something is positive integer. */ function anumber(n) {\n    if (!Number.isSafeInteger(n) || n < 0) throw new Error(\"positive integer expected, got \" + n);\n}\n/** Asserts something is Uint8Array. */ function abytes(b, ...lengths) {\n    if (!isBytes(b)) throw new Error(\"Uint8Array expected\");\n    if (lengths.length > 0 && !lengths.includes(b.length)) throw new Error(\"Uint8Array expected of length \" + lengths + \", got length=\" + b.length);\n}\n/** Asserts something is hash */ function ahash(h) {\n    if (typeof h !== \"function\" || typeof h.create !== \"function\") throw new Error(\"Hash should be wrapped by utils.createHasher\");\n    anumber(h.outputLen);\n    anumber(h.blockLen);\n}\n/** Asserts a hash instance has not been destroyed / finished */ function aexists(instance, checkFinished = true) {\n    if (instance.destroyed) throw new Error(\"Hash instance has been destroyed\");\n    if (checkFinished && instance.finished) throw new Error(\"Hash#digest() has already been called\");\n}\n/** Asserts output is properly-sized byte array */ function aoutput(out, instance) {\n    abytes(out);\n    const min = instance.outputLen;\n    if (out.length < min) {\n        throw new Error(\"digestInto() expects output buffer of length at least \" + min);\n    }\n}\n/** Cast u8 / u16 / u32 to u8. */ function u8(arr) {\n    return new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\n}\n/** Cast u8 / u16 / u32 to u32. */ function u32(arr) {\n    return new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n}\n/** Zeroize a byte array. Warning: JS provides no guarantees. */ function clean(...arrays) {\n    for(let i = 0; i < arrays.length; i++){\n        arrays[i].fill(0);\n    }\n}\n/** Create DataView of an array for easy byte-level manipulation. */ function createView(arr) {\n    return new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n}\n/** The rotate right (circular right shift) operation for uint32 */ function rotr(word, shift) {\n    return word << 32 - shift | word >>> shift;\n}\n/** The rotate left (circular left shift) operation for uint32 */ function rotl(word, shift) {\n    return word << shift | word >>> 32 - shift >>> 0;\n}\n/** Is current platform little-endian? Most are. Big-Endian platform: IBM */ exports.isLE = (()=>new Uint8Array(new Uint32Array([\n        0x11223344\n    ]).buffer)[0] === 0x44)();\n/** The byte swap operation for uint32 */ function byteSwap(word) {\n    return word << 24 & 0xff000000 | word << 8 & 0xff0000 | word >>> 8 & 0xff00 | word >>> 24 & 0xff;\n}\n/** Conditionally byte swap if on a big-endian platform */ exports.swap8IfBE = exports.isLE ? (n)=>n : (n)=>byteSwap(n);\n/** @deprecated */ exports.byteSwapIfBE = exports.swap8IfBE;\n/** In place byte swap for Uint32Array */ function byteSwap32(arr) {\n    for(let i = 0; i < arr.length; i++){\n        arr[i] = byteSwap(arr[i]);\n    }\n    return arr;\n}\nexports.swap32IfBE = exports.isLE ? (u)=>u : byteSwap32;\n// Built-in hex conversion https://caniuse.com/mdn-javascript_builtins_uint8array_fromhex\nconst hasHexBuiltin = /* @__PURE__ */ (()=>// @ts-ignore\n    typeof Uint8Array.from([]).toHex === \"function\" && typeof Uint8Array.fromHex === \"function\")();\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({\n    length: 256\n}, (_, i)=>i.toString(16).padStart(2, \"0\"));\n/**\n * Convert byte array to hex string. Uses built-in function, when available.\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */ function bytesToHex(bytes) {\n    abytes(bytes);\n    // @ts-ignore\n    if (hasHexBuiltin) return bytes.toHex();\n    // pre-caching improves the speed 6x\n    let hex = \"\";\n    for(let i = 0; i < bytes.length; i++){\n        hex += hexes[bytes[i]];\n    }\n    return hex;\n}\n// We use optimized technique to convert hex string to byte array\nconst asciis = {\n    _0: 48,\n    _9: 57,\n    A: 65,\n    F: 70,\n    a: 97,\n    f: 102\n};\nfunction asciiToBase16(ch) {\n    if (ch >= asciis._0 && ch <= asciis._9) return ch - asciis._0; // '2' => 50-48\n    if (ch >= asciis.A && ch <= asciis.F) return ch - (asciis.A - 10); // 'B' => 66-(65-10)\n    if (ch >= asciis.a && ch <= asciis.f) return ch - (asciis.a - 10); // 'b' => 98-(97-10)\n    return;\n}\n/**\n * Convert hex string to byte array. Uses built-in function, when available.\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */ function hexToBytes(hex) {\n    if (typeof hex !== \"string\") throw new Error(\"hex string expected, got \" + typeof hex);\n    // @ts-ignore\n    if (hasHexBuiltin) return Uint8Array.fromHex(hex);\n    const hl = hex.length;\n    const al = hl / 2;\n    if (hl % 2) throw new Error(\"hex string expected, got unpadded hex of length \" + hl);\n    const array = new Uint8Array(al);\n    for(let ai = 0, hi = 0; ai < al; ai++, hi += 2){\n        const n1 = asciiToBase16(hex.charCodeAt(hi));\n        const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n        if (n1 === undefined || n2 === undefined) {\n            const char = hex[hi] + hex[hi + 1];\n            throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n        }\n        array[ai] = n1 * 16 + n2; // multiply first octet, e.g. 'a3' => 10*16+3 => 160 + 3 => 163\n    }\n    return array;\n}\n/**\n * There is no setImmediate in browser and setTimeout is slow.\n * Call of async fn will return Promise, which will be fullfiled only on\n * next scheduler queue processing step and this is exactly what we need.\n */ const nextTick = async ()=>{};\nexports.nextTick = nextTick;\n/** Returns control to thread each 'tick' ms to avoid blocking. */ async function asyncLoop(iters, tick, cb) {\n    let ts = Date.now();\n    for(let i = 0; i < iters; i++){\n        cb(i);\n        // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n        const diff = Date.now() - ts;\n        if (diff >= 0 && diff < tick) continue;\n        await (0, exports.nextTick)();\n        ts += diff;\n    }\n}\n/**\n * Converts string to bytes using UTF8 encoding.\n * @example utf8ToBytes('abc') // Uint8Array.from([97, 98, 99])\n */ function utf8ToBytes(str) {\n    if (typeof str !== \"string\") throw new Error(\"string expected\");\n    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n/**\n * Converts bytes to string using UTF8 encoding.\n * @example bytesToUtf8(Uint8Array.from([97, 98, 99])) // 'abc'\n */ function bytesToUtf8(bytes) {\n    return new TextDecoder().decode(bytes);\n}\n/**\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\n * Warning: when Uint8Array is passed, it would NOT get copied.\n * Keep in mind for future mutable operations.\n */ function toBytes(data) {\n    if (typeof data === \"string\") data = utf8ToBytes(data);\n    abytes(data);\n    return data;\n}\n/**\n * Helper for KDFs: consumes uint8array or string.\n * When string is passed, does utf8 decoding, using TextDecoder.\n */ function kdfInputToBytes(data) {\n    if (typeof data === \"string\") data = utf8ToBytes(data);\n    abytes(data);\n    return data;\n}\n/** Copies several Uint8Arrays into one. */ function concatBytes(...arrays) {\n    let sum = 0;\n    for(let i = 0; i < arrays.length; i++){\n        const a = arrays[i];\n        abytes(a);\n        sum += a.length;\n    }\n    const res = new Uint8Array(sum);\n    for(let i = 0, pad = 0; i < arrays.length; i++){\n        const a = arrays[i];\n        res.set(a, pad);\n        pad += a.length;\n    }\n    return res;\n}\nfunction checkOpts(defaults, opts) {\n    if (opts !== undefined && ({}).toString.call(opts) !== \"[object Object]\") throw new Error(\"options should be object or undefined\");\n    const merged = Object.assign(defaults, opts);\n    return merged;\n}\n/** For runtime check if class implements interface */ class Hash {\n}\nexports.Hash = Hash;\n/** Wraps hash function, creating an interface on top of it */ function createHasher(hashCons) {\n    const hashC = (msg)=>hashCons().update(toBytes(msg)).digest();\n    const tmp = hashCons();\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = ()=>hashCons();\n    return hashC;\n}\nfunction createOptHasher(hashCons) {\n    const hashC = (msg, opts)=>hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts)=>hashCons(opts);\n    return hashC;\n}\nfunction createXOFer(hashCons) {\n    const hashC = (msg, opts)=>hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts)=>hashCons(opts);\n    return hashC;\n}\nexports.wrapConstructor = createHasher;\nexports.wrapConstructorWithOpts = createOptHasher;\nexports.wrapXOFConstructorWithOpts = createXOFer;\n/** Cryptographically secure PRNG. Uses internal OS-level `crypto.getRandomValues`. */ function randomBytes(bytesLength = 32) {\n    if (crypto_1.crypto && typeof crypto_1.crypto.getRandomValues === \"function\") {\n        return crypto_1.crypto.getRandomValues(new Uint8Array(bytesLength));\n    }\n    // Legacy Node.js compatibility\n    if (crypto_1.crypto && typeof crypto_1.crypto.randomBytes === \"function\") {\n        return Uint8Array.from(crypto_1.crypto.randomBytes(bytesLength));\n    }\n    throw new Error(\"crypto.getRandomValues must be defined\");\n} //# sourceMappingURL=utils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ox/node_modules/@noble/hashes/utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ox/_cjs/core/AbiConstructor.js":
/*!*****************************************************!*\
  !*** ./node_modules/ox/_cjs/core/AbiConstructor.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.decode = decode;\nexports.encode = encode;\nexports.format = format;\nexports.from = from;\nexports.fromAbi = fromAbi;\nconst abitype = __webpack_require__(/*! abitype */ \"(ssr)/./node_modules/ox/node_modules/abitype/dist/cjs/exports/index.js\");\nconst AbiItem = __webpack_require__(/*! ./AbiItem.js */ \"(ssr)/./node_modules/ox/_cjs/core/AbiItem.js\");\nconst AbiParameters = __webpack_require__(/*! ./AbiParameters.js */ \"(ssr)/./node_modules/ox/_cjs/core/AbiParameters.js\");\nconst Hex = __webpack_require__(/*! ./Hex.js */ \"(ssr)/./node_modules/ox/_cjs/core/Hex.js\");\nfunction decode(...parameters) {\n    const [abiConstructor, options] = (()=>{\n        if (Array.isArray(parameters[0])) {\n            const [abi, options] = parameters;\n            return [\n                fromAbi(abi),\n                options\n            ];\n        }\n        return parameters;\n    })();\n    const { bytecode } = options;\n    if (abiConstructor.inputs.length === 0) return undefined;\n    const data = options.data.replace(bytecode, \"0x\");\n    return AbiParameters.decode(abiConstructor.inputs, data);\n}\nfunction encode(...parameters) {\n    const [abiConstructor, options] = (()=>{\n        if (Array.isArray(parameters[0])) {\n            const [abi, options] = parameters;\n            return [\n                fromAbi(abi),\n                options\n            ];\n        }\n        return parameters;\n    })();\n    const { bytecode, args } = options;\n    return Hex.concat(bytecode, abiConstructor.inputs?.length && args?.length ? AbiParameters.encode(abiConstructor.inputs, args) : \"0x\");\n}\nfunction format(abiConstructor) {\n    return abitype.formatAbiItem(abiConstructor);\n}\nfunction from(abiConstructor) {\n    return AbiItem.from(abiConstructor);\n}\nfunction fromAbi(abi) {\n    const item = abi.find((item)=>item.type === \"constructor\");\n    if (!item) throw new AbiItem.NotFoundError({\n        name: \"constructor\"\n    });\n    return item;\n} //# sourceMappingURL=AbiConstructor.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb3gvX2Nqcy9jb3JlL0FiaUNvbnN0cnVjdG9yLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxjQUFjLEdBQUdFO0FBQ2pCRixjQUFjLEdBQUdHO0FBQ2pCSCxjQUFjLEdBQUdJO0FBQ2pCSixZQUFZLEdBQUdLO0FBQ2ZMLGVBQWUsR0FBR007QUFDbEIsTUFBTUMsVUFBVUMsbUJBQU9BLENBQUMsdUZBQVM7QUFDakMsTUFBTUMsVUFBVUQsbUJBQU9BLENBQUMsa0VBQWM7QUFDdEMsTUFBTUUsZ0JBQWdCRixtQkFBT0EsQ0FBQyw4RUFBb0I7QUFDbEQsTUFBTUcsTUFBTUgsbUJBQU9BLENBQUMsMERBQVU7QUFDOUIsU0FBU04sT0FBTyxHQUFHVSxVQUFVO0lBQ3pCLE1BQU0sQ0FBQ0MsZ0JBQWdCQyxRQUFRLEdBQUcsQ0FBQztRQUMvQixJQUFJQyxNQUFNQyxPQUFPLENBQUNKLFVBQVUsQ0FBQyxFQUFFLEdBQUc7WUFDOUIsTUFBTSxDQUFDSyxLQUFLSCxRQUFRLEdBQUdGO1lBQ3ZCLE9BQU87Z0JBQUNOLFFBQVFXO2dCQUFNSDthQUFRO1FBQ2xDO1FBQ0EsT0FBT0Y7SUFDWDtJQUNBLE1BQU0sRUFBRU0sUUFBUSxFQUFFLEdBQUdKO0lBQ3JCLElBQUlELGVBQWVNLE1BQU0sQ0FBQ0MsTUFBTSxLQUFLLEdBQ2pDLE9BQU9DO0lBQ1gsTUFBTUMsT0FBT1IsUUFBUVEsSUFBSSxDQUFDQyxPQUFPLENBQUNMLFVBQVU7SUFDNUMsT0FBT1IsY0FBY1IsTUFBTSxDQUFDVyxlQUFlTSxNQUFNLEVBQUVHO0FBQ3ZEO0FBQ0EsU0FBU25CLE9BQU8sR0FBR1MsVUFBVTtJQUN6QixNQUFNLENBQUNDLGdCQUFnQkMsUUFBUSxHQUFHLENBQUM7UUFDL0IsSUFBSUMsTUFBTUMsT0FBTyxDQUFDSixVQUFVLENBQUMsRUFBRSxHQUFHO1lBQzlCLE1BQU0sQ0FBQ0ssS0FBS0gsUUFBUSxHQUFHRjtZQUN2QixPQUFPO2dCQUFDTixRQUFRVztnQkFBTUg7YUFBUTtRQUNsQztRQUNBLE9BQU9GO0lBQ1g7SUFDQSxNQUFNLEVBQUVNLFFBQVEsRUFBRU0sSUFBSSxFQUFFLEdBQUdWO0lBQzNCLE9BQU9ILElBQUljLE1BQU0sQ0FBQ1AsVUFBVUwsZUFBZU0sTUFBTSxFQUFFQyxVQUFVSSxNQUFNSixTQUM3RFYsY0FBY1AsTUFBTSxDQUFDVSxlQUFlTSxNQUFNLEVBQUVLLFFBQzVDO0FBQ1Y7QUFDQSxTQUFTcEIsT0FBT1MsY0FBYztJQUMxQixPQUFPTixRQUFRbUIsYUFBYSxDQUFDYjtBQUNqQztBQUNBLFNBQVNSLEtBQUtRLGNBQWM7SUFDeEIsT0FBT0osUUFBUUosSUFBSSxDQUFDUTtBQUN4QjtBQUNBLFNBQVNQLFFBQVFXLEdBQUc7SUFDaEIsTUFBTVUsT0FBT1YsSUFBSVcsSUFBSSxDQUFDLENBQUNELE9BQVNBLEtBQUtFLElBQUksS0FBSztJQUM5QyxJQUFJLENBQUNGLE1BQ0QsTUFBTSxJQUFJbEIsUUFBUXFCLGFBQWEsQ0FBQztRQUFFQyxNQUFNO0lBQWM7SUFDMUQsT0FBT0o7QUFDWCxFQUNBLDBDQUEwQyIsInNvdXJjZXMiOlsid2VicGFjazovL3dzdG9uLXVpLy4vbm9kZV9tb2R1bGVzL294L19janMvY29yZS9BYmlDb25zdHJ1Y3Rvci5qcz8xMzg3Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5kZWNvZGUgPSBkZWNvZGU7XG5leHBvcnRzLmVuY29kZSA9IGVuY29kZTtcbmV4cG9ydHMuZm9ybWF0ID0gZm9ybWF0O1xuZXhwb3J0cy5mcm9tID0gZnJvbTtcbmV4cG9ydHMuZnJvbUFiaSA9IGZyb21BYmk7XG5jb25zdCBhYml0eXBlID0gcmVxdWlyZShcImFiaXR5cGVcIik7XG5jb25zdCBBYmlJdGVtID0gcmVxdWlyZShcIi4vQWJpSXRlbS5qc1wiKTtcbmNvbnN0IEFiaVBhcmFtZXRlcnMgPSByZXF1aXJlKFwiLi9BYmlQYXJhbWV0ZXJzLmpzXCIpO1xuY29uc3QgSGV4ID0gcmVxdWlyZShcIi4vSGV4LmpzXCIpO1xuZnVuY3Rpb24gZGVjb2RlKC4uLnBhcmFtZXRlcnMpIHtcbiAgICBjb25zdCBbYWJpQ29uc3RydWN0b3IsIG9wdGlvbnNdID0gKCgpID0+IHtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkocGFyYW1ldGVyc1swXSkpIHtcbiAgICAgICAgICAgIGNvbnN0IFthYmksIG9wdGlvbnNdID0gcGFyYW1ldGVycztcbiAgICAgICAgICAgIHJldHVybiBbZnJvbUFiaShhYmkpLCBvcHRpb25zXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcGFyYW1ldGVycztcbiAgICB9KSgpO1xuICAgIGNvbnN0IHsgYnl0ZWNvZGUgfSA9IG9wdGlvbnM7XG4gICAgaWYgKGFiaUNvbnN0cnVjdG9yLmlucHV0cy5sZW5ndGggPT09IDApXG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgY29uc3QgZGF0YSA9IG9wdGlvbnMuZGF0YS5yZXBsYWNlKGJ5dGVjb2RlLCAnMHgnKTtcbiAgICByZXR1cm4gQWJpUGFyYW1ldGVycy5kZWNvZGUoYWJpQ29uc3RydWN0b3IuaW5wdXRzLCBkYXRhKTtcbn1cbmZ1bmN0aW9uIGVuY29kZSguLi5wYXJhbWV0ZXJzKSB7XG4gICAgY29uc3QgW2FiaUNvbnN0cnVjdG9yLCBvcHRpb25zXSA9ICgoKSA9PiB7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHBhcmFtZXRlcnNbMF0pKSB7XG4gICAgICAgICAgICBjb25zdCBbYWJpLCBvcHRpb25zXSA9IHBhcmFtZXRlcnM7XG4gICAgICAgICAgICByZXR1cm4gW2Zyb21BYmkoYWJpKSwgb3B0aW9uc107XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHBhcmFtZXRlcnM7XG4gICAgfSkoKTtcbiAgICBjb25zdCB7IGJ5dGVjb2RlLCBhcmdzIH0gPSBvcHRpb25zO1xuICAgIHJldHVybiBIZXguY29uY2F0KGJ5dGVjb2RlLCBhYmlDb25zdHJ1Y3Rvci5pbnB1dHM/Lmxlbmd0aCAmJiBhcmdzPy5sZW5ndGhcbiAgICAgICAgPyBBYmlQYXJhbWV0ZXJzLmVuY29kZShhYmlDb25zdHJ1Y3Rvci5pbnB1dHMsIGFyZ3MpXG4gICAgICAgIDogJzB4Jyk7XG59XG5mdW5jdGlvbiBmb3JtYXQoYWJpQ29uc3RydWN0b3IpIHtcbiAgICByZXR1cm4gYWJpdHlwZS5mb3JtYXRBYmlJdGVtKGFiaUNvbnN0cnVjdG9yKTtcbn1cbmZ1bmN0aW9uIGZyb20oYWJpQ29uc3RydWN0b3IpIHtcbiAgICByZXR1cm4gQWJpSXRlbS5mcm9tKGFiaUNvbnN0cnVjdG9yKTtcbn1cbmZ1bmN0aW9uIGZyb21BYmkoYWJpKSB7XG4gICAgY29uc3QgaXRlbSA9IGFiaS5maW5kKChpdGVtKSA9PiBpdGVtLnR5cGUgPT09ICdjb25zdHJ1Y3RvcicpO1xuICAgIGlmICghaXRlbSlcbiAgICAgICAgdGhyb3cgbmV3IEFiaUl0ZW0uTm90Rm91bmRFcnJvcih7IG5hbWU6ICdjb25zdHJ1Y3RvcicgfSk7XG4gICAgcmV0dXJuIGl0ZW07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1BYmlDb25zdHJ1Y3Rvci5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJkZWNvZGUiLCJlbmNvZGUiLCJmb3JtYXQiLCJmcm9tIiwiZnJvbUFiaSIsImFiaXR5cGUiLCJyZXF1aXJlIiwiQWJpSXRlbSIsIkFiaVBhcmFtZXRlcnMiLCJIZXgiLCJwYXJhbWV0ZXJzIiwiYWJpQ29uc3RydWN0b3IiLCJvcHRpb25zIiwiQXJyYXkiLCJpc0FycmF5IiwiYWJpIiwiYnl0ZWNvZGUiLCJpbnB1dHMiLCJsZW5ndGgiLCJ1bmRlZmluZWQiLCJkYXRhIiwicmVwbGFjZSIsImFyZ3MiLCJjb25jYXQiLCJmb3JtYXRBYmlJdGVtIiwiaXRlbSIsImZpbmQiLCJ0eXBlIiwiTm90Rm91bmRFcnJvciIsIm5hbWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ox/_cjs/core/AbiConstructor.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ox/_cjs/core/AbiFunction.js":
/*!**************************************************!*\
  !*** ./node_modules/ox/_cjs/core/AbiFunction.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.decodeData = decodeData;\nexports.decodeResult = decodeResult;\nexports.encodeData = encodeData;\nexports.encodeResult = encodeResult;\nexports.format = format;\nexports.from = from;\nexports.fromAbi = fromAbi;\nexports.getSelector = getSelector;\nconst abitype = __webpack_require__(/*! abitype */ \"(ssr)/./node_modules/ox/node_modules/abitype/dist/cjs/exports/index.js\");\nconst AbiItem = __webpack_require__(/*! ./AbiItem.js */ \"(ssr)/./node_modules/ox/_cjs/core/AbiItem.js\");\nconst AbiParameters = __webpack_require__(/*! ./AbiParameters.js */ \"(ssr)/./node_modules/ox/_cjs/core/AbiParameters.js\");\nconst Hex = __webpack_require__(/*! ./Hex.js */ \"(ssr)/./node_modules/ox/_cjs/core/Hex.js\");\nfunction decodeData(...parameters) {\n    const [abiFunction, data] = (()=>{\n        if (Array.isArray(parameters[0])) {\n            const [abi, name, data] = parameters;\n            return [\n                fromAbi(abi, name),\n                data\n            ];\n        }\n        return parameters;\n    })();\n    const { overloads } = abiFunction;\n    if (Hex.size(data) < 4) throw new AbiItem.InvalidSelectorSizeError({\n        data\n    });\n    if (abiFunction.inputs.length === 0) return undefined;\n    const item = overloads ? fromAbi([\n        abiFunction,\n        ...overloads\n    ], data) : abiFunction;\n    if (Hex.size(data) <= 4) return undefined;\n    return AbiParameters.decode(item.inputs, Hex.slice(data, 4));\n}\nfunction decodeResult(...parameters) {\n    const [abiFunction, data, options = {}] = (()=>{\n        if (Array.isArray(parameters[0])) {\n            const [abi, name, data, options] = parameters;\n            return [\n                fromAbi(abi, name),\n                data,\n                options\n            ];\n        }\n        return parameters;\n    })();\n    const values = AbiParameters.decode(abiFunction.outputs, data, options);\n    if (values && Object.keys(values).length === 0) return undefined;\n    if (values && Object.keys(values).length === 1) {\n        if (Array.isArray(values)) return values[0];\n        return Object.values(values)[0];\n    }\n    return values;\n}\nfunction encodeData(...parameters) {\n    const [abiFunction, args = []] = (()=>{\n        if (Array.isArray(parameters[0])) {\n            const [abi, name, args] = parameters;\n            return [\n                fromAbi(abi, name, {\n                    args\n                }),\n                args\n            ];\n        }\n        const [abiFunction, args] = parameters;\n        return [\n            abiFunction,\n            args\n        ];\n    })();\n    const { overloads } = abiFunction;\n    const item = overloads ? fromAbi([\n        abiFunction,\n        ...overloads\n    ], abiFunction.name, {\n        args\n    }) : abiFunction;\n    const selector = getSelector(item);\n    const data = args.length > 0 ? AbiParameters.encode(item.inputs, args) : undefined;\n    return data ? Hex.concat(selector, data) : selector;\n}\nfunction encodeResult(...parameters) {\n    const [abiFunction, output, options = {}] = (()=>{\n        if (Array.isArray(parameters[0])) {\n            const [abi, name, output, options] = parameters;\n            return [\n                fromAbi(abi, name),\n                output,\n                options\n            ];\n        }\n        return parameters;\n    })();\n    const { as = \"Array\" } = options;\n    const values = (()=>{\n        if (abiFunction.outputs.length === 1) return [\n            output\n        ];\n        if (Array.isArray(output)) return output;\n        if (as === \"Object\") return Object.values(output);\n        return [\n            output\n        ];\n    })();\n    return AbiParameters.encode(abiFunction.outputs, values);\n}\nfunction format(abiFunction) {\n    return abitype.formatAbiItem(abiFunction);\n}\nfunction from(abiFunction, options = {}) {\n    return AbiItem.from(abiFunction, options);\n}\nfunction fromAbi(abi, name, options) {\n    const item = AbiItem.fromAbi(abi, name, options);\n    if (item.type !== \"function\") throw new AbiItem.NotFoundError({\n        name,\n        type: \"function\"\n    });\n    return item;\n}\nfunction getSelector(abiItem) {\n    return AbiItem.getSelector(abiItem);\n} //# sourceMappingURL=AbiFunction.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ox/_cjs/core/AbiFunction.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ox/_cjs/core/AbiItem.js":
/*!**********************************************!*\
  !*** ./node_modules/ox/_cjs/core/AbiItem.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.InvalidSelectorSizeError = exports.NotFoundError = exports.AmbiguityError = void 0;\nexports.format = format;\nexports.from = from;\nexports.fromAbi = fromAbi;\nexports.getSelector = getSelector;\nexports.getSignature = getSignature;\nexports.getSignatureHash = getSignatureHash;\nconst abitype = __webpack_require__(/*! abitype */ \"(ssr)/./node_modules/ox/node_modules/abitype/dist/cjs/exports/index.js\");\nconst Errors = __webpack_require__(/*! ./Errors.js */ \"(ssr)/./node_modules/ox/_cjs/core/Errors.js\");\nconst Hash = __webpack_require__(/*! ./Hash.js */ \"(ssr)/./node_modules/ox/_cjs/core/Hash.js\");\nconst Hex = __webpack_require__(/*! ./Hex.js */ \"(ssr)/./node_modules/ox/_cjs/core/Hex.js\");\nconst internal = __webpack_require__(/*! ./internal/abiItem.js */ \"(ssr)/./node_modules/ox/_cjs/core/internal/abiItem.js\");\nfunction format(abiItem) {\n    return abitype.formatAbiItem(abiItem);\n}\nfunction from(abiItem, options = {}) {\n    const { prepare = true } = options;\n    const item = (()=>{\n        if (Array.isArray(abiItem)) return abitype.parseAbiItem(abiItem);\n        if (typeof abiItem === \"string\") return abitype.parseAbiItem(abiItem);\n        return abiItem;\n    })();\n    return {\n        ...item,\n        ...prepare ? {\n            hash: getSignatureHash(item)\n        } : {}\n    };\n}\nfunction fromAbi(abi, name, options) {\n    const { args = [], prepare = true } = options ?? {};\n    const isSelector = Hex.validate(name, {\n        strict: false\n    });\n    const abiItems = abi.filter((abiItem)=>{\n        if (isSelector) {\n            if (abiItem.type === \"function\" || abiItem.type === \"error\") return getSelector(abiItem) === Hex.slice(name, 0, 4);\n            if (abiItem.type === \"event\") return getSignatureHash(abiItem) === name;\n            return false;\n        }\n        return \"name\" in abiItem && abiItem.name === name;\n    });\n    if (abiItems.length === 0) throw new NotFoundError({\n        name: name\n    });\n    if (abiItems.length === 1) return {\n        ...abiItems[0],\n        ...prepare ? {\n            hash: getSignatureHash(abiItems[0])\n        } : {}\n    };\n    let matchedAbiItem;\n    for (const abiItem of abiItems){\n        if (!(\"inputs\" in abiItem)) continue;\n        if (!args || args.length === 0) {\n            if (!abiItem.inputs || abiItem.inputs.length === 0) return {\n                ...abiItem,\n                ...prepare ? {\n                    hash: getSignatureHash(abiItem)\n                } : {}\n            };\n            continue;\n        }\n        if (!abiItem.inputs) continue;\n        if (abiItem.inputs.length === 0) continue;\n        if (abiItem.inputs.length !== args.length) continue;\n        const matched = args.every((arg, index)=>{\n            const abiParameter = \"inputs\" in abiItem && abiItem.inputs[index];\n            if (!abiParameter) return false;\n            return internal.isArgOfType(arg, abiParameter);\n        });\n        if (matched) {\n            if (matchedAbiItem && \"inputs\" in matchedAbiItem && matchedAbiItem.inputs) {\n                const ambiguousTypes = internal.getAmbiguousTypes(abiItem.inputs, matchedAbiItem.inputs, args);\n                if (ambiguousTypes) throw new AmbiguityError({\n                    abiItem,\n                    type: ambiguousTypes[0]\n                }, {\n                    abiItem: matchedAbiItem,\n                    type: ambiguousTypes[1]\n                });\n            }\n            matchedAbiItem = abiItem;\n        }\n    }\n    const abiItem = (()=>{\n        if (matchedAbiItem) return matchedAbiItem;\n        const [abiItem, ...overloads] = abiItems;\n        return {\n            ...abiItem,\n            overloads\n        };\n    })();\n    if (!abiItem) throw new NotFoundError({\n        name: name\n    });\n    return {\n        ...abiItem,\n        ...prepare ? {\n            hash: getSignatureHash(abiItem)\n        } : {}\n    };\n}\nfunction getSelector(...parameters) {\n    const abiItem = (()=>{\n        if (Array.isArray(parameters[0])) {\n            const [abi, name] = parameters;\n            return fromAbi(abi, name);\n        }\n        return parameters[0];\n    })();\n    return Hex.slice(getSignatureHash(abiItem), 0, 4);\n}\nfunction getSignature(...parameters) {\n    const abiItem = (()=>{\n        if (Array.isArray(parameters[0])) {\n            const [abi, name] = parameters;\n            return fromAbi(abi, name);\n        }\n        return parameters[0];\n    })();\n    const signature = (()=>{\n        if (typeof abiItem === \"string\") return abiItem;\n        return abitype.formatAbiItem(abiItem);\n    })();\n    return internal.normalizeSignature(signature);\n}\nfunction getSignatureHash(...parameters) {\n    const abiItem = (()=>{\n        if (Array.isArray(parameters[0])) {\n            const [abi, name] = parameters;\n            return fromAbi(abi, name);\n        }\n        return parameters[0];\n    })();\n    if (typeof abiItem !== \"string\" && \"hash\" in abiItem && abiItem.hash) return abiItem.hash;\n    return Hash.keccak256(Hex.fromString(getSignature(abiItem)));\n}\nclass AmbiguityError extends Errors.BaseError {\n    constructor(x, y){\n        super(\"Found ambiguous types in overloaded ABI Items.\", {\n            metaMessages: [\n                `\\`${x.type}\\` in \\`${internal.normalizeSignature(abitype.formatAbiItem(x.abiItem))}\\`, and`,\n                `\\`${y.type}\\` in \\`${internal.normalizeSignature(abitype.formatAbiItem(y.abiItem))}\\``,\n                \"\",\n                \"These types encode differently and cannot be distinguished at runtime.\",\n                \"Remove one of the ambiguous items in the ABI.\"\n            ]\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"AbiItem.AmbiguityError\"\n        });\n    }\n}\nexports.AmbiguityError = AmbiguityError;\nclass NotFoundError extends Errors.BaseError {\n    constructor({ name, data, type = \"item\" }){\n        const selector = (()=>{\n            if (name) return ` with name \"${name}\"`;\n            if (data) return ` with data \"${data}\"`;\n            return \"\";\n        })();\n        super(`ABI ${type}${selector} not found.`);\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"AbiItem.NotFoundError\"\n        });\n    }\n}\nexports.NotFoundError = NotFoundError;\nclass InvalidSelectorSizeError extends Errors.BaseError {\n    constructor({ data }){\n        super(`Selector size is invalid. Expected 4 bytes. Received ${Hex.size(data)} bytes (\"${data}\").`);\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"AbiItem.InvalidSelectorSizeError\"\n        });\n    }\n}\nexports.InvalidSelectorSizeError = InvalidSelectorSizeError; //# sourceMappingURL=AbiItem.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ox/_cjs/core/AbiItem.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ox/_cjs/core/AbiParameters.js":
/*!****************************************************!*\
  !*** ./node_modules/ox/_cjs/core/AbiParameters.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.InvalidTypeError = exports.InvalidArrayError = exports.LengthMismatchError = exports.BytesSizeMismatchError = exports.ArrayLengthMismatchError = exports.ZeroDataError = exports.DataSizeTooSmallError = void 0;\nexports.decode = decode;\nexports.encode = encode;\nexports.encodePacked = encodePacked;\nexports.format = format;\nexports.from = from;\nconst abitype = __webpack_require__(/*! abitype */ \"(ssr)/./node_modules/ox/node_modules/abitype/dist/cjs/exports/index.js\");\nconst Address = __webpack_require__(/*! ./Address.js */ \"(ssr)/./node_modules/ox/_cjs/core/Address.js\");\nconst Bytes = __webpack_require__(/*! ./Bytes.js */ \"(ssr)/./node_modules/ox/_cjs/core/Bytes.js\");\nconst Errors = __webpack_require__(/*! ./Errors.js */ \"(ssr)/./node_modules/ox/_cjs/core/Errors.js\");\nconst Hex = __webpack_require__(/*! ./Hex.js */ \"(ssr)/./node_modules/ox/_cjs/core/Hex.js\");\nconst internal = __webpack_require__(/*! ./internal/abiParameters.js */ \"(ssr)/./node_modules/ox/_cjs/core/internal/abiParameters.js\");\nconst Cursor = __webpack_require__(/*! ./internal/cursor.js */ \"(ssr)/./node_modules/ox/_cjs/core/internal/cursor.js\");\nconst Solidity = __webpack_require__(/*! ./Solidity.js */ \"(ssr)/./node_modules/ox/_cjs/core/Solidity.js\");\nfunction decode(parameters, data, options = {}) {\n    const { as = \"Array\", checksumAddress = false } = options;\n    const bytes = typeof data === \"string\" ? Bytes.fromHex(data) : data;\n    const cursor = Cursor.create(bytes);\n    if (Bytes.size(bytes) === 0 && parameters.length > 0) throw new ZeroDataError();\n    if (Bytes.size(bytes) && Bytes.size(bytes) < 32) throw new DataSizeTooSmallError({\n        data: typeof data === \"string\" ? data : Hex.fromBytes(data),\n        parameters: parameters,\n        size: Bytes.size(bytes)\n    });\n    let consumed = 0;\n    const values = as === \"Array\" ? [] : {};\n    for(let i = 0; i < parameters.length; ++i){\n        const param = parameters[i];\n        cursor.setPosition(consumed);\n        const [data, consumed_] = internal.decodeParameter(cursor, param, {\n            checksumAddress,\n            staticPosition: 0\n        });\n        consumed += consumed_;\n        if (as === \"Array\") values.push(data);\n        else values[param.name ?? i] = data;\n    }\n    return values;\n}\nfunction encode(parameters, values, options) {\n    const { checksumAddress = false } = options ?? {};\n    if (parameters.length !== values.length) throw new LengthMismatchError({\n        expectedLength: parameters.length,\n        givenLength: values.length\n    });\n    const preparedParameters = internal.prepareParameters({\n        checksumAddress,\n        parameters: parameters,\n        values: values\n    });\n    const data = internal.encode(preparedParameters);\n    if (data.length === 0) return \"0x\";\n    return data;\n}\nfunction encodePacked(types, values) {\n    if (types.length !== values.length) throw new LengthMismatchError({\n        expectedLength: types.length,\n        givenLength: values.length\n    });\n    const data = [];\n    for(let i = 0; i < types.length; i++){\n        const type = types[i];\n        const value = values[i];\n        data.push(encodePacked.encode(type, value));\n    }\n    return Hex.concat(...data);\n}\n(function(encodePacked) {\n    function encode(type, value, isArray = false) {\n        if (type === \"address\") {\n            const address = value;\n            Address.assert(address);\n            return Hex.padLeft(address.toLowerCase(), isArray ? 32 : 0);\n        }\n        if (type === \"string\") return Hex.fromString(value);\n        if (type === \"bytes\") return value;\n        if (type === \"bool\") return Hex.padLeft(Hex.fromBoolean(value), isArray ? 32 : 1);\n        const intMatch = type.match(Solidity.integerRegex);\n        if (intMatch) {\n            const [_type, baseType, bits = \"256\"] = intMatch;\n            const size = Number.parseInt(bits, 10) / 8;\n            return Hex.fromNumber(value, {\n                size: isArray ? 32 : size,\n                signed: baseType === \"int\"\n            });\n        }\n        const bytesMatch = type.match(Solidity.bytesRegex);\n        if (bytesMatch) {\n            const [_type, size] = bytesMatch;\n            if (Number.parseInt(size, 10) !== (value.length - 2) / 2) throw new BytesSizeMismatchError({\n                expectedSize: Number.parseInt(size, 10),\n                value: value\n            });\n            return Hex.padRight(value, isArray ? 32 : 0);\n        }\n        const arrayMatch = type.match(Solidity.arrayRegex);\n        if (arrayMatch && Array.isArray(value)) {\n            const [_type, childType] = arrayMatch;\n            const data = [];\n            for(let i = 0; i < value.length; i++){\n                data.push(encode(childType, value[i], true));\n            }\n            if (data.length === 0) return \"0x\";\n            return Hex.concat(...data);\n        }\n        throw new InvalidTypeError(type);\n    }\n    encodePacked.encode = encode;\n})(encodePacked || (exports.encodePacked = encodePacked = {}));\nfunction format(parameters) {\n    return abitype.formatAbiParameters(parameters);\n}\nfunction from(parameters) {\n    if (Array.isArray(parameters) && typeof parameters[0] === \"string\") return abitype.parseAbiParameters(parameters);\n    if (typeof parameters === \"string\") return abitype.parseAbiParameters(parameters);\n    return parameters;\n}\nclass DataSizeTooSmallError extends Errors.BaseError {\n    constructor({ data, parameters, size }){\n        super(`Data size of ${size} bytes is too small for given parameters.`, {\n            metaMessages: [\n                `Params: (${abitype.formatAbiParameters(parameters)})`,\n                `Data:   ${data} (${size} bytes)`\n            ]\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"AbiParameters.DataSizeTooSmallError\"\n        });\n    }\n}\nexports.DataSizeTooSmallError = DataSizeTooSmallError;\nclass ZeroDataError extends Errors.BaseError {\n    constructor(){\n        super('Cannot decode zero data (\"0x\") with ABI parameters.');\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"AbiParameters.ZeroDataError\"\n        });\n    }\n}\nexports.ZeroDataError = ZeroDataError;\nclass ArrayLengthMismatchError extends Errors.BaseError {\n    constructor({ expectedLength, givenLength, type }){\n        super(`Array length mismatch for type \\`${type}\\`. Expected: \\`${expectedLength}\\`. Given: \\`${givenLength}\\`.`);\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"AbiParameters.ArrayLengthMismatchError\"\n        });\n    }\n}\nexports.ArrayLengthMismatchError = ArrayLengthMismatchError;\nclass BytesSizeMismatchError extends Errors.BaseError {\n    constructor({ expectedSize, value }){\n        super(`Size of bytes \"${value}\" (bytes${Hex.size(value)}) does not match expected size (bytes${expectedSize}).`);\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"AbiParameters.BytesSizeMismatchError\"\n        });\n    }\n}\nexports.BytesSizeMismatchError = BytesSizeMismatchError;\nclass LengthMismatchError extends Errors.BaseError {\n    constructor({ expectedLength, givenLength }){\n        super([\n            \"ABI encoding parameters/values length mismatch.\",\n            `Expected length (parameters): ${expectedLength}`,\n            `Given length (values): ${givenLength}`\n        ].join(\"\\n\"));\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"AbiParameters.LengthMismatchError\"\n        });\n    }\n}\nexports.LengthMismatchError = LengthMismatchError;\nclass InvalidArrayError extends Errors.BaseError {\n    constructor(value){\n        super(`Value \\`${value}\\` is not a valid array.`);\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"AbiParameters.InvalidArrayError\"\n        });\n    }\n}\nexports.InvalidArrayError = InvalidArrayError;\nclass InvalidTypeError extends Errors.BaseError {\n    constructor(type){\n        super(`Type \\`${type}\\` is not a valid ABI Type.`);\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"AbiParameters.InvalidTypeError\"\n        });\n    }\n}\nexports.InvalidTypeError = InvalidTypeError; //# sourceMappingURL=AbiParameters.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ox/_cjs/core/AbiParameters.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ox/_cjs/core/Address.js":
/*!**********************************************!*\
  !*** ./node_modules/ox/_cjs/core/Address.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.InvalidChecksumError = exports.InvalidInputError = exports.InvalidAddressError = void 0;\nexports.assert = assert;\nexports.checksum = checksum;\nexports.from = from;\nexports.fromPublicKey = fromPublicKey;\nexports.isEqual = isEqual;\nexports.validate = validate;\nconst Bytes = __webpack_require__(/*! ./Bytes.js */ \"(ssr)/./node_modules/ox/_cjs/core/Bytes.js\");\nconst Caches = __webpack_require__(/*! ./Caches.js */ \"(ssr)/./node_modules/ox/_cjs/core/Caches.js\");\nconst Errors = __webpack_require__(/*! ./Errors.js */ \"(ssr)/./node_modules/ox/_cjs/core/Errors.js\");\nconst Hash = __webpack_require__(/*! ./Hash.js */ \"(ssr)/./node_modules/ox/_cjs/core/Hash.js\");\nconst PublicKey = __webpack_require__(/*! ./PublicKey.js */ \"(ssr)/./node_modules/ox/_cjs/core/PublicKey.js\");\nconst addressRegex = /^0x[a-fA-F0-9]{40}$/;\nfunction assert(value, options = {}) {\n    const { strict = true } = options;\n    if (!addressRegex.test(value)) throw new InvalidAddressError({\n        address: value,\n        cause: new InvalidInputError()\n    });\n    if (strict) {\n        if (value.toLowerCase() === value) return;\n        if (checksum(value) !== value) throw new InvalidAddressError({\n            address: value,\n            cause: new InvalidChecksumError()\n        });\n    }\n}\nfunction checksum(address) {\n    if (Caches.checksum.has(address)) return Caches.checksum.get(address);\n    assert(address, {\n        strict: false\n    });\n    const hexAddress = address.substring(2).toLowerCase();\n    const hash = Hash.keccak256(Bytes.fromString(hexAddress), {\n        as: \"Bytes\"\n    });\n    const characters = hexAddress.split(\"\");\n    for(let i = 0; i < 40; i += 2){\n        if (hash[i >> 1] >> 4 >= 8 && characters[i]) {\n            characters[i] = characters[i].toUpperCase();\n        }\n        if ((hash[i >> 1] & 0x0f) >= 8 && characters[i + 1]) {\n            characters[i + 1] = characters[i + 1].toUpperCase();\n        }\n    }\n    const result = `0x${characters.join(\"\")}`;\n    Caches.checksum.set(address, result);\n    return result;\n}\nfunction from(address, options = {}) {\n    const { checksum: checksumVal = false } = options;\n    assert(address);\n    if (checksumVal) return checksum(address);\n    return address;\n}\nfunction fromPublicKey(publicKey, options = {}) {\n    const address = Hash.keccak256(`0x${PublicKey.toHex(publicKey).slice(4)}`).substring(26);\n    return from(`0x${address}`, options);\n}\nfunction isEqual(addressA, addressB) {\n    assert(addressA, {\n        strict: false\n    });\n    assert(addressB, {\n        strict: false\n    });\n    return addressA.toLowerCase() === addressB.toLowerCase();\n}\nfunction validate(address, options = {}) {\n    const { strict = true } = options ?? {};\n    try {\n        assert(address, {\n            strict\n        });\n        return true;\n    } catch  {\n        return false;\n    }\n}\nclass InvalidAddressError extends Errors.BaseError {\n    constructor({ address, cause }){\n        super(`Address \"${address}\" is invalid.`, {\n            cause\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"Address.InvalidAddressError\"\n        });\n    }\n}\nexports.InvalidAddressError = InvalidAddressError;\nclass InvalidInputError extends Errors.BaseError {\n    constructor(){\n        super(\"Address is not a 20 byte (40 hexadecimal character) value.\");\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"Address.InvalidInputError\"\n        });\n    }\n}\nexports.InvalidInputError = InvalidInputError;\nclass InvalidChecksumError extends Errors.BaseError {\n    constructor(){\n        super(\"Address does not match its checksum counterpart.\");\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"Address.InvalidChecksumError\"\n        });\n    }\n}\nexports.InvalidChecksumError = InvalidChecksumError; //# sourceMappingURL=Address.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ox/_cjs/core/Address.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ox/_cjs/core/Authorization.js":
/*!****************************************************!*\
  !*** ./node_modules/ox/_cjs/core/Authorization.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.from = from;\nexports.fromRpc = fromRpc;\nexports.fromRpcList = fromRpcList;\nexports.fromTuple = fromTuple;\nexports.fromTupleList = fromTupleList;\nexports.getSignPayload = getSignPayload;\nexports.hash = hash;\nexports.toRpc = toRpc;\nexports.toRpcList = toRpcList;\nexports.toTuple = toTuple;\nexports.toTupleList = toTupleList;\nconst Hash = __webpack_require__(/*! ./Hash.js */ \"(ssr)/./node_modules/ox/_cjs/core/Hash.js\");\nconst Hex = __webpack_require__(/*! ./Hex.js */ \"(ssr)/./node_modules/ox/_cjs/core/Hex.js\");\nconst Rlp = __webpack_require__(/*! ./Rlp.js */ \"(ssr)/./node_modules/ox/_cjs/core/Rlp.js\");\nconst Signature = __webpack_require__(/*! ./Signature.js */ \"(ssr)/./node_modules/ox/_cjs/core/Signature.js\");\nfunction from(authorization, options = {}) {\n    if (typeof authorization.chainId === \"string\") return fromRpc(authorization);\n    return {\n        ...authorization,\n        ...options.signature\n    };\n}\nfunction fromRpc(authorization) {\n    const { address, chainId, nonce } = authorization;\n    const signature = Signature.extract(authorization);\n    return {\n        address,\n        chainId: Number(chainId),\n        nonce: BigInt(nonce),\n        ...signature\n    };\n}\nfunction fromRpcList(authorizationList) {\n    return authorizationList.map(fromRpc);\n}\nfunction fromTuple(tuple) {\n    const [chainId, address, nonce, yParity, r, s] = tuple;\n    let args = {\n        address,\n        chainId: chainId === \"0x\" ? 0 : Number(chainId),\n        nonce: nonce === \"0x\" ? 0n : BigInt(nonce)\n    };\n    if (yParity && r && s) args = {\n        ...args,\n        ...Signature.fromTuple([\n            yParity,\n            r,\n            s\n        ])\n    };\n    return from(args);\n}\nfunction fromTupleList(tupleList) {\n    const list = [];\n    for (const tuple of tupleList)list.push(fromTuple(tuple));\n    return list;\n}\nfunction getSignPayload(authorization) {\n    return hash(authorization, {\n        presign: true\n    });\n}\nfunction hash(authorization, options = {}) {\n    const { presign } = options;\n    return Hash.keccak256(Hex.concat(\"0x05\", Rlp.fromHex(toTuple(presign ? {\n        address: authorization.address,\n        chainId: authorization.chainId,\n        nonce: authorization.nonce\n    } : authorization))));\n}\nfunction toRpc(authorization) {\n    const { address, chainId, nonce, ...signature } = authorization;\n    return {\n        address,\n        chainId: Hex.fromNumber(chainId),\n        nonce: Hex.fromNumber(nonce),\n        ...Signature.toRpc(signature)\n    };\n}\nfunction toRpcList(authorizationList) {\n    return authorizationList.map(toRpc);\n}\nfunction toTuple(authorization) {\n    const { address, chainId, nonce } = authorization;\n    const signature = Signature.extract(authorization);\n    return [\n        chainId ? Hex.fromNumber(chainId) : \"0x\",\n        address,\n        nonce ? Hex.fromNumber(nonce) : \"0x\",\n        ...signature ? Signature.toTuple(signature) : []\n    ];\n}\nfunction toTupleList(list) {\n    if (!list || list.length === 0) return [];\n    const tupleList = [];\n    for (const authorization of list)tupleList.push(toTuple(authorization));\n    return tupleList;\n} //# sourceMappingURL=Authorization.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ox/_cjs/core/Authorization.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ox/_cjs/core/BlockOverrides.js":
/*!*****************************************************!*\
  !*** ./node_modules/ox/_cjs/core/BlockOverrides.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.fromRpc = fromRpc;\nexports.toRpc = toRpc;\nconst Hex = __webpack_require__(/*! ./Hex.js */ \"(ssr)/./node_modules/ox/_cjs/core/Hex.js\");\nconst Withdrawal = __webpack_require__(/*! ./Withdrawal.js */ \"(ssr)/./node_modules/ox/_cjs/core/Withdrawal.js\");\nfunction fromRpc(rpcBlockOverrides) {\n    return {\n        ...rpcBlockOverrides.baseFeePerGas && {\n            baseFeePerGas: BigInt(rpcBlockOverrides.baseFeePerGas)\n        },\n        ...rpcBlockOverrides.blobBaseFee && {\n            blobBaseFee: BigInt(rpcBlockOverrides.blobBaseFee)\n        },\n        ...rpcBlockOverrides.feeRecipient && {\n            feeRecipient: rpcBlockOverrides.feeRecipient\n        },\n        ...rpcBlockOverrides.gasLimit && {\n            gasLimit: BigInt(rpcBlockOverrides.gasLimit)\n        },\n        ...rpcBlockOverrides.number && {\n            number: BigInt(rpcBlockOverrides.number)\n        },\n        ...rpcBlockOverrides.prevRandao && {\n            prevRandao: BigInt(rpcBlockOverrides.prevRandao)\n        },\n        ...rpcBlockOverrides.time && {\n            time: BigInt(rpcBlockOverrides.time)\n        },\n        ...rpcBlockOverrides.withdrawals && {\n            withdrawals: rpcBlockOverrides.withdrawals.map(Withdrawal.fromRpc)\n        }\n    };\n}\nfunction toRpc(blockOverrides) {\n    return {\n        ...typeof blockOverrides.baseFeePerGas === \"bigint\" && {\n            baseFeePerGas: Hex.fromNumber(blockOverrides.baseFeePerGas)\n        },\n        ...typeof blockOverrides.blobBaseFee === \"bigint\" && {\n            blobBaseFee: Hex.fromNumber(blockOverrides.blobBaseFee)\n        },\n        ...typeof blockOverrides.feeRecipient === \"string\" && {\n            feeRecipient: blockOverrides.feeRecipient\n        },\n        ...typeof blockOverrides.gasLimit === \"bigint\" && {\n            gasLimit: Hex.fromNumber(blockOverrides.gasLimit)\n        },\n        ...typeof blockOverrides.number === \"bigint\" && {\n            number: Hex.fromNumber(blockOverrides.number)\n        },\n        ...typeof blockOverrides.prevRandao === \"bigint\" && {\n            prevRandao: Hex.fromNumber(blockOverrides.prevRandao)\n        },\n        ...typeof blockOverrides.time === \"bigint\" && {\n            time: Hex.fromNumber(blockOverrides.time)\n        },\n        ...blockOverrides.withdrawals && {\n            withdrawals: blockOverrides.withdrawals.map(Withdrawal.toRpc)\n        }\n    };\n} //# sourceMappingURL=BlockOverrides.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb3gvX2Nqcy9jb3JlL0Jsb2NrT3ZlcnJpZGVzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxlQUFlLEdBQUdFO0FBQ2xCRixhQUFhLEdBQUdHO0FBQ2hCLE1BQU1DLE1BQU1DLG1CQUFPQSxDQUFDLDBEQUFVO0FBQzlCLE1BQU1DLGFBQWFELG1CQUFPQSxDQUFDLHdFQUFpQjtBQUM1QyxTQUFTSCxRQUFRSyxpQkFBaUI7SUFDOUIsT0FBTztRQUNILEdBQUlBLGtCQUFrQkMsYUFBYSxJQUFJO1lBQ25DQSxlQUFlQyxPQUFPRixrQkFBa0JDLGFBQWE7UUFDekQsQ0FBQztRQUNELEdBQUlELGtCQUFrQkcsV0FBVyxJQUFJO1lBQ2pDQSxhQUFhRCxPQUFPRixrQkFBa0JHLFdBQVc7UUFDckQsQ0FBQztRQUNELEdBQUlILGtCQUFrQkksWUFBWSxJQUFJO1lBQ2xDQSxjQUFjSixrQkFBa0JJLFlBQVk7UUFDaEQsQ0FBQztRQUNELEdBQUlKLGtCQUFrQkssUUFBUSxJQUFJO1lBQzlCQSxVQUFVSCxPQUFPRixrQkFBa0JLLFFBQVE7UUFDL0MsQ0FBQztRQUNELEdBQUlMLGtCQUFrQk0sTUFBTSxJQUFJO1lBQzVCQSxRQUFRSixPQUFPRixrQkFBa0JNLE1BQU07UUFDM0MsQ0FBQztRQUNELEdBQUlOLGtCQUFrQk8sVUFBVSxJQUFJO1lBQ2hDQSxZQUFZTCxPQUFPRixrQkFBa0JPLFVBQVU7UUFDbkQsQ0FBQztRQUNELEdBQUlQLGtCQUFrQlEsSUFBSSxJQUFJO1lBQzFCQSxNQUFNTixPQUFPRixrQkFBa0JRLElBQUk7UUFDdkMsQ0FBQztRQUNELEdBQUlSLGtCQUFrQlMsV0FBVyxJQUFJO1lBQ2pDQSxhQUFhVCxrQkFBa0JTLFdBQVcsQ0FBQ0MsR0FBRyxDQUFDWCxXQUFXSixPQUFPO1FBQ3JFLENBQUM7SUFDTDtBQUNKO0FBQ0EsU0FBU0MsTUFBTWUsY0FBYztJQUN6QixPQUFPO1FBQ0gsR0FBSSxPQUFPQSxlQUFlVixhQUFhLEtBQUssWUFBWTtZQUNwREEsZUFBZUosSUFBSWUsVUFBVSxDQUFDRCxlQUFlVixhQUFhO1FBQzlELENBQUM7UUFDRCxHQUFJLE9BQU9VLGVBQWVSLFdBQVcsS0FBSyxZQUFZO1lBQ2xEQSxhQUFhTixJQUFJZSxVQUFVLENBQUNELGVBQWVSLFdBQVc7UUFDMUQsQ0FBQztRQUNELEdBQUksT0FBT1EsZUFBZVAsWUFBWSxLQUFLLFlBQVk7WUFDbkRBLGNBQWNPLGVBQWVQLFlBQVk7UUFDN0MsQ0FBQztRQUNELEdBQUksT0FBT08sZUFBZU4sUUFBUSxLQUFLLFlBQVk7WUFDL0NBLFVBQVVSLElBQUllLFVBQVUsQ0FBQ0QsZUFBZU4sUUFBUTtRQUNwRCxDQUFDO1FBQ0QsR0FBSSxPQUFPTSxlQUFlTCxNQUFNLEtBQUssWUFBWTtZQUM3Q0EsUUFBUVQsSUFBSWUsVUFBVSxDQUFDRCxlQUFlTCxNQUFNO1FBQ2hELENBQUM7UUFDRCxHQUFJLE9BQU9LLGVBQWVKLFVBQVUsS0FBSyxZQUFZO1lBQ2pEQSxZQUFZVixJQUFJZSxVQUFVLENBQUNELGVBQWVKLFVBQVU7UUFDeEQsQ0FBQztRQUNELEdBQUksT0FBT0ksZUFBZUgsSUFBSSxLQUFLLFlBQVk7WUFDM0NBLE1BQU1YLElBQUllLFVBQVUsQ0FBQ0QsZUFBZUgsSUFBSTtRQUM1QyxDQUFDO1FBQ0QsR0FBSUcsZUFBZUYsV0FBVyxJQUFJO1lBQzlCQSxhQUFhRSxlQUFlRixXQUFXLENBQUNDLEdBQUcsQ0FBQ1gsV0FBV0gsS0FBSztRQUNoRSxDQUFDO0lBQ0w7QUFDSixFQUNBLDBDQUEwQyIsInNvdXJjZXMiOlsid2VicGFjazovL3dzdG9uLXVpLy4vbm9kZV9tb2R1bGVzL294L19janMvY29yZS9CbG9ja092ZXJyaWRlcy5qcz8yNDBkIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5mcm9tUnBjID0gZnJvbVJwYztcbmV4cG9ydHMudG9ScGMgPSB0b1JwYztcbmNvbnN0IEhleCA9IHJlcXVpcmUoXCIuL0hleC5qc1wiKTtcbmNvbnN0IFdpdGhkcmF3YWwgPSByZXF1aXJlKFwiLi9XaXRoZHJhd2FsLmpzXCIpO1xuZnVuY3Rpb24gZnJvbVJwYyhycGNCbG9ja092ZXJyaWRlcykge1xuICAgIHJldHVybiB7XG4gICAgICAgIC4uLihycGNCbG9ja092ZXJyaWRlcy5iYXNlRmVlUGVyR2FzICYmIHtcbiAgICAgICAgICAgIGJhc2VGZWVQZXJHYXM6IEJpZ0ludChycGNCbG9ja092ZXJyaWRlcy5iYXNlRmVlUGVyR2FzKSxcbiAgICAgICAgfSksXG4gICAgICAgIC4uLihycGNCbG9ja092ZXJyaWRlcy5ibG9iQmFzZUZlZSAmJiB7XG4gICAgICAgICAgICBibG9iQmFzZUZlZTogQmlnSW50KHJwY0Jsb2NrT3ZlcnJpZGVzLmJsb2JCYXNlRmVlKSxcbiAgICAgICAgfSksXG4gICAgICAgIC4uLihycGNCbG9ja092ZXJyaWRlcy5mZWVSZWNpcGllbnQgJiYge1xuICAgICAgICAgICAgZmVlUmVjaXBpZW50OiBycGNCbG9ja092ZXJyaWRlcy5mZWVSZWNpcGllbnQsXG4gICAgICAgIH0pLFxuICAgICAgICAuLi4ocnBjQmxvY2tPdmVycmlkZXMuZ2FzTGltaXQgJiYge1xuICAgICAgICAgICAgZ2FzTGltaXQ6IEJpZ0ludChycGNCbG9ja092ZXJyaWRlcy5nYXNMaW1pdCksXG4gICAgICAgIH0pLFxuICAgICAgICAuLi4ocnBjQmxvY2tPdmVycmlkZXMubnVtYmVyICYmIHtcbiAgICAgICAgICAgIG51bWJlcjogQmlnSW50KHJwY0Jsb2NrT3ZlcnJpZGVzLm51bWJlciksXG4gICAgICAgIH0pLFxuICAgICAgICAuLi4ocnBjQmxvY2tPdmVycmlkZXMucHJldlJhbmRhbyAmJiB7XG4gICAgICAgICAgICBwcmV2UmFuZGFvOiBCaWdJbnQocnBjQmxvY2tPdmVycmlkZXMucHJldlJhbmRhbyksXG4gICAgICAgIH0pLFxuICAgICAgICAuLi4ocnBjQmxvY2tPdmVycmlkZXMudGltZSAmJiB7XG4gICAgICAgICAgICB0aW1lOiBCaWdJbnQocnBjQmxvY2tPdmVycmlkZXMudGltZSksXG4gICAgICAgIH0pLFxuICAgICAgICAuLi4ocnBjQmxvY2tPdmVycmlkZXMud2l0aGRyYXdhbHMgJiYge1xuICAgICAgICAgICAgd2l0aGRyYXdhbHM6IHJwY0Jsb2NrT3ZlcnJpZGVzLndpdGhkcmF3YWxzLm1hcChXaXRoZHJhd2FsLmZyb21ScGMpLFxuICAgICAgICB9KSxcbiAgICB9O1xufVxuZnVuY3Rpb24gdG9ScGMoYmxvY2tPdmVycmlkZXMpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICAuLi4odHlwZW9mIGJsb2NrT3ZlcnJpZGVzLmJhc2VGZWVQZXJHYXMgPT09ICdiaWdpbnQnICYmIHtcbiAgICAgICAgICAgIGJhc2VGZWVQZXJHYXM6IEhleC5mcm9tTnVtYmVyKGJsb2NrT3ZlcnJpZGVzLmJhc2VGZWVQZXJHYXMpLFxuICAgICAgICB9KSxcbiAgICAgICAgLi4uKHR5cGVvZiBibG9ja092ZXJyaWRlcy5ibG9iQmFzZUZlZSA9PT0gJ2JpZ2ludCcgJiYge1xuICAgICAgICAgICAgYmxvYkJhc2VGZWU6IEhleC5mcm9tTnVtYmVyKGJsb2NrT3ZlcnJpZGVzLmJsb2JCYXNlRmVlKSxcbiAgICAgICAgfSksXG4gICAgICAgIC4uLih0eXBlb2YgYmxvY2tPdmVycmlkZXMuZmVlUmVjaXBpZW50ID09PSAnc3RyaW5nJyAmJiB7XG4gICAgICAgICAgICBmZWVSZWNpcGllbnQ6IGJsb2NrT3ZlcnJpZGVzLmZlZVJlY2lwaWVudCxcbiAgICAgICAgfSksXG4gICAgICAgIC4uLih0eXBlb2YgYmxvY2tPdmVycmlkZXMuZ2FzTGltaXQgPT09ICdiaWdpbnQnICYmIHtcbiAgICAgICAgICAgIGdhc0xpbWl0OiBIZXguZnJvbU51bWJlcihibG9ja092ZXJyaWRlcy5nYXNMaW1pdCksXG4gICAgICAgIH0pLFxuICAgICAgICAuLi4odHlwZW9mIGJsb2NrT3ZlcnJpZGVzLm51bWJlciA9PT0gJ2JpZ2ludCcgJiYge1xuICAgICAgICAgICAgbnVtYmVyOiBIZXguZnJvbU51bWJlcihibG9ja092ZXJyaWRlcy5udW1iZXIpLFxuICAgICAgICB9KSxcbiAgICAgICAgLi4uKHR5cGVvZiBibG9ja092ZXJyaWRlcy5wcmV2UmFuZGFvID09PSAnYmlnaW50JyAmJiB7XG4gICAgICAgICAgICBwcmV2UmFuZGFvOiBIZXguZnJvbU51bWJlcihibG9ja092ZXJyaWRlcy5wcmV2UmFuZGFvKSxcbiAgICAgICAgfSksXG4gICAgICAgIC4uLih0eXBlb2YgYmxvY2tPdmVycmlkZXMudGltZSA9PT0gJ2JpZ2ludCcgJiYge1xuICAgICAgICAgICAgdGltZTogSGV4LmZyb21OdW1iZXIoYmxvY2tPdmVycmlkZXMudGltZSksXG4gICAgICAgIH0pLFxuICAgICAgICAuLi4oYmxvY2tPdmVycmlkZXMud2l0aGRyYXdhbHMgJiYge1xuICAgICAgICAgICAgd2l0aGRyYXdhbHM6IGJsb2NrT3ZlcnJpZGVzLndpdGhkcmF3YWxzLm1hcChXaXRoZHJhd2FsLnRvUnBjKSxcbiAgICAgICAgfSksXG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUJsb2NrT3ZlcnJpZGVzLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImZyb21ScGMiLCJ0b1JwYyIsIkhleCIsInJlcXVpcmUiLCJXaXRoZHJhd2FsIiwicnBjQmxvY2tPdmVycmlkZXMiLCJiYXNlRmVlUGVyR2FzIiwiQmlnSW50IiwiYmxvYkJhc2VGZWUiLCJmZWVSZWNpcGllbnQiLCJnYXNMaW1pdCIsIm51bWJlciIsInByZXZSYW5kYW8iLCJ0aW1lIiwid2l0aGRyYXdhbHMiLCJtYXAiLCJibG9ja092ZXJyaWRlcyIsImZyb21OdW1iZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ox/_cjs/core/BlockOverrides.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ox/_cjs/core/Bytes.js":
/*!********************************************!*\
  !*** ./node_modules/ox/_cjs/core/Bytes.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.SizeExceedsPaddingSizeError = exports.SliceOffsetOutOfBoundsError = exports.SizeOverflowError = exports.InvalidBytesTypeError = exports.InvalidBytesBooleanError = void 0;\nexports.assert = assert;\nexports.concat = concat;\nexports.from = from;\nexports.fromArray = fromArray;\nexports.fromBoolean = fromBoolean;\nexports.fromHex = fromHex;\nexports.fromNumber = fromNumber;\nexports.fromString = fromString;\nexports.isEqual = isEqual;\nexports.padLeft = padLeft;\nexports.padRight = padRight;\nexports.random = random;\nexports.size = size;\nexports.slice = slice;\nexports.toBigInt = toBigInt;\nexports.toBoolean = toBoolean;\nexports.toHex = toHex;\nexports.toNumber = toNumber;\nexports.toString = toString;\nexports.trimLeft = trimLeft;\nexports.trimRight = trimRight;\nexports.validate = validate;\nconst utils_1 = __webpack_require__(/*! @noble/curves/abstract/utils */ \"(ssr)/./node_modules/ox/node_modules/@noble/curves/abstract/utils.js\");\nconst Errors = __webpack_require__(/*! ./Errors.js */ \"(ssr)/./node_modules/ox/_cjs/core/Errors.js\");\nconst Hex = __webpack_require__(/*! ./Hex.js */ \"(ssr)/./node_modules/ox/_cjs/core/Hex.js\");\nconst internal = __webpack_require__(/*! ./internal/bytes.js */ \"(ssr)/./node_modules/ox/_cjs/core/internal/bytes.js\");\nconst internal_hex = __webpack_require__(/*! ./internal/hex.js */ \"(ssr)/./node_modules/ox/_cjs/core/internal/hex.js\");\nconst Json = __webpack_require__(/*! ./Json.js */ \"(ssr)/./node_modules/ox/_cjs/core/Json.js\");\nconst decoder = new TextDecoder();\nconst encoder = new TextEncoder();\nfunction assert(value) {\n    if (value instanceof Uint8Array) return;\n    if (!value) throw new InvalidBytesTypeError(value);\n    if (typeof value !== \"object\") throw new InvalidBytesTypeError(value);\n    if (!(\"BYTES_PER_ELEMENT\" in value)) throw new InvalidBytesTypeError(value);\n    if (value.BYTES_PER_ELEMENT !== 1 || value.constructor.name !== \"Uint8Array\") throw new InvalidBytesTypeError(value);\n}\nfunction concat(...values) {\n    let length = 0;\n    for (const arr of values){\n        length += arr.length;\n    }\n    const result = new Uint8Array(length);\n    for(let i = 0, index = 0; i < values.length; i++){\n        const arr = values[i];\n        result.set(arr, index);\n        index += arr.length;\n    }\n    return result;\n}\nfunction from(value) {\n    if (value instanceof Uint8Array) return value;\n    if (typeof value === \"string\") return fromHex(value);\n    return fromArray(value);\n}\nfunction fromArray(value) {\n    return value instanceof Uint8Array ? value : new Uint8Array(value);\n}\nfunction fromBoolean(value, options = {}) {\n    const { size } = options;\n    const bytes = new Uint8Array(1);\n    bytes[0] = Number(value);\n    if (typeof size === \"number\") {\n        internal.assertSize(bytes, size);\n        return padLeft(bytes, size);\n    }\n    return bytes;\n}\nfunction fromHex(value, options = {}) {\n    const { size } = options;\n    let hex = value;\n    if (size) {\n        internal_hex.assertSize(value, size);\n        hex = Hex.padRight(value, size);\n    }\n    let hexString = hex.slice(2);\n    if (hexString.length % 2) hexString = `0${hexString}`;\n    const length = hexString.length / 2;\n    const bytes = new Uint8Array(length);\n    for(let index = 0, j = 0; index < length; index++){\n        const nibbleLeft = internal.charCodeToBase16(hexString.charCodeAt(j++));\n        const nibbleRight = internal.charCodeToBase16(hexString.charCodeAt(j++));\n        if (nibbleLeft === undefined || nibbleRight === undefined) {\n            throw new Errors.BaseError(`Invalid byte sequence (\"${hexString[j - 2]}${hexString[j - 1]}\" in \"${hexString}\").`);\n        }\n        bytes[index] = nibbleLeft * 16 + nibbleRight;\n    }\n    return bytes;\n}\nfunction fromNumber(value, options) {\n    const hex = Hex.fromNumber(value, options);\n    return fromHex(hex);\n}\nfunction fromString(value, options = {}) {\n    const { size } = options;\n    const bytes = encoder.encode(value);\n    if (typeof size === \"number\") {\n        internal.assertSize(bytes, size);\n        return padRight(bytes, size);\n    }\n    return bytes;\n}\nfunction isEqual(bytesA, bytesB) {\n    return (0, utils_1.equalBytes)(bytesA, bytesB);\n}\nfunction padLeft(value, size) {\n    return internal.pad(value, {\n        dir: \"left\",\n        size\n    });\n}\nfunction padRight(value, size) {\n    return internal.pad(value, {\n        dir: \"right\",\n        size\n    });\n}\nfunction random(length) {\n    return crypto.getRandomValues(new Uint8Array(length));\n}\nfunction size(value) {\n    return value.length;\n}\nfunction slice(value, start, end, options = {}) {\n    const { strict } = options;\n    internal.assertStartOffset(value, start);\n    const value_ = value.slice(start, end);\n    if (strict) internal.assertEndOffset(value_, start, end);\n    return value_;\n}\nfunction toBigInt(bytes, options = {}) {\n    const { size } = options;\n    if (typeof size !== \"undefined\") internal.assertSize(bytes, size);\n    const hex = Hex.fromBytes(bytes, options);\n    return Hex.toBigInt(hex, options);\n}\nfunction toBoolean(bytes, options = {}) {\n    const { size } = options;\n    let bytes_ = bytes;\n    if (typeof size !== \"undefined\") {\n        internal.assertSize(bytes_, size);\n        bytes_ = trimLeft(bytes_);\n    }\n    if (bytes_.length > 1 || bytes_[0] > 1) throw new InvalidBytesBooleanError(bytes_);\n    return Boolean(bytes_[0]);\n}\nfunction toHex(value, options = {}) {\n    return Hex.fromBytes(value, options);\n}\nfunction toNumber(bytes, options = {}) {\n    const { size } = options;\n    if (typeof size !== \"undefined\") internal.assertSize(bytes, size);\n    const hex = Hex.fromBytes(bytes, options);\n    return Hex.toNumber(hex, options);\n}\nfunction toString(bytes, options = {}) {\n    const { size } = options;\n    let bytes_ = bytes;\n    if (typeof size !== \"undefined\") {\n        internal.assertSize(bytes_, size);\n        bytes_ = trimRight(bytes_);\n    }\n    return decoder.decode(bytes_);\n}\nfunction trimLeft(value) {\n    return internal.trim(value, {\n        dir: \"left\"\n    });\n}\nfunction trimRight(value) {\n    return internal.trim(value, {\n        dir: \"right\"\n    });\n}\nfunction validate(value) {\n    try {\n        assert(value);\n        return true;\n    } catch  {\n        return false;\n    }\n}\nclass InvalidBytesBooleanError extends Errors.BaseError {\n    constructor(bytes){\n        super(`Bytes value \\`${bytes}\\` is not a valid boolean.`, {\n            metaMessages: [\n                \"The bytes array must contain a single byte of either a `0` or `1` value.\"\n            ]\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"Bytes.InvalidBytesBooleanError\"\n        });\n    }\n}\nexports.InvalidBytesBooleanError = InvalidBytesBooleanError;\nclass InvalidBytesTypeError extends Errors.BaseError {\n    constructor(value){\n        super(`Value \\`${typeof value === \"object\" ? Json.stringify(value) : value}\\` of type \\`${typeof value}\\` is an invalid Bytes value.`, {\n            metaMessages: [\n                \"Bytes values must be of type `Bytes`.\"\n            ]\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"Bytes.InvalidBytesTypeError\"\n        });\n    }\n}\nexports.InvalidBytesTypeError = InvalidBytesTypeError;\nclass SizeOverflowError extends Errors.BaseError {\n    constructor({ givenSize, maxSize }){\n        super(`Size cannot exceed \\`${maxSize}\\` bytes. Given size: \\`${givenSize}\\` bytes.`);\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"Bytes.SizeOverflowError\"\n        });\n    }\n}\nexports.SizeOverflowError = SizeOverflowError;\nclass SliceOffsetOutOfBoundsError extends Errors.BaseError {\n    constructor({ offset, position, size }){\n        super(`Slice ${position === \"start\" ? \"starting\" : \"ending\"} at offset \\`${offset}\\` is out-of-bounds (size: \\`${size}\\`).`);\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"Bytes.SliceOffsetOutOfBoundsError\"\n        });\n    }\n}\nexports.SliceOffsetOutOfBoundsError = SliceOffsetOutOfBoundsError;\nclass SizeExceedsPaddingSizeError extends Errors.BaseError {\n    constructor({ size, targetSize, type }){\n        super(`${type.charAt(0).toUpperCase()}${type.slice(1).toLowerCase()} size (\\`${size}\\`) exceeds padding size (\\`${targetSize}\\`).`);\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"Bytes.SizeExceedsPaddingSizeError\"\n        });\n    }\n}\nexports.SizeExceedsPaddingSizeError = SizeExceedsPaddingSizeError; //# sourceMappingURL=Bytes.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ox/_cjs/core/Bytes.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ox/_cjs/core/Caches.js":
/*!*********************************************!*\
  !*** ./node_modules/ox/_cjs/core/Caches.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.checksum = void 0;\nexports.clear = clear;\nconst lru_js_1 = __webpack_require__(/*! ./internal/lru.js */ \"(ssr)/./node_modules/ox/_cjs/core/internal/lru.js\");\nconst caches = {\n    checksum: new lru_js_1.LruMap(8192)\n};\nexports.checksum = caches.checksum;\nfunction clear() {\n    for (const cache of Object.values(caches))cache.clear();\n} //# sourceMappingURL=Caches.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb3gvX2Nqcy9jb3JlL0NhY2hlcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsZ0JBQWdCLEdBQUcsS0FBSztBQUN4QkEsYUFBYSxHQUFHRztBQUNoQixNQUFNQyxXQUFXQyxtQkFBT0EsQ0FBQyw0RUFBbUI7QUFDNUMsTUFBTUMsU0FBUztJQUNYSixVQUFVLElBQUlFLFNBQVNHLE1BQU0sQ0FBQztBQUNsQztBQUNBUCxnQkFBZ0IsR0FBR00sT0FBT0osUUFBUTtBQUNsQyxTQUFTQztJQUNMLEtBQUssTUFBTUssU0FBU1YsT0FBT1csTUFBTSxDQUFDSCxRQUM5QkUsTUFBTUwsS0FBSztBQUNuQixFQUNBLGtDQUFrQyIsInNvdXJjZXMiOlsid2VicGFjazovL3dzdG9uLXVpLy4vbm9kZV9tb2R1bGVzL294L19janMvY29yZS9DYWNoZXMuanM/MWEzNCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuY2hlY2tzdW0gPSB2b2lkIDA7XG5leHBvcnRzLmNsZWFyID0gY2xlYXI7XG5jb25zdCBscnVfanNfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL2xydS5qc1wiKTtcbmNvbnN0IGNhY2hlcyA9IHtcbiAgICBjaGVja3N1bTogbmV3IGxydV9qc18xLkxydU1hcCg4MTkyKSxcbn07XG5leHBvcnRzLmNoZWNrc3VtID0gY2FjaGVzLmNoZWNrc3VtO1xuZnVuY3Rpb24gY2xlYXIoKSB7XG4gICAgZm9yIChjb25zdCBjYWNoZSBvZiBPYmplY3QudmFsdWVzKGNhY2hlcykpXG4gICAgICAgIGNhY2hlLmNsZWFyKCk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1DYWNoZXMuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiY2hlY2tzdW0iLCJjbGVhciIsImxydV9qc18xIiwicmVxdWlyZSIsImNhY2hlcyIsIkxydU1hcCIsImNhY2hlIiwidmFsdWVzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ox/_cjs/core/Caches.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ox/_cjs/core/Errors.js":
/*!*********************************************!*\
  !*** ./node_modules/ox/_cjs/core/Errors.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.BaseError = void 0;\nconst errors_js_1 = __webpack_require__(/*! ./internal/errors.js */ \"(ssr)/./node_modules/ox/_cjs/core/internal/errors.js\");\nclass BaseError extends Error {\n    constructor(shortMessage, options = {}){\n        const details = (()=>{\n            if (options.cause instanceof BaseError) {\n                if (options.cause.details) return options.cause.details;\n                if (options.cause.shortMessage) return options.cause.shortMessage;\n            }\n            if (options.cause && \"details\" in options.cause && typeof options.cause.details === \"string\") return options.cause.details;\n            if (options.cause?.message) return options.cause.message;\n            return options.details;\n        })();\n        const docsPath = (()=>{\n            if (options.cause instanceof BaseError) return options.cause.docsPath || options.docsPath;\n            return options.docsPath;\n        })();\n        const docsBaseUrl = \"https://oxlib.sh\";\n        const docs = `${docsBaseUrl}${docsPath ?? \"\"}`;\n        const message = [\n            shortMessage || \"An error occurred.\",\n            ...options.metaMessages ? [\n                \"\",\n                ...options.metaMessages\n            ] : [],\n            ...details || docsPath ? [\n                \"\",\n                details ? `Details: ${details}` : undefined,\n                docsPath ? `See: ${docs}` : undefined\n            ] : []\n        ].filter((x)=>typeof x === \"string\").join(\"\\n\");\n        super(message, options.cause ? {\n            cause: options.cause\n        } : undefined);\n        Object.defineProperty(this, \"details\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"docs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"docsPath\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"shortMessage\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"cause\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"BaseError\"\n        });\n        Object.defineProperty(this, \"version\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: `ox@${(0, errors_js_1.getVersion)()}`\n        });\n        this.cause = options.cause;\n        this.details = details;\n        this.docs = docs;\n        this.docsPath = docsPath;\n        this.shortMessage = shortMessage;\n    }\n    walk(fn) {\n        return walk(this, fn);\n    }\n}\nexports.BaseError = BaseError;\nfunction walk(err, fn) {\n    if (fn?.(err)) return err;\n    if (err && typeof err === \"object\" && \"cause\" in err && err.cause) return walk(err.cause, fn);\n    return fn ? null : err;\n} //# sourceMappingURL=Errors.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ox/_cjs/core/Errors.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ox/_cjs/core/Hash.js":
/*!*******************************************!*\
  !*** ./node_modules/ox/_cjs/core/Hash.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.keccak256 = keccak256;\nexports.ripemd160 = ripemd160;\nexports.sha256 = sha256;\nexports.validate = validate;\nconst ripemd160_1 = __webpack_require__(/*! @noble/hashes/ripemd160 */ \"(ssr)/./node_modules/ox/node_modules/@noble/hashes/ripemd160.js\");\nconst sha3_1 = __webpack_require__(/*! @noble/hashes/sha3 */ \"(ssr)/./node_modules/ox/node_modules/@noble/hashes/sha3.js\");\nconst sha256_1 = __webpack_require__(/*! @noble/hashes/sha256 */ \"(ssr)/./node_modules/ox/node_modules/@noble/hashes/sha256.js\");\nconst Bytes = __webpack_require__(/*! ./Bytes.js */ \"(ssr)/./node_modules/ox/_cjs/core/Bytes.js\");\nconst Hex = __webpack_require__(/*! ./Hex.js */ \"(ssr)/./node_modules/ox/_cjs/core/Hex.js\");\nfunction keccak256(value, options = {}) {\n    const { as = typeof value === \"string\" ? \"Hex\" : \"Bytes\" } = options;\n    const bytes = (0, sha3_1.keccak_256)(Bytes.from(value));\n    if (as === \"Bytes\") return bytes;\n    return Hex.fromBytes(bytes);\n}\nfunction ripemd160(value, options = {}) {\n    const { as = typeof value === \"string\" ? \"Hex\" : \"Bytes\" } = options;\n    const bytes = (0, ripemd160_1.ripemd160)(Bytes.from(value));\n    if (as === \"Bytes\") return bytes;\n    return Hex.fromBytes(bytes);\n}\nfunction sha256(value, options = {}) {\n    const { as = typeof value === \"string\" ? \"Hex\" : \"Bytes\" } = options;\n    const bytes = (0, sha256_1.sha256)(Bytes.from(value));\n    if (as === \"Bytes\") return bytes;\n    return Hex.fromBytes(bytes);\n}\nfunction validate(value) {\n    return Hex.validate(value) && Hex.size(value) === 32;\n} //# sourceMappingURL=Hash.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb3gvX2Nqcy9jb3JlL0hhc2guanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELGlCQUFpQixHQUFHRTtBQUNwQkYsaUJBQWlCLEdBQUdHO0FBQ3BCSCxjQUFjLEdBQUdJO0FBQ2pCSixnQkFBZ0IsR0FBR0s7QUFDbkIsTUFBTUMsY0FBY0MsbUJBQU9BLENBQUMsZ0dBQXlCO0FBQ3JELE1BQU1DLFNBQVNELG1CQUFPQSxDQUFDLHNGQUFvQjtBQUMzQyxNQUFNRSxXQUFXRixtQkFBT0EsQ0FBQywwRkFBc0I7QUFDL0MsTUFBTUcsUUFBUUgsbUJBQU9BLENBQUMsOERBQVk7QUFDbEMsTUFBTUksTUFBTUosbUJBQU9BLENBQUMsMERBQVU7QUFDOUIsU0FBU0wsVUFBVUQsS0FBSyxFQUFFVyxVQUFVLENBQUMsQ0FBQztJQUNsQyxNQUFNLEVBQUVDLEtBQUssT0FBT1osVUFBVSxXQUFXLFFBQVEsT0FBTyxFQUFFLEdBQUdXO0lBQzdELE1BQU1FLFFBQVEsQ0FBQyxHQUFHTixPQUFPTyxVQUFVLEVBQUVMLE1BQU1NLElBQUksQ0FBQ2Y7SUFDaEQsSUFBSVksT0FBTyxTQUNQLE9BQU9DO0lBQ1gsT0FBT0gsSUFBSU0sU0FBUyxDQUFDSDtBQUN6QjtBQUNBLFNBQVNYLFVBQVVGLEtBQUssRUFBRVcsVUFBVSxDQUFDLENBQUM7SUFDbEMsTUFBTSxFQUFFQyxLQUFLLE9BQU9aLFVBQVUsV0FBVyxRQUFRLE9BQU8sRUFBRSxHQUFHVztJQUM3RCxNQUFNRSxRQUFRLENBQUMsR0FBR1IsWUFBWUgsU0FBUyxFQUFFTyxNQUFNTSxJQUFJLENBQUNmO0lBQ3BELElBQUlZLE9BQU8sU0FDUCxPQUFPQztJQUNYLE9BQU9ILElBQUlNLFNBQVMsQ0FBQ0g7QUFDekI7QUFDQSxTQUFTVixPQUFPSCxLQUFLLEVBQUVXLFVBQVUsQ0FBQyxDQUFDO0lBQy9CLE1BQU0sRUFBRUMsS0FBSyxPQUFPWixVQUFVLFdBQVcsUUFBUSxPQUFPLEVBQUUsR0FBR1c7SUFDN0QsTUFBTUUsUUFBUSxDQUFDLEdBQUdMLFNBQVNMLE1BQU0sRUFBRU0sTUFBTU0sSUFBSSxDQUFDZjtJQUM5QyxJQUFJWSxPQUFPLFNBQ1AsT0FBT0M7SUFDWCxPQUFPSCxJQUFJTSxTQUFTLENBQUNIO0FBQ3pCO0FBQ0EsU0FBU1QsU0FBU0osS0FBSztJQUNuQixPQUFPVSxJQUFJTixRQUFRLENBQUNKLFVBQVVVLElBQUlPLElBQUksQ0FBQ2pCLFdBQVc7QUFDdEQsRUFDQSxnQ0FBZ0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93c3Rvbi11aS8uL25vZGVfbW9kdWxlcy9veC9fY2pzL2NvcmUvSGFzaC5qcz82YzU0Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5rZWNjYWsyNTYgPSBrZWNjYWsyNTY7XG5leHBvcnRzLnJpcGVtZDE2MCA9IHJpcGVtZDE2MDtcbmV4cG9ydHMuc2hhMjU2ID0gc2hhMjU2O1xuZXhwb3J0cy52YWxpZGF0ZSA9IHZhbGlkYXRlO1xuY29uc3QgcmlwZW1kMTYwXzEgPSByZXF1aXJlKFwiQG5vYmxlL2hhc2hlcy9yaXBlbWQxNjBcIik7XG5jb25zdCBzaGEzXzEgPSByZXF1aXJlKFwiQG5vYmxlL2hhc2hlcy9zaGEzXCIpO1xuY29uc3Qgc2hhMjU2XzEgPSByZXF1aXJlKFwiQG5vYmxlL2hhc2hlcy9zaGEyNTZcIik7XG5jb25zdCBCeXRlcyA9IHJlcXVpcmUoXCIuL0J5dGVzLmpzXCIpO1xuY29uc3QgSGV4ID0gcmVxdWlyZShcIi4vSGV4LmpzXCIpO1xuZnVuY3Rpb24ga2VjY2FrMjU2KHZhbHVlLCBvcHRpb25zID0ge30pIHtcbiAgICBjb25zdCB7IGFzID0gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyA/ICdIZXgnIDogJ0J5dGVzJyB9ID0gb3B0aW9ucztcbiAgICBjb25zdCBieXRlcyA9ICgwLCBzaGEzXzEua2VjY2FrXzI1NikoQnl0ZXMuZnJvbSh2YWx1ZSkpO1xuICAgIGlmIChhcyA9PT0gJ0J5dGVzJylcbiAgICAgICAgcmV0dXJuIGJ5dGVzO1xuICAgIHJldHVybiBIZXguZnJvbUJ5dGVzKGJ5dGVzKTtcbn1cbmZ1bmN0aW9uIHJpcGVtZDE2MCh2YWx1ZSwgb3B0aW9ucyA9IHt9KSB7XG4gICAgY29uc3QgeyBhcyA9IHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgPyAnSGV4JyA6ICdCeXRlcycgfSA9IG9wdGlvbnM7XG4gICAgY29uc3QgYnl0ZXMgPSAoMCwgcmlwZW1kMTYwXzEucmlwZW1kMTYwKShCeXRlcy5mcm9tKHZhbHVlKSk7XG4gICAgaWYgKGFzID09PSAnQnl0ZXMnKVxuICAgICAgICByZXR1cm4gYnl0ZXM7XG4gICAgcmV0dXJuIEhleC5mcm9tQnl0ZXMoYnl0ZXMpO1xufVxuZnVuY3Rpb24gc2hhMjU2KHZhbHVlLCBvcHRpb25zID0ge30pIHtcbiAgICBjb25zdCB7IGFzID0gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyA/ICdIZXgnIDogJ0J5dGVzJyB9ID0gb3B0aW9ucztcbiAgICBjb25zdCBieXRlcyA9ICgwLCBzaGEyNTZfMS5zaGEyNTYpKEJ5dGVzLmZyb20odmFsdWUpKTtcbiAgICBpZiAoYXMgPT09ICdCeXRlcycpXG4gICAgICAgIHJldHVybiBieXRlcztcbiAgICByZXR1cm4gSGV4LmZyb21CeXRlcyhieXRlcyk7XG59XG5mdW5jdGlvbiB2YWxpZGF0ZSh2YWx1ZSkge1xuICAgIHJldHVybiBIZXgudmFsaWRhdGUodmFsdWUpICYmIEhleC5zaXplKHZhbHVlKSA9PT0gMzI7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1IYXNoLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImtlY2NhazI1NiIsInJpcGVtZDE2MCIsInNoYTI1NiIsInZhbGlkYXRlIiwicmlwZW1kMTYwXzEiLCJyZXF1aXJlIiwic2hhM18xIiwic2hhMjU2XzEiLCJCeXRlcyIsIkhleCIsIm9wdGlvbnMiLCJhcyIsImJ5dGVzIiwia2VjY2FrXzI1NiIsImZyb20iLCJmcm9tQnl0ZXMiLCJzaXplIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ox/_cjs/core/Hash.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ox/_cjs/core/Hex.js":
/*!******************************************!*\
  !*** ./node_modules/ox/_cjs/core/Hex.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.SizeExceedsPaddingSizeError = exports.SliceOffsetOutOfBoundsError = exports.SizeOverflowError = exports.InvalidLengthError = exports.InvalidHexValueError = exports.InvalidHexTypeError = exports.InvalidHexBooleanError = exports.IntegerOutOfRangeError = void 0;\nexports.assert = assert;\nexports.concat = concat;\nexports.from = from;\nexports.fromBoolean = fromBoolean;\nexports.fromBytes = fromBytes;\nexports.fromNumber = fromNumber;\nexports.fromString = fromString;\nexports.isEqual = isEqual;\nexports.padLeft = padLeft;\nexports.padRight = padRight;\nexports.random = random;\nexports.slice = slice;\nexports.size = size;\nexports.trimLeft = trimLeft;\nexports.trimRight = trimRight;\nexports.toBigInt = toBigInt;\nexports.toBoolean = toBoolean;\nexports.toBytes = toBytes;\nexports.toNumber = toNumber;\nexports.toString = toString;\nexports.validate = validate;\nconst utils_1 = __webpack_require__(/*! @noble/curves/abstract/utils */ \"(ssr)/./node_modules/ox/node_modules/@noble/curves/abstract/utils.js\");\nconst Bytes = __webpack_require__(/*! ./Bytes.js */ \"(ssr)/./node_modules/ox/_cjs/core/Bytes.js\");\nconst Errors = __webpack_require__(/*! ./Errors.js */ \"(ssr)/./node_modules/ox/_cjs/core/Errors.js\");\nconst internal_bytes = __webpack_require__(/*! ./internal/bytes.js */ \"(ssr)/./node_modules/ox/_cjs/core/internal/bytes.js\");\nconst internal = __webpack_require__(/*! ./internal/hex.js */ \"(ssr)/./node_modules/ox/_cjs/core/internal/hex.js\");\nconst Json = __webpack_require__(/*! ./Json.js */ \"(ssr)/./node_modules/ox/_cjs/core/Json.js\");\nconst encoder = new TextEncoder();\nconst hexes = Array.from({\n    length: 256\n}, (_v, i)=>i.toString(16).padStart(2, \"0\"));\nfunction assert(value, options = {}) {\n    const { strict = false } = options;\n    if (!value) throw new InvalidHexTypeError(value);\n    if (typeof value !== \"string\") throw new InvalidHexTypeError(value);\n    if (strict) {\n        if (!/^0x[0-9a-fA-F]*$/.test(value)) throw new InvalidHexValueError(value);\n    }\n    if (!value.startsWith(\"0x\")) throw new InvalidHexValueError(value);\n}\nfunction concat(...values) {\n    return `0x${values.reduce((acc, x)=>acc + x.replace(\"0x\", \"\"), \"\")}`;\n}\nfunction from(value) {\n    if (value instanceof Uint8Array) return fromBytes(value);\n    if (Array.isArray(value)) return fromBytes(new Uint8Array(value));\n    return value;\n}\nfunction fromBoolean(value, options = {}) {\n    const hex = `0x${Number(value)}`;\n    if (typeof options.size === \"number\") {\n        internal.assertSize(hex, options.size);\n        return padLeft(hex, options.size);\n    }\n    return hex;\n}\nfunction fromBytes(value, options = {}) {\n    let string = \"\";\n    for(let i = 0; i < value.length; i++)string += hexes[value[i]];\n    const hex = `0x${string}`;\n    if (typeof options.size === \"number\") {\n        internal.assertSize(hex, options.size);\n        return padRight(hex, options.size);\n    }\n    return hex;\n}\nfunction fromNumber(value, options = {}) {\n    const { signed, size } = options;\n    const value_ = BigInt(value);\n    let maxValue;\n    if (size) {\n        if (signed) maxValue = (1n << BigInt(size) * 8n - 1n) - 1n;\n        else maxValue = 2n ** (BigInt(size) * 8n) - 1n;\n    } else if (typeof value === \"number\") {\n        maxValue = BigInt(Number.MAX_SAFE_INTEGER);\n    }\n    const minValue = typeof maxValue === \"bigint\" && signed ? -maxValue - 1n : 0;\n    if (maxValue && value_ > maxValue || value_ < minValue) {\n        const suffix = typeof value === \"bigint\" ? \"n\" : \"\";\n        throw new IntegerOutOfRangeError({\n            max: maxValue ? `${maxValue}${suffix}` : undefined,\n            min: `${minValue}${suffix}`,\n            signed,\n            size,\n            value: `${value}${suffix}`\n        });\n    }\n    const stringValue = (signed && value_ < 0 ? (1n << BigInt(size * 8)) + BigInt(value_) : value_).toString(16);\n    const hex = `0x${stringValue}`;\n    if (size) return padLeft(hex, size);\n    return hex;\n}\nfunction fromString(value, options = {}) {\n    return fromBytes(encoder.encode(value), options);\n}\nfunction isEqual(hexA, hexB) {\n    return (0, utils_1.equalBytes)(Bytes.fromHex(hexA), Bytes.fromHex(hexB));\n}\nfunction padLeft(value, size) {\n    return internal.pad(value, {\n        dir: \"left\",\n        size\n    });\n}\nfunction padRight(value, size) {\n    return internal.pad(value, {\n        dir: \"right\",\n        size\n    });\n}\nfunction random(length) {\n    return fromBytes(Bytes.random(length));\n}\nfunction slice(value, start, end, options = {}) {\n    const { strict } = options;\n    internal.assertStartOffset(value, start);\n    const value_ = `0x${value.replace(\"0x\", \"\").slice((start ?? 0) * 2, (end ?? value.length) * 2)}`;\n    if (strict) internal.assertEndOffset(value_, start, end);\n    return value_;\n}\nfunction size(value) {\n    return Math.ceil((value.length - 2) / 2);\n}\nfunction trimLeft(value) {\n    return internal.trim(value, {\n        dir: \"left\"\n    });\n}\nfunction trimRight(value) {\n    return internal.trim(value, {\n        dir: \"right\"\n    });\n}\nfunction toBigInt(hex, options = {}) {\n    const { signed } = options;\n    if (options.size) internal.assertSize(hex, options.size);\n    const value = BigInt(hex);\n    if (!signed) return value;\n    const size = (hex.length - 2) / 2;\n    const max_unsigned = (1n << BigInt(size) * 8n) - 1n;\n    const max_signed = max_unsigned >> 1n;\n    if (value <= max_signed) return value;\n    return value - max_unsigned - 1n;\n}\nfunction toBoolean(hex, options = {}) {\n    if (options.size) internal.assertSize(hex, options.size);\n    const hex_ = trimLeft(hex);\n    if (hex_ === \"0x\") return false;\n    if (hex_ === \"0x1\") return true;\n    throw new InvalidHexBooleanError(hex);\n}\nfunction toBytes(hex, options = {}) {\n    return Bytes.fromHex(hex, options);\n}\nfunction toNumber(hex, options = {}) {\n    const { signed, size } = options;\n    if (!signed && !size) return Number(hex);\n    return Number(toBigInt(hex, options));\n}\nfunction toString(hex, options = {}) {\n    const { size } = options;\n    let bytes = Bytes.fromHex(hex);\n    if (size) {\n        internal_bytes.assertSize(bytes, size);\n        bytes = Bytes.trimRight(bytes);\n    }\n    return new TextDecoder().decode(bytes);\n}\nfunction validate(value, options = {}) {\n    const { strict = false } = options;\n    try {\n        assert(value, {\n            strict\n        });\n        return true;\n    } catch  {\n        return false;\n    }\n}\nclass IntegerOutOfRangeError extends Errors.BaseError {\n    constructor({ max, min, signed, size, value }){\n        super(`Number \\`${value}\\` is not in safe${size ? ` ${size * 8}-bit` : \"\"}${signed ? \" signed\" : \" unsigned\"} integer range ${max ? `(\\`${min}\\` to \\`${max}\\`)` : `(above \\`${min}\\`)`}`);\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"Hex.IntegerOutOfRangeError\"\n        });\n    }\n}\nexports.IntegerOutOfRangeError = IntegerOutOfRangeError;\nclass InvalidHexBooleanError extends Errors.BaseError {\n    constructor(hex){\n        super(`Hex value \\`\"${hex}\"\\` is not a valid boolean.`, {\n            metaMessages: [\n                'The hex value must be `\"0x0\"` (false) or `\"0x1\"` (true).'\n            ]\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"Hex.InvalidHexBooleanError\"\n        });\n    }\n}\nexports.InvalidHexBooleanError = InvalidHexBooleanError;\nclass InvalidHexTypeError extends Errors.BaseError {\n    constructor(value){\n        super(`Value \\`${typeof value === \"object\" ? Json.stringify(value) : value}\\` of type \\`${typeof value}\\` is an invalid hex type.`, {\n            metaMessages: [\n                'Hex types must be represented as `\"0x${string}\"`.'\n            ]\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"Hex.InvalidHexTypeError\"\n        });\n    }\n}\nexports.InvalidHexTypeError = InvalidHexTypeError;\nclass InvalidHexValueError extends Errors.BaseError {\n    constructor(value){\n        super(`Value \\`${value}\\` is an invalid hex value.`, {\n            metaMessages: [\n                'Hex values must start with `\"0x\"` and contain only hexadecimal characters (0-9, a-f, A-F).'\n            ]\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"Hex.InvalidHexValueError\"\n        });\n    }\n}\nexports.InvalidHexValueError = InvalidHexValueError;\nclass InvalidLengthError extends Errors.BaseError {\n    constructor(value){\n        super(`Hex value \\`\"${value}\"\\` is an odd length (${value.length - 2} nibbles).`, {\n            metaMessages: [\n                \"It must be an even length.\"\n            ]\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"Hex.InvalidLengthError\"\n        });\n    }\n}\nexports.InvalidLengthError = InvalidLengthError;\nclass SizeOverflowError extends Errors.BaseError {\n    constructor({ givenSize, maxSize }){\n        super(`Size cannot exceed \\`${maxSize}\\` bytes. Given size: \\`${givenSize}\\` bytes.`);\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"Hex.SizeOverflowError\"\n        });\n    }\n}\nexports.SizeOverflowError = SizeOverflowError;\nclass SliceOffsetOutOfBoundsError extends Errors.BaseError {\n    constructor({ offset, position, size }){\n        super(`Slice ${position === \"start\" ? \"starting\" : \"ending\"} at offset \\`${offset}\\` is out-of-bounds (size: \\`${size}\\`).`);\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"Hex.SliceOffsetOutOfBoundsError\"\n        });\n    }\n}\nexports.SliceOffsetOutOfBoundsError = SliceOffsetOutOfBoundsError;\nclass SizeExceedsPaddingSizeError extends Errors.BaseError {\n    constructor({ size, targetSize, type }){\n        super(`${type.charAt(0).toUpperCase()}${type.slice(1).toLowerCase()} size (\\`${size}\\`) exceeds padding size (\\`${targetSize}\\`).`);\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"Hex.SizeExceedsPaddingSizeError\"\n        });\n    }\n}\nexports.SizeExceedsPaddingSizeError = SizeExceedsPaddingSizeError; //# sourceMappingURL=Hex.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ox/_cjs/core/Hex.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ox/_cjs/core/Json.js":
/*!*******************************************!*\
  !*** ./node_modules/ox/_cjs/core/Json.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.parse = parse;\nexports.stringify = stringify;\nconst bigIntSuffix = \"#__bigint\";\nfunction parse(string, reviver) {\n    return JSON.parse(string, (key, value_)=>{\n        const value = value_;\n        if (typeof value === \"string\" && value.endsWith(bigIntSuffix)) return BigInt(value.slice(0, -bigIntSuffix.length));\n        return typeof reviver === \"function\" ? reviver(key, value) : value;\n    });\n}\nfunction stringify(value, replacer, space) {\n    return JSON.stringify(value, (key, value)=>{\n        if (typeof replacer === \"function\") return replacer(key, value);\n        if (typeof value === \"bigint\") return value.toString() + bigIntSuffix;\n        return value;\n    }, space);\n} //# sourceMappingURL=Json.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb3gvX2Nqcy9jb3JlL0pzb24uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELGFBQWEsR0FBR0U7QUFDaEJGLGlCQUFpQixHQUFHRztBQUNwQixNQUFNQyxlQUFlO0FBQ3JCLFNBQVNGLE1BQU1HLE1BQU0sRUFBRUMsT0FBTztJQUMxQixPQUFPQyxLQUFLTCxLQUFLLENBQUNHLFFBQVEsQ0FBQ0csS0FBS0M7UUFDNUIsTUFBTVIsUUFBUVE7UUFDZCxJQUFJLE9BQU9SLFVBQVUsWUFBWUEsTUFBTVMsUUFBUSxDQUFDTixlQUM1QyxPQUFPTyxPQUFPVixNQUFNVyxLQUFLLENBQUMsR0FBRyxDQUFDUixhQUFhUyxNQUFNO1FBQ3JELE9BQU8sT0FBT1AsWUFBWSxhQUFhQSxRQUFRRSxLQUFLUCxTQUFTQTtJQUNqRTtBQUNKO0FBQ0EsU0FBU0UsVUFBVUYsS0FBSyxFQUFFYSxRQUFRLEVBQUVDLEtBQUs7SUFDckMsT0FBT1IsS0FBS0osU0FBUyxDQUFDRixPQUFPLENBQUNPLEtBQUtQO1FBQy9CLElBQUksT0FBT2EsYUFBYSxZQUNwQixPQUFPQSxTQUFTTixLQUFLUDtRQUN6QixJQUFJLE9BQU9BLFVBQVUsVUFDakIsT0FBT0EsTUFBTWUsUUFBUSxLQUFLWjtRQUM5QixPQUFPSDtJQUNYLEdBQUdjO0FBQ1AsRUFDQSxnQ0FBZ0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93c3Rvbi11aS8uL25vZGVfbW9kdWxlcy9veC9fY2pzL2NvcmUvSnNvbi5qcz9hNzZlIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5wYXJzZSA9IHBhcnNlO1xuZXhwb3J0cy5zdHJpbmdpZnkgPSBzdHJpbmdpZnk7XG5jb25zdCBiaWdJbnRTdWZmaXggPSAnI19fYmlnaW50JztcbmZ1bmN0aW9uIHBhcnNlKHN0cmluZywgcmV2aXZlcikge1xuICAgIHJldHVybiBKU09OLnBhcnNlKHN0cmluZywgKGtleSwgdmFsdWVfKSA9PiB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gdmFsdWVfO1xuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyAmJiB2YWx1ZS5lbmRzV2l0aChiaWdJbnRTdWZmaXgpKVxuICAgICAgICAgICAgcmV0dXJuIEJpZ0ludCh2YWx1ZS5zbGljZSgwLCAtYmlnSW50U3VmZml4Lmxlbmd0aCkpO1xuICAgICAgICByZXR1cm4gdHlwZW9mIHJldml2ZXIgPT09ICdmdW5jdGlvbicgPyByZXZpdmVyKGtleSwgdmFsdWUpIDogdmFsdWU7XG4gICAgfSk7XG59XG5mdW5jdGlvbiBzdHJpbmdpZnkodmFsdWUsIHJlcGxhY2VyLCBzcGFjZSkge1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh2YWx1ZSwgKGtleSwgdmFsdWUpID0+IHtcbiAgICAgICAgaWYgKHR5cGVvZiByZXBsYWNlciA9PT0gJ2Z1bmN0aW9uJylcbiAgICAgICAgICAgIHJldHVybiByZXBsYWNlcihrZXksIHZhbHVlKTtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ2JpZ2ludCcpXG4gICAgICAgICAgICByZXR1cm4gdmFsdWUudG9TdHJpbmcoKSArIGJpZ0ludFN1ZmZpeDtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH0sIHNwYWNlKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUpzb24uanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwicGFyc2UiLCJzdHJpbmdpZnkiLCJiaWdJbnRTdWZmaXgiLCJzdHJpbmciLCJyZXZpdmVyIiwiSlNPTiIsImtleSIsInZhbHVlXyIsImVuZHNXaXRoIiwiQmlnSW50Iiwic2xpY2UiLCJsZW5ndGgiLCJyZXBsYWNlciIsInNwYWNlIiwidG9TdHJpbmciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ox/_cjs/core/Json.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ox/_cjs/core/PublicKey.js":
/*!************************************************!*\
  !*** ./node_modules/ox/_cjs/core/PublicKey.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.InvalidSerializedSizeError = exports.InvalidUncompressedPrefixError = exports.InvalidCompressedPrefixError = exports.InvalidPrefixError = exports.InvalidError = void 0;\nexports.assert = assert;\nexports.compress = compress;\nexports.from = from;\nexports.fromBytes = fromBytes;\nexports.fromHex = fromHex;\nexports.toBytes = toBytes;\nexports.toHex = toHex;\nexports.validate = validate;\nconst Bytes = __webpack_require__(/*! ./Bytes.js */ \"(ssr)/./node_modules/ox/_cjs/core/Bytes.js\");\nconst Errors = __webpack_require__(/*! ./Errors.js */ \"(ssr)/./node_modules/ox/_cjs/core/Errors.js\");\nconst Hex = __webpack_require__(/*! ./Hex.js */ \"(ssr)/./node_modules/ox/_cjs/core/Hex.js\");\nconst Json = __webpack_require__(/*! ./Json.js */ \"(ssr)/./node_modules/ox/_cjs/core/Json.js\");\nfunction assert(publicKey, options = {}) {\n    const { compressed } = options;\n    const { prefix, x, y } = publicKey;\n    if (compressed === false || typeof x === \"bigint\" && typeof y === \"bigint\") {\n        if (prefix !== 4) throw new InvalidPrefixError({\n            prefix,\n            cause: new InvalidUncompressedPrefixError()\n        });\n        return;\n    }\n    if (compressed === true || typeof x === \"bigint\" && typeof y === \"undefined\") {\n        if (prefix !== 3 && prefix !== 2) throw new InvalidPrefixError({\n            prefix,\n            cause: new InvalidCompressedPrefixError()\n        });\n        return;\n    }\n    throw new InvalidError({\n        publicKey\n    });\n}\nfunction compress(publicKey) {\n    const { x, y } = publicKey;\n    return {\n        prefix: y % 2n === 0n ? 2 : 3,\n        x\n    };\n}\nfunction from(value) {\n    const publicKey = (()=>{\n        if (Hex.validate(value)) return fromHex(value);\n        if (Bytes.validate(value)) return fromBytes(value);\n        const { prefix, x, y } = value;\n        if (typeof x === \"bigint\" && typeof y === \"bigint\") return {\n            prefix: prefix ?? 0x04,\n            x,\n            y\n        };\n        return {\n            prefix,\n            x\n        };\n    })();\n    assert(publicKey);\n    return publicKey;\n}\nfunction fromBytes(publicKey) {\n    return fromHex(Hex.fromBytes(publicKey));\n}\nfunction fromHex(publicKey) {\n    if (publicKey.length !== 132 && publicKey.length !== 130 && publicKey.length !== 68) throw new InvalidSerializedSizeError({\n        publicKey\n    });\n    if (publicKey.length === 130) {\n        const x = BigInt(Hex.slice(publicKey, 0, 32));\n        const y = BigInt(Hex.slice(publicKey, 32, 64));\n        return {\n            prefix: 4,\n            x,\n            y\n        };\n    }\n    if (publicKey.length === 132) {\n        const prefix = Number(Hex.slice(publicKey, 0, 1));\n        const x = BigInt(Hex.slice(publicKey, 1, 33));\n        const y = BigInt(Hex.slice(publicKey, 33, 65));\n        return {\n            prefix,\n            x,\n            y\n        };\n    }\n    const prefix = Number(Hex.slice(publicKey, 0, 1));\n    const x = BigInt(Hex.slice(publicKey, 1, 33));\n    return {\n        prefix,\n        x\n    };\n}\nfunction toBytes(publicKey, options = {}) {\n    return Bytes.fromHex(toHex(publicKey, options));\n}\nfunction toHex(publicKey, options = {}) {\n    assert(publicKey);\n    const { prefix, x, y } = publicKey;\n    const { includePrefix = true } = options;\n    const publicKey_ = Hex.concat(includePrefix ? Hex.fromNumber(prefix, {\n        size: 1\n    }) : \"0x\", Hex.fromNumber(x, {\n        size: 32\n    }), typeof y === \"bigint\" ? Hex.fromNumber(y, {\n        size: 32\n    }) : \"0x\");\n    return publicKey_;\n}\nfunction validate(publicKey, options = {}) {\n    try {\n        assert(publicKey, options);\n        return true;\n    } catch (_error) {\n        return false;\n    }\n}\nclass InvalidError extends Errors.BaseError {\n    constructor({ publicKey }){\n        super(`Value \\`${Json.stringify(publicKey)}\\` is not a valid public key.`, {\n            metaMessages: [\n                \"Public key must contain:\",\n                \"- an `x` and `prefix` value (compressed)\",\n                \"- an `x`, `y`, and `prefix` value (uncompressed)\"\n            ]\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"PublicKey.InvalidError\"\n        });\n    }\n}\nexports.InvalidError = InvalidError;\nclass InvalidPrefixError extends Errors.BaseError {\n    constructor({ prefix, cause }){\n        super(`Prefix \"${prefix}\" is invalid.`, {\n            cause\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"PublicKey.InvalidPrefixError\"\n        });\n    }\n}\nexports.InvalidPrefixError = InvalidPrefixError;\nclass InvalidCompressedPrefixError extends Errors.BaseError {\n    constructor(){\n        super(\"Prefix must be 2 or 3 for compressed public keys.\");\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"PublicKey.InvalidCompressedPrefixError\"\n        });\n    }\n}\nexports.InvalidCompressedPrefixError = InvalidCompressedPrefixError;\nclass InvalidUncompressedPrefixError extends Errors.BaseError {\n    constructor(){\n        super(\"Prefix must be 4 for uncompressed public keys.\");\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"PublicKey.InvalidUncompressedPrefixError\"\n        });\n    }\n}\nexports.InvalidUncompressedPrefixError = InvalidUncompressedPrefixError;\nclass InvalidSerializedSizeError extends Errors.BaseError {\n    constructor({ publicKey }){\n        super(`Value \\`${publicKey}\\` is an invalid public key size.`, {\n            metaMessages: [\n                \"Expected: 33 bytes (compressed + prefix), 64 bytes (uncompressed) or 65 bytes (uncompressed + prefix).\",\n                `Received ${Hex.size(Hex.from(publicKey))} bytes.`\n            ]\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"PublicKey.InvalidSerializedSizeError\"\n        });\n    }\n}\nexports.InvalidSerializedSizeError = InvalidSerializedSizeError; //# sourceMappingURL=PublicKey.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ox/_cjs/core/PublicKey.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ox/_cjs/core/Rlp.js":
/*!******************************************!*\
  !*** ./node_modules/ox/_cjs/core/Rlp.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.toBytes = toBytes;\nexports.toHex = toHex;\nexports.to = to;\nexports.decodeRlpCursor = decodeRlpCursor;\nexports.readLength = readLength;\nexports.readList = readList;\nexports.from = from;\nexports.fromBytes = fromBytes;\nexports.fromHex = fromHex;\nconst Bytes = __webpack_require__(/*! ./Bytes.js */ \"(ssr)/./node_modules/ox/_cjs/core/Bytes.js\");\nconst Errors = __webpack_require__(/*! ./Errors.js */ \"(ssr)/./node_modules/ox/_cjs/core/Errors.js\");\nconst Hex = __webpack_require__(/*! ./Hex.js */ \"(ssr)/./node_modules/ox/_cjs/core/Hex.js\");\nconst Cursor = __webpack_require__(/*! ./internal/cursor.js */ \"(ssr)/./node_modules/ox/_cjs/core/internal/cursor.js\");\nfunction toBytes(value) {\n    return to(value, \"Bytes\");\n}\nfunction toHex(value) {\n    return to(value, \"Hex\");\n}\nfunction to(value, to) {\n    const to_ = to ?? (typeof value === \"string\" ? \"Hex\" : \"Bytes\");\n    const bytes = (()=>{\n        if (typeof value === \"string\") {\n            if (value.length > 3 && value.length % 2 !== 0) throw new Hex.InvalidLengthError(value);\n            return Bytes.fromHex(value);\n        }\n        return value;\n    })();\n    const cursor = Cursor.create(bytes, {\n        recursiveReadLimit: Number.POSITIVE_INFINITY\n    });\n    const result = decodeRlpCursor(cursor, to_);\n    return result;\n}\nfunction decodeRlpCursor(cursor, to = \"Hex\") {\n    if (cursor.bytes.length === 0) return to === \"Hex\" ? Hex.fromBytes(cursor.bytes) : cursor.bytes;\n    const prefix = cursor.readByte();\n    if (prefix < 0x80) cursor.decrementPosition(1);\n    if (prefix < 0xc0) {\n        const length = readLength(cursor, prefix, 0x80);\n        const bytes = cursor.readBytes(length);\n        return to === \"Hex\" ? Hex.fromBytes(bytes) : bytes;\n    }\n    const length = readLength(cursor, prefix, 0xc0);\n    return readList(cursor, length, to);\n}\nfunction readLength(cursor, prefix, offset) {\n    if (offset === 0x80 && prefix < 0x80) return 1;\n    if (prefix <= offset + 55) return prefix - offset;\n    if (prefix === offset + 55 + 1) return cursor.readUint8();\n    if (prefix === offset + 55 + 2) return cursor.readUint16();\n    if (prefix === offset + 55 + 3) return cursor.readUint24();\n    if (prefix === offset + 55 + 4) return cursor.readUint32();\n    throw new Errors.BaseError(\"Invalid RLP prefix\");\n}\nfunction readList(cursor, length, to) {\n    const position = cursor.position;\n    const value = [];\n    while(cursor.position - position < length)value.push(decodeRlpCursor(cursor, to));\n    return value;\n}\nfunction from(value, options) {\n    const { as } = options;\n    const encodable = getEncodable(value);\n    const cursor = Cursor.create(new Uint8Array(encodable.length));\n    encodable.encode(cursor);\n    if (as === \"Hex\") return Hex.fromBytes(cursor.bytes);\n    return cursor.bytes;\n}\nfunction fromBytes(bytes, options = {}) {\n    const { as = \"Bytes\" } = options;\n    return from(bytes, {\n        as\n    });\n}\nfunction fromHex(hex, options = {}) {\n    const { as = \"Hex\" } = options;\n    return from(hex, {\n        as\n    });\n}\nfunction getEncodable(bytes) {\n    if (Array.isArray(bytes)) return getEncodableList(bytes.map((x)=>getEncodable(x)));\n    return getEncodableBytes(bytes);\n}\nfunction getEncodableList(list) {\n    const bodyLength = list.reduce((acc, x)=>acc + x.length, 0);\n    const sizeOfBodyLength = getSizeOfLength(bodyLength);\n    const length = (()=>{\n        if (bodyLength <= 55) return 1 + bodyLength;\n        return 1 + sizeOfBodyLength + bodyLength;\n    })();\n    return {\n        length,\n        encode (cursor) {\n            if (bodyLength <= 55) {\n                cursor.pushByte(0xc0 + bodyLength);\n            } else {\n                cursor.pushByte(0xc0 + 55 + sizeOfBodyLength);\n                if (sizeOfBodyLength === 1) cursor.pushUint8(bodyLength);\n                else if (sizeOfBodyLength === 2) cursor.pushUint16(bodyLength);\n                else if (sizeOfBodyLength === 3) cursor.pushUint24(bodyLength);\n                else cursor.pushUint32(bodyLength);\n            }\n            for (const { encode } of list){\n                encode(cursor);\n            }\n        }\n    };\n}\nfunction getEncodableBytes(bytesOrHex) {\n    const bytes = typeof bytesOrHex === \"string\" ? Bytes.fromHex(bytesOrHex) : bytesOrHex;\n    const sizeOfBytesLength = getSizeOfLength(bytes.length);\n    const length = (()=>{\n        if (bytes.length === 1 && bytes[0] < 0x80) return 1;\n        if (bytes.length <= 55) return 1 + bytes.length;\n        return 1 + sizeOfBytesLength + bytes.length;\n    })();\n    return {\n        length,\n        encode (cursor) {\n            if (bytes.length === 1 && bytes[0] < 0x80) {\n                cursor.pushBytes(bytes);\n            } else if (bytes.length <= 55) {\n                cursor.pushByte(0x80 + bytes.length);\n                cursor.pushBytes(bytes);\n            } else {\n                cursor.pushByte(0x80 + 55 + sizeOfBytesLength);\n                if (sizeOfBytesLength === 1) cursor.pushUint8(bytes.length);\n                else if (sizeOfBytesLength === 2) cursor.pushUint16(bytes.length);\n                else if (sizeOfBytesLength === 3) cursor.pushUint24(bytes.length);\n                else cursor.pushUint32(bytes.length);\n                cursor.pushBytes(bytes);\n            }\n        }\n    };\n}\nfunction getSizeOfLength(length) {\n    if (length < 2 ** 8) return 1;\n    if (length < 2 ** 16) return 2;\n    if (length < 2 ** 24) return 3;\n    if (length < 2 ** 32) return 4;\n    throw new Errors.BaseError(\"Length is too large.\");\n} //# sourceMappingURL=Rlp.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ox/_cjs/core/Rlp.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ox/_cjs/core/Secp256k1.js":
/*!************************************************!*\
  !*** ./node_modules/ox/_cjs/core/Secp256k1.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.noble = void 0;\nexports.createKeyPair = createKeyPair;\nexports.getPublicKey = getPublicKey;\nexports.getSharedSecret = getSharedSecret;\nexports.randomPrivateKey = randomPrivateKey;\nexports.recoverAddress = recoverAddress;\nexports.recoverPublicKey = recoverPublicKey;\nexports.sign = sign;\nexports.verify = verify;\nconst secp256k1_1 = __webpack_require__(/*! @noble/curves/secp256k1 */ \"(ssr)/./node_modules/ox/node_modules/@noble/curves/secp256k1.js\");\nconst Address = __webpack_require__(/*! ./Address.js */ \"(ssr)/./node_modules/ox/_cjs/core/Address.js\");\nconst Bytes = __webpack_require__(/*! ./Bytes.js */ \"(ssr)/./node_modules/ox/_cjs/core/Bytes.js\");\nconst Hex = __webpack_require__(/*! ./Hex.js */ \"(ssr)/./node_modules/ox/_cjs/core/Hex.js\");\nconst Entropy = __webpack_require__(/*! ./internal/entropy.js */ \"(ssr)/./node_modules/ox/_cjs/core/internal/entropy.js\");\nconst PublicKey = __webpack_require__(/*! ./PublicKey.js */ \"(ssr)/./node_modules/ox/_cjs/core/PublicKey.js\");\nexports.noble = secp256k1_1.secp256k1;\nfunction createKeyPair(options = {}) {\n    const { as = \"Hex\" } = options;\n    const privateKey = randomPrivateKey({\n        as\n    });\n    const publicKey = getPublicKey({\n        privateKey\n    });\n    return {\n        privateKey: privateKey,\n        publicKey\n    };\n}\nfunction getPublicKey(options) {\n    const { privateKey } = options;\n    const point = secp256k1_1.secp256k1.ProjectivePoint.fromPrivateKey(Hex.from(privateKey).slice(2));\n    return PublicKey.from(point);\n}\nfunction getSharedSecret(options) {\n    const { as = \"Hex\", privateKey, publicKey } = options;\n    const point = secp256k1_1.secp256k1.ProjectivePoint.fromHex(PublicKey.toHex(publicKey).slice(2));\n    const sharedPoint = point.multiply(secp256k1_1.secp256k1.utils.normPrivateKeyToScalar(Hex.from(privateKey).slice(2)));\n    const sharedSecret = sharedPoint.toRawBytes(true);\n    if (as === \"Hex\") return Hex.fromBytes(sharedSecret);\n    return sharedSecret;\n}\nfunction randomPrivateKey(options = {}) {\n    const { as = \"Hex\" } = options;\n    const bytes = secp256k1_1.secp256k1.utils.randomPrivateKey();\n    if (as === \"Hex\") return Hex.fromBytes(bytes);\n    return bytes;\n}\nfunction recoverAddress(options) {\n    return Address.fromPublicKey(recoverPublicKey(options));\n}\nfunction recoverPublicKey(options) {\n    const { payload, signature } = options;\n    const { r, s, yParity } = signature;\n    const signature_ = new secp256k1_1.secp256k1.Signature(BigInt(r), BigInt(s)).addRecoveryBit(yParity);\n    const point = signature_.recoverPublicKey(Hex.from(payload).substring(2));\n    return PublicKey.from(point);\n}\nfunction sign(options) {\n    const { extraEntropy = Entropy.extraEntropy, hash, payload, privateKey } = options;\n    const { r, s, recovery } = secp256k1_1.secp256k1.sign(Bytes.from(payload), Bytes.from(privateKey), {\n        extraEntropy: typeof extraEntropy === \"boolean\" ? extraEntropy : Hex.from(extraEntropy).slice(2),\n        lowS: true,\n        ...hash ? {\n            prehash: true\n        } : {}\n    });\n    return {\n        r,\n        s,\n        yParity: recovery\n    };\n}\nfunction verify(options) {\n    const { address, hash, payload, publicKey, signature } = options;\n    if (address) return Address.isEqual(address, recoverAddress({\n        payload,\n        signature\n    }));\n    return secp256k1_1.secp256k1.verify(signature, Bytes.from(payload), PublicKey.toBytes(publicKey), ...hash ? [\n        {\n            prehash: true,\n            lowS: true\n        }\n    ] : []);\n} //# sourceMappingURL=Secp256k1.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ox/_cjs/core/Secp256k1.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ox/_cjs/core/Signature.js":
/*!************************************************!*\
  !*** ./node_modules/ox/_cjs/core/Signature.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.InvalidVError = exports.InvalidYParityError = exports.InvalidSError = exports.InvalidRError = exports.MissingPropertiesError = exports.InvalidSerializedSizeError = void 0;\nexports.assert = assert;\nexports.fromBytes = fromBytes;\nexports.fromHex = fromHex;\nexports.extract = extract;\nexports.from = from;\nexports.fromDerBytes = fromDerBytes;\nexports.fromDerHex = fromDerHex;\nexports.fromLegacy = fromLegacy;\nexports.fromRpc = fromRpc;\nexports.fromTuple = fromTuple;\nexports.toBytes = toBytes;\nexports.toHex = toHex;\nexports.toDerBytes = toDerBytes;\nexports.toDerHex = toDerHex;\nexports.toLegacy = toLegacy;\nexports.toRpc = toRpc;\nexports.toTuple = toTuple;\nexports.validate = validate;\nexports.vToYParity = vToYParity;\nexports.yParityToV = yParityToV;\nconst secp256k1_1 = __webpack_require__(/*! @noble/curves/secp256k1 */ \"(ssr)/./node_modules/ox/node_modules/@noble/curves/secp256k1.js\");\nconst Bytes = __webpack_require__(/*! ./Bytes.js */ \"(ssr)/./node_modules/ox/_cjs/core/Bytes.js\");\nconst Errors = __webpack_require__(/*! ./Errors.js */ \"(ssr)/./node_modules/ox/_cjs/core/Errors.js\");\nconst Hex = __webpack_require__(/*! ./Hex.js */ \"(ssr)/./node_modules/ox/_cjs/core/Hex.js\");\nconst Json = __webpack_require__(/*! ./Json.js */ \"(ssr)/./node_modules/ox/_cjs/core/Json.js\");\nconst Solidity = __webpack_require__(/*! ./Solidity.js */ \"(ssr)/./node_modules/ox/_cjs/core/Solidity.js\");\nfunction assert(signature, options = {}) {\n    const { recovered } = options;\n    if (typeof signature.r === \"undefined\") throw new MissingPropertiesError({\n        signature\n    });\n    if (typeof signature.s === \"undefined\") throw new MissingPropertiesError({\n        signature\n    });\n    if (recovered && typeof signature.yParity === \"undefined\") throw new MissingPropertiesError({\n        signature\n    });\n    if (signature.r < 0n || signature.r > Solidity.maxUint256) throw new InvalidRError({\n        value: signature.r\n    });\n    if (signature.s < 0n || signature.s > Solidity.maxUint256) throw new InvalidSError({\n        value: signature.s\n    });\n    if (typeof signature.yParity === \"number\" && signature.yParity !== 0 && signature.yParity !== 1) throw new InvalidYParityError({\n        value: signature.yParity\n    });\n}\nfunction fromBytes(signature) {\n    return fromHex(Hex.fromBytes(signature));\n}\nfunction fromHex(signature) {\n    if (signature.length !== 130 && signature.length !== 132) throw new InvalidSerializedSizeError({\n        signature\n    });\n    const r = BigInt(Hex.slice(signature, 0, 32));\n    const s = BigInt(Hex.slice(signature, 32, 64));\n    const yParity = (()=>{\n        const yParity = Number(`0x${signature.slice(130)}`);\n        if (Number.isNaN(yParity)) return undefined;\n        try {\n            return vToYParity(yParity);\n        } catch  {\n            throw new InvalidYParityError({\n                value: yParity\n            });\n        }\n    })();\n    if (typeof yParity === \"undefined\") return {\n        r,\n        s\n    };\n    return {\n        r,\n        s,\n        yParity\n    };\n}\nfunction extract(value) {\n    if (typeof value.r === \"undefined\") return undefined;\n    if (typeof value.s === \"undefined\") return undefined;\n    return from(value);\n}\nfunction from(signature) {\n    const signature_ = (()=>{\n        if (typeof signature === \"string\") return fromHex(signature);\n        if (signature instanceof Uint8Array) return fromBytes(signature);\n        if (typeof signature.r === \"string\") return fromRpc(signature);\n        if (signature.v) return fromLegacy(signature);\n        return {\n            r: signature.r,\n            s: signature.s,\n            ...typeof signature.yParity !== \"undefined\" ? {\n                yParity: signature.yParity\n            } : {}\n        };\n    })();\n    assert(signature_);\n    return signature_;\n}\nfunction fromDerBytes(signature) {\n    return fromDerHex(Hex.fromBytes(signature));\n}\nfunction fromDerHex(signature) {\n    const { r, s } = secp256k1_1.secp256k1.Signature.fromDER(Hex.from(signature).slice(2));\n    return {\n        r,\n        s\n    };\n}\nfunction fromLegacy(signature) {\n    return {\n        r: signature.r,\n        s: signature.s,\n        yParity: vToYParity(signature.v)\n    };\n}\nfunction fromRpc(signature) {\n    const yParity = (()=>{\n        const v = signature.v ? Number(signature.v) : undefined;\n        let yParity = signature.yParity ? Number(signature.yParity) : undefined;\n        if (typeof v === \"number\" && typeof yParity !== \"number\") yParity = vToYParity(v);\n        if (typeof yParity !== \"number\") throw new InvalidYParityError({\n            value: signature.yParity\n        });\n        return yParity;\n    })();\n    return {\n        r: BigInt(signature.r),\n        s: BigInt(signature.s),\n        yParity\n    };\n}\nfunction fromTuple(tuple) {\n    const [yParity, r, s] = tuple;\n    return from({\n        r: r === \"0x\" ? 0n : BigInt(r),\n        s: s === \"0x\" ? 0n : BigInt(s),\n        yParity: yParity === \"0x\" ? 0 : Number(yParity)\n    });\n}\nfunction toBytes(signature) {\n    return Bytes.fromHex(toHex(signature));\n}\nfunction toHex(signature) {\n    assert(signature);\n    const r = signature.r;\n    const s = signature.s;\n    const signature_ = Hex.concat(Hex.fromNumber(r, {\n        size: 32\n    }), Hex.fromNumber(s, {\n        size: 32\n    }), typeof signature.yParity === \"number\" ? Hex.fromNumber(yParityToV(signature.yParity), {\n        size: 1\n    }) : \"0x\");\n    return signature_;\n}\nfunction toDerBytes(signature) {\n    const sig = new secp256k1_1.secp256k1.Signature(signature.r, signature.s);\n    return sig.toDERRawBytes();\n}\nfunction toDerHex(signature) {\n    const sig = new secp256k1_1.secp256k1.Signature(signature.r, signature.s);\n    return `0x${sig.toDERHex()}`;\n}\nfunction toLegacy(signature) {\n    return {\n        r: signature.r,\n        s: signature.s,\n        v: yParityToV(signature.yParity)\n    };\n}\nfunction toRpc(signature) {\n    const { r, s, yParity } = signature;\n    return {\n        r: Hex.fromNumber(r, {\n            size: 32\n        }),\n        s: Hex.fromNumber(s, {\n            size: 32\n        }),\n        yParity: yParity === 0 ? \"0x0\" : \"0x1\"\n    };\n}\nfunction toTuple(signature) {\n    const { r, s, yParity } = signature;\n    return [\n        yParity ? \"0x01\" : \"0x\",\n        r === 0n ? \"0x\" : Hex.trimLeft(Hex.fromNumber(r)),\n        s === 0n ? \"0x\" : Hex.trimLeft(Hex.fromNumber(s))\n    ];\n}\nfunction validate(signature, options = {}) {\n    try {\n        assert(signature, options);\n        return true;\n    } catch  {\n        return false;\n    }\n}\nfunction vToYParity(v) {\n    if (v === 0 || v === 27) return 0;\n    if (v === 1 || v === 28) return 1;\n    if (v >= 35) return v % 2 === 0 ? 1 : 0;\n    throw new InvalidVError({\n        value: v\n    });\n}\nfunction yParityToV(yParity) {\n    if (yParity === 0) return 27;\n    if (yParity === 1) return 28;\n    throw new InvalidYParityError({\n        value: yParity\n    });\n}\nclass InvalidSerializedSizeError extends Errors.BaseError {\n    constructor({ signature }){\n        super(`Value \\`${signature}\\` is an invalid signature size.`, {\n            metaMessages: [\n                \"Expected: 64 bytes or 65 bytes.\",\n                `Received ${Hex.size(Hex.from(signature))} bytes.`\n            ]\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"Signature.InvalidSerializedSizeError\"\n        });\n    }\n}\nexports.InvalidSerializedSizeError = InvalidSerializedSizeError;\nclass MissingPropertiesError extends Errors.BaseError {\n    constructor({ signature }){\n        super(`Signature \\`${Json.stringify(signature)}\\` is missing either an \\`r\\`, \\`s\\`, or \\`yParity\\` property.`);\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"Signature.MissingPropertiesError\"\n        });\n    }\n}\nexports.MissingPropertiesError = MissingPropertiesError;\nclass InvalidRError extends Errors.BaseError {\n    constructor({ value }){\n        super(`Value \\`${value}\\` is an invalid r value. r must be a positive integer less than 2^256.`);\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"Signature.InvalidRError\"\n        });\n    }\n}\nexports.InvalidRError = InvalidRError;\nclass InvalidSError extends Errors.BaseError {\n    constructor({ value }){\n        super(`Value \\`${value}\\` is an invalid s value. s must be a positive integer less than 2^256.`);\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"Signature.InvalidSError\"\n        });\n    }\n}\nexports.InvalidSError = InvalidSError;\nclass InvalidYParityError extends Errors.BaseError {\n    constructor({ value }){\n        super(`Value \\`${value}\\` is an invalid y-parity value. Y-parity must be 0 or 1.`);\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"Signature.InvalidYParityError\"\n        });\n    }\n}\nexports.InvalidYParityError = InvalidYParityError;\nclass InvalidVError extends Errors.BaseError {\n    constructor({ value }){\n        super(`Value \\`${value}\\` is an invalid v value. v must be 27, 28 or >=35.`);\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"Signature.InvalidVError\"\n        });\n    }\n}\nexports.InvalidVError = InvalidVError; //# sourceMappingURL=Signature.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ox/_cjs/core/Signature.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ox/_cjs/core/Solidity.js":
/*!***********************************************!*\
  !*** ./node_modules/ox/_cjs/core/Solidity.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.minInt120 = exports.minInt112 = exports.minInt104 = exports.minInt96 = exports.minInt88 = exports.minInt80 = exports.minInt72 = exports.minInt64 = exports.minInt56 = exports.minInt48 = exports.minInt40 = exports.minInt32 = exports.minInt24 = exports.minInt16 = exports.minInt8 = exports.maxInt256 = exports.maxInt248 = exports.maxInt240 = exports.maxInt232 = exports.maxInt224 = exports.maxInt216 = exports.maxInt208 = exports.maxInt200 = exports.maxInt192 = exports.maxInt184 = exports.maxInt176 = exports.maxInt168 = exports.maxInt160 = exports.maxInt152 = exports.maxInt144 = exports.maxInt136 = exports.maxInt128 = exports.maxInt120 = exports.maxInt112 = exports.maxInt104 = exports.maxInt96 = exports.maxInt88 = exports.maxInt80 = exports.maxInt72 = exports.maxInt64 = exports.maxInt56 = exports.maxInt48 = exports.maxInt40 = exports.maxInt32 = exports.maxInt24 = exports.maxInt16 = exports.maxInt8 = exports.integerRegex = exports.bytesRegex = exports.arrayRegex = void 0;\nexports.maxUint256 = exports.maxUint248 = exports.maxUint240 = exports.maxUint232 = exports.maxUint224 = exports.maxUint216 = exports.maxUint208 = exports.maxUint200 = exports.maxUint192 = exports.maxUint184 = exports.maxUint176 = exports.maxUint168 = exports.maxUint160 = exports.maxUint152 = exports.maxUint144 = exports.maxUint136 = exports.maxUint128 = exports.maxUint120 = exports.maxUint112 = exports.maxUint104 = exports.maxUint96 = exports.maxUint88 = exports.maxUint80 = exports.maxUint72 = exports.maxUint64 = exports.maxUint56 = exports.maxUint48 = exports.maxUint40 = exports.maxUint32 = exports.maxUint24 = exports.maxUint16 = exports.maxUint8 = exports.minInt256 = exports.minInt248 = exports.minInt240 = exports.minInt232 = exports.minInt224 = exports.minInt216 = exports.minInt208 = exports.minInt200 = exports.minInt192 = exports.minInt184 = exports.minInt176 = exports.minInt168 = exports.minInt160 = exports.minInt152 = exports.minInt144 = exports.minInt136 = exports.minInt128 = void 0;\nexports.arrayRegex = /^(.*)\\[([0-9]*)\\]$/;\nexports.bytesRegex = /^bytes([1-9]|1[0-9]|2[0-9]|3[0-2])?$/;\nexports.integerRegex = /^(u?int)(8|16|24|32|40|48|56|64|72|80|88|96|104|112|120|128|136|144|152|160|168|176|184|192|200|208|216|224|232|240|248|256)?$/;\nexports.maxInt8 = 2n ** (8n - 1n) - 1n;\nexports.maxInt16 = 2n ** (16n - 1n) - 1n;\nexports.maxInt24 = 2n ** (24n - 1n) - 1n;\nexports.maxInt32 = 2n ** (32n - 1n) - 1n;\nexports.maxInt40 = 2n ** (40n - 1n) - 1n;\nexports.maxInt48 = 2n ** (48n - 1n) - 1n;\nexports.maxInt56 = 2n ** (56n - 1n) - 1n;\nexports.maxInt64 = 2n ** (64n - 1n) - 1n;\nexports.maxInt72 = 2n ** (72n - 1n) - 1n;\nexports.maxInt80 = 2n ** (80n - 1n) - 1n;\nexports.maxInt88 = 2n ** (88n - 1n) - 1n;\nexports.maxInt96 = 2n ** (96n - 1n) - 1n;\nexports.maxInt104 = 2n ** (104n - 1n) - 1n;\nexports.maxInt112 = 2n ** (112n - 1n) - 1n;\nexports.maxInt120 = 2n ** (120n - 1n) - 1n;\nexports.maxInt128 = 2n ** (128n - 1n) - 1n;\nexports.maxInt136 = 2n ** (136n - 1n) - 1n;\nexports.maxInt144 = 2n ** (144n - 1n) - 1n;\nexports.maxInt152 = 2n ** (152n - 1n) - 1n;\nexports.maxInt160 = 2n ** (160n - 1n) - 1n;\nexports.maxInt168 = 2n ** (168n - 1n) - 1n;\nexports.maxInt176 = 2n ** (176n - 1n) - 1n;\nexports.maxInt184 = 2n ** (184n - 1n) - 1n;\nexports.maxInt192 = 2n ** (192n - 1n) - 1n;\nexports.maxInt200 = 2n ** (200n - 1n) - 1n;\nexports.maxInt208 = 2n ** (208n - 1n) - 1n;\nexports.maxInt216 = 2n ** (216n - 1n) - 1n;\nexports.maxInt224 = 2n ** (224n - 1n) - 1n;\nexports.maxInt232 = 2n ** (232n - 1n) - 1n;\nexports.maxInt240 = 2n ** (240n - 1n) - 1n;\nexports.maxInt248 = 2n ** (248n - 1n) - 1n;\nexports.maxInt256 = 2n ** (256n - 1n) - 1n;\nexports.minInt8 = -(2n ** (8n - 1n));\nexports.minInt16 = -(2n ** (16n - 1n));\nexports.minInt24 = -(2n ** (24n - 1n));\nexports.minInt32 = -(2n ** (32n - 1n));\nexports.minInt40 = -(2n ** (40n - 1n));\nexports.minInt48 = -(2n ** (48n - 1n));\nexports.minInt56 = -(2n ** (56n - 1n));\nexports.minInt64 = -(2n ** (64n - 1n));\nexports.minInt72 = -(2n ** (72n - 1n));\nexports.minInt80 = -(2n ** (80n - 1n));\nexports.minInt88 = -(2n ** (88n - 1n));\nexports.minInt96 = -(2n ** (96n - 1n));\nexports.minInt104 = -(2n ** (104n - 1n));\nexports.minInt112 = -(2n ** (112n - 1n));\nexports.minInt120 = -(2n ** (120n - 1n));\nexports.minInt128 = -(2n ** (128n - 1n));\nexports.minInt136 = -(2n ** (136n - 1n));\nexports.minInt144 = -(2n ** (144n - 1n));\nexports.minInt152 = -(2n ** (152n - 1n));\nexports.minInt160 = -(2n ** (160n - 1n));\nexports.minInt168 = -(2n ** (168n - 1n));\nexports.minInt176 = -(2n ** (176n - 1n));\nexports.minInt184 = -(2n ** (184n - 1n));\nexports.minInt192 = -(2n ** (192n - 1n));\nexports.minInt200 = -(2n ** (200n - 1n));\nexports.minInt208 = -(2n ** (208n - 1n));\nexports.minInt216 = -(2n ** (216n - 1n));\nexports.minInt224 = -(2n ** (224n - 1n));\nexports.minInt232 = -(2n ** (232n - 1n));\nexports.minInt240 = -(2n ** (240n - 1n));\nexports.minInt248 = -(2n ** (248n - 1n));\nexports.minInt256 = -(2n ** (256n - 1n));\nexports.maxUint8 = 2n ** 8n - 1n;\nexports.maxUint16 = 2n ** 16n - 1n;\nexports.maxUint24 = 2n ** 24n - 1n;\nexports.maxUint32 = 2n ** 32n - 1n;\nexports.maxUint40 = 2n ** 40n - 1n;\nexports.maxUint48 = 2n ** 48n - 1n;\nexports.maxUint56 = 2n ** 56n - 1n;\nexports.maxUint64 = 2n ** 64n - 1n;\nexports.maxUint72 = 2n ** 72n - 1n;\nexports.maxUint80 = 2n ** 80n - 1n;\nexports.maxUint88 = 2n ** 88n - 1n;\nexports.maxUint96 = 2n ** 96n - 1n;\nexports.maxUint104 = 2n ** 104n - 1n;\nexports.maxUint112 = 2n ** 112n - 1n;\nexports.maxUint120 = 2n ** 120n - 1n;\nexports.maxUint128 = 2n ** 128n - 1n;\nexports.maxUint136 = 2n ** 136n - 1n;\nexports.maxUint144 = 2n ** 144n - 1n;\nexports.maxUint152 = 2n ** 152n - 1n;\nexports.maxUint160 = 2n ** 160n - 1n;\nexports.maxUint168 = 2n ** 168n - 1n;\nexports.maxUint176 = 2n ** 176n - 1n;\nexports.maxUint184 = 2n ** 184n - 1n;\nexports.maxUint192 = 2n ** 192n - 1n;\nexports.maxUint200 = 2n ** 200n - 1n;\nexports.maxUint208 = 2n ** 208n - 1n;\nexports.maxUint216 = 2n ** 216n - 1n;\nexports.maxUint224 = 2n ** 224n - 1n;\nexports.maxUint232 = 2n ** 232n - 1n;\nexports.maxUint240 = 2n ** 240n - 1n;\nexports.maxUint248 = 2n ** 248n - 1n;\nexports.maxUint256 = 2n ** 256n - 1n; //# sourceMappingURL=Solidity.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ox/_cjs/core/Solidity.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ox/_cjs/core/Withdrawal.js":
/*!*************************************************!*\
  !*** ./node_modules/ox/_cjs/core/Withdrawal.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.fromRpc = fromRpc;\nexports.toRpc = toRpc;\nconst Hex = __webpack_require__(/*! ./Hex.js */ \"(ssr)/./node_modules/ox/_cjs/core/Hex.js\");\nfunction fromRpc(withdrawal) {\n    return {\n        ...withdrawal,\n        amount: BigInt(withdrawal.amount),\n        index: Number(withdrawal.index),\n        validatorIndex: Number(withdrawal.validatorIndex)\n    };\n}\nfunction toRpc(withdrawal) {\n    return {\n        address: withdrawal.address,\n        amount: Hex.fromNumber(withdrawal.amount),\n        index: Hex.fromNumber(withdrawal.index),\n        validatorIndex: Hex.fromNumber(withdrawal.validatorIndex)\n    };\n} //# sourceMappingURL=Withdrawal.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb3gvX2Nqcy9jb3JlL1dpdGhkcmF3YWwuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELGVBQWUsR0FBR0U7QUFDbEJGLGFBQWEsR0FBR0c7QUFDaEIsTUFBTUMsTUFBTUMsbUJBQU9BLENBQUMsMERBQVU7QUFDOUIsU0FBU0gsUUFBUUksVUFBVTtJQUN2QixPQUFPO1FBQ0gsR0FBR0EsVUFBVTtRQUNiQyxRQUFRQyxPQUFPRixXQUFXQyxNQUFNO1FBQ2hDRSxPQUFPQyxPQUFPSixXQUFXRyxLQUFLO1FBQzlCRSxnQkFBZ0JELE9BQU9KLFdBQVdLLGNBQWM7SUFDcEQ7QUFDSjtBQUNBLFNBQVNSLE1BQU1HLFVBQVU7SUFDckIsT0FBTztRQUNITSxTQUFTTixXQUFXTSxPQUFPO1FBQzNCTCxRQUFRSCxJQUFJUyxVQUFVLENBQUNQLFdBQVdDLE1BQU07UUFDeENFLE9BQU9MLElBQUlTLFVBQVUsQ0FBQ1AsV0FBV0csS0FBSztRQUN0Q0UsZ0JBQWdCUCxJQUFJUyxVQUFVLENBQUNQLFdBQVdLLGNBQWM7SUFDNUQ7QUFDSixFQUNBLHNDQUFzQyIsInNvdXJjZXMiOlsid2VicGFjazovL3dzdG9uLXVpLy4vbm9kZV9tb2R1bGVzL294L19janMvY29yZS9XaXRoZHJhd2FsLmpzPzJiOTciXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmZyb21ScGMgPSBmcm9tUnBjO1xuZXhwb3J0cy50b1JwYyA9IHRvUnBjO1xuY29uc3QgSGV4ID0gcmVxdWlyZShcIi4vSGV4LmpzXCIpO1xuZnVuY3Rpb24gZnJvbVJwYyh3aXRoZHJhd2FsKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgLi4ud2l0aGRyYXdhbCxcbiAgICAgICAgYW1vdW50OiBCaWdJbnQod2l0aGRyYXdhbC5hbW91bnQpLFxuICAgICAgICBpbmRleDogTnVtYmVyKHdpdGhkcmF3YWwuaW5kZXgpLFxuICAgICAgICB2YWxpZGF0b3JJbmRleDogTnVtYmVyKHdpdGhkcmF3YWwudmFsaWRhdG9ySW5kZXgpLFxuICAgIH07XG59XG5mdW5jdGlvbiB0b1JwYyh3aXRoZHJhd2FsKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgYWRkcmVzczogd2l0aGRyYXdhbC5hZGRyZXNzLFxuICAgICAgICBhbW91bnQ6IEhleC5mcm9tTnVtYmVyKHdpdGhkcmF3YWwuYW1vdW50KSxcbiAgICAgICAgaW5kZXg6IEhleC5mcm9tTnVtYmVyKHdpdGhkcmF3YWwuaW5kZXgpLFxuICAgICAgICB2YWxpZGF0b3JJbmRleDogSGV4LmZyb21OdW1iZXIod2l0aGRyYXdhbC52YWxpZGF0b3JJbmRleCksXG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVdpdGhkcmF3YWwuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZnJvbVJwYyIsInRvUnBjIiwiSGV4IiwicmVxdWlyZSIsIndpdGhkcmF3YWwiLCJhbW91bnQiLCJCaWdJbnQiLCJpbmRleCIsIk51bWJlciIsInZhbGlkYXRvckluZGV4IiwiYWRkcmVzcyIsImZyb21OdW1iZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ox/_cjs/core/Withdrawal.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ox/_cjs/core/internal/abiItem.js":
/*!*******************************************************!*\
  !*** ./node_modules/ox/_cjs/core/internal/abiItem.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.normalizeSignature = normalizeSignature;\nexports.isArgOfType = isArgOfType;\nexports.getAmbiguousTypes = getAmbiguousTypes;\nconst Address = __webpack_require__(/*! ../Address.js */ \"(ssr)/./node_modules/ox/_cjs/core/Address.js\");\nconst Errors = __webpack_require__(/*! ../Errors.js */ \"(ssr)/./node_modules/ox/_cjs/core/Errors.js\");\nfunction normalizeSignature(signature) {\n    let active = true;\n    let current = \"\";\n    let level = 0;\n    let result = \"\";\n    let valid = false;\n    for(let i = 0; i < signature.length; i++){\n        const char = signature[i];\n        if ([\n            \"(\",\n            \")\",\n            \",\"\n        ].includes(char)) active = true;\n        if (char === \"(\") level++;\n        if (char === \")\") level--;\n        if (!active) continue;\n        if (level === 0) {\n            if (char === \" \" && [\n                \"event\",\n                \"function\",\n                \"error\",\n                \"\"\n            ].includes(result)) result = \"\";\n            else {\n                result += char;\n                if (char === \")\") {\n                    valid = true;\n                    break;\n                }\n            }\n            continue;\n        }\n        if (char === \" \") {\n            if (signature[i - 1] !== \",\" && current !== \",\" && current !== \",(\") {\n                current = \"\";\n                active = false;\n            }\n            continue;\n        }\n        result += char;\n        current += char;\n    }\n    if (!valid) throw new Errors.BaseError(\"Unable to normalize signature.\");\n    return result;\n}\nfunction isArgOfType(arg, abiParameter) {\n    const argType = typeof arg;\n    const abiParameterType = abiParameter.type;\n    switch(abiParameterType){\n        case \"address\":\n            return Address.validate(arg, {\n                strict: false\n            });\n        case \"bool\":\n            return argType === \"boolean\";\n        case \"function\":\n            return argType === \"string\";\n        case \"string\":\n            return argType === \"string\";\n        default:\n            {\n                if (abiParameterType === \"tuple\" && \"components\" in abiParameter) return Object.values(abiParameter.components).every((component, index)=>{\n                    return isArgOfType(Object.values(arg)[index], component);\n                });\n                if (/^u?int(8|16|24|32|40|48|56|64|72|80|88|96|104|112|120|128|136|144|152|160|168|176|184|192|200|208|216|224|232|240|248|256)?$/.test(abiParameterType)) return argType === \"number\" || argType === \"bigint\";\n                if (/^bytes([1-9]|1[0-9]|2[0-9]|3[0-2])?$/.test(abiParameterType)) return argType === \"string\" || arg instanceof Uint8Array;\n                if (/[a-z]+[1-9]{0,3}(\\[[0-9]{0,}\\])+$/.test(abiParameterType)) {\n                    return Array.isArray(arg) && arg.every((x)=>isArgOfType(x, {\n                            ...abiParameter,\n                            type: abiParameterType.replace(/(\\[[0-9]{0,}\\])$/, \"\")\n                        }));\n                }\n                return false;\n            }\n    }\n}\nfunction getAmbiguousTypes(sourceParameters, targetParameters, args) {\n    for(const parameterIndex in sourceParameters){\n        const sourceParameter = sourceParameters[parameterIndex];\n        const targetParameter = targetParameters[parameterIndex];\n        if (sourceParameter.type === \"tuple\" && targetParameter.type === \"tuple\" && \"components\" in sourceParameter && \"components\" in targetParameter) return getAmbiguousTypes(sourceParameter.components, targetParameter.components, args[parameterIndex]);\n        const types = [\n            sourceParameter.type,\n            targetParameter.type\n        ];\n        const ambiguous = (()=>{\n            if (types.includes(\"address\") && types.includes(\"bytes20\")) return true;\n            if (types.includes(\"address\") && types.includes(\"string\")) return Address.validate(args[parameterIndex], {\n                strict: false\n            });\n            if (types.includes(\"address\") && types.includes(\"bytes\")) return Address.validate(args[parameterIndex], {\n                strict: false\n            });\n            return false;\n        })();\n        if (ambiguous) return types;\n    }\n    return;\n} //# sourceMappingURL=abiItem.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ox/_cjs/core/internal/abiItem.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ox/_cjs/core/internal/abiParameters.js":
/*!*************************************************************!*\
  !*** ./node_modules/ox/_cjs/core/internal/abiParameters.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.decodeParameter = decodeParameter;\nexports.decodeAddress = decodeAddress;\nexports.decodeArray = decodeArray;\nexports.decodeBool = decodeBool;\nexports.decodeBytes = decodeBytes;\nexports.decodeNumber = decodeNumber;\nexports.decodeTuple = decodeTuple;\nexports.decodeString = decodeString;\nexports.prepareParameters = prepareParameters;\nexports.prepareParameter = prepareParameter;\nexports.encode = encode;\nexports.encodeAddress = encodeAddress;\nexports.encodeArray = encodeArray;\nexports.encodeBytes = encodeBytes;\nexports.encodeBoolean = encodeBoolean;\nexports.encodeNumber = encodeNumber;\nexports.encodeString = encodeString;\nexports.encodeTuple = encodeTuple;\nexports.getArrayComponents = getArrayComponents;\nexports.hasDynamicChild = hasDynamicChild;\nconst AbiParameters = __webpack_require__(/*! ../AbiParameters.js */ \"(ssr)/./node_modules/ox/_cjs/core/AbiParameters.js\");\nconst Address = __webpack_require__(/*! ../Address.js */ \"(ssr)/./node_modules/ox/_cjs/core/Address.js\");\nconst Bytes = __webpack_require__(/*! ../Bytes.js */ \"(ssr)/./node_modules/ox/_cjs/core/Bytes.js\");\nconst Errors = __webpack_require__(/*! ../Errors.js */ \"(ssr)/./node_modules/ox/_cjs/core/Errors.js\");\nconst Hex = __webpack_require__(/*! ../Hex.js */ \"(ssr)/./node_modules/ox/_cjs/core/Hex.js\");\nconst Solidity_js_1 = __webpack_require__(/*! ../Solidity.js */ \"(ssr)/./node_modules/ox/_cjs/core/Solidity.js\");\nfunction decodeParameter(cursor, param, options) {\n    const { checksumAddress, staticPosition } = options;\n    const arrayComponents = getArrayComponents(param.type);\n    if (arrayComponents) {\n        const [length, type] = arrayComponents;\n        return decodeArray(cursor, {\n            ...param,\n            type\n        }, {\n            checksumAddress,\n            length,\n            staticPosition\n        });\n    }\n    if (param.type === \"tuple\") return decodeTuple(cursor, param, {\n        checksumAddress,\n        staticPosition\n    });\n    if (param.type === \"address\") return decodeAddress(cursor, {\n        checksum: checksumAddress\n    });\n    if (param.type === \"bool\") return decodeBool(cursor);\n    if (param.type.startsWith(\"bytes\")) return decodeBytes(cursor, param, {\n        staticPosition\n    });\n    if (param.type.startsWith(\"uint\") || param.type.startsWith(\"int\")) return decodeNumber(cursor, param);\n    if (param.type === \"string\") return decodeString(cursor, {\n        staticPosition\n    });\n    throw new AbiParameters.InvalidTypeError(param.type);\n}\nconst sizeOfLength = 32;\nconst sizeOfOffset = 32;\nfunction decodeAddress(cursor, options = {}) {\n    const { checksum = false } = options;\n    const value = cursor.readBytes(32);\n    const wrap = (address)=>checksum ? Address.checksum(address) : address;\n    return [\n        wrap(Hex.fromBytes(Bytes.slice(value, -20))),\n        32\n    ];\n}\nfunction decodeArray(cursor, param, options) {\n    const { checksumAddress, length, staticPosition } = options;\n    if (!length) {\n        const offset = Bytes.toNumber(cursor.readBytes(sizeOfOffset));\n        const start = staticPosition + offset;\n        const startOfData = start + sizeOfLength;\n        cursor.setPosition(start);\n        const length = Bytes.toNumber(cursor.readBytes(sizeOfLength));\n        const dynamicChild = hasDynamicChild(param);\n        let consumed = 0;\n        const value = [];\n        for(let i = 0; i < length; ++i){\n            cursor.setPosition(startOfData + (dynamicChild ? i * 32 : consumed));\n            const [data, consumed_] = decodeParameter(cursor, param, {\n                checksumAddress,\n                staticPosition: startOfData\n            });\n            consumed += consumed_;\n            value.push(data);\n        }\n        cursor.setPosition(staticPosition + 32);\n        return [\n            value,\n            32\n        ];\n    }\n    if (hasDynamicChild(param)) {\n        const offset = Bytes.toNumber(cursor.readBytes(sizeOfOffset));\n        const start = staticPosition + offset;\n        const value = [];\n        for(let i = 0; i < length; ++i){\n            cursor.setPosition(start + i * 32);\n            const [data] = decodeParameter(cursor, param, {\n                checksumAddress,\n                staticPosition: start\n            });\n            value.push(data);\n        }\n        cursor.setPosition(staticPosition + 32);\n        return [\n            value,\n            32\n        ];\n    }\n    let consumed = 0;\n    const value = [];\n    for(let i = 0; i < length; ++i){\n        const [data, consumed_] = decodeParameter(cursor, param, {\n            checksumAddress,\n            staticPosition: staticPosition + consumed\n        });\n        consumed += consumed_;\n        value.push(data);\n    }\n    return [\n        value,\n        consumed\n    ];\n}\nfunction decodeBool(cursor) {\n    return [\n        Bytes.toBoolean(cursor.readBytes(32), {\n            size: 32\n        }),\n        32\n    ];\n}\nfunction decodeBytes(cursor, param, { staticPosition }) {\n    const [_, size] = param.type.split(\"bytes\");\n    if (!size) {\n        const offset = Bytes.toNumber(cursor.readBytes(32));\n        cursor.setPosition(staticPosition + offset);\n        const length = Bytes.toNumber(cursor.readBytes(32));\n        if (length === 0) {\n            cursor.setPosition(staticPosition + 32);\n            return [\n                \"0x\",\n                32\n            ];\n        }\n        const data = cursor.readBytes(length);\n        cursor.setPosition(staticPosition + 32);\n        return [\n            Hex.fromBytes(data),\n            32\n        ];\n    }\n    const value = Hex.fromBytes(cursor.readBytes(Number.parseInt(size, 10), 32));\n    return [\n        value,\n        32\n    ];\n}\nfunction decodeNumber(cursor, param) {\n    const signed = param.type.startsWith(\"int\");\n    const size = Number.parseInt(param.type.split(\"int\")[1] || \"256\", 10);\n    const value = cursor.readBytes(32);\n    return [\n        size > 48 ? Bytes.toBigInt(value, {\n            signed\n        }) : Bytes.toNumber(value, {\n            signed\n        }),\n        32\n    ];\n}\nfunction decodeTuple(cursor, param, options) {\n    const { checksumAddress, staticPosition } = options;\n    const hasUnnamedChild = param.components.length === 0 || param.components.some(({ name })=>!name);\n    const value = hasUnnamedChild ? [] : {};\n    let consumed = 0;\n    if (hasDynamicChild(param)) {\n        const offset = Bytes.toNumber(cursor.readBytes(sizeOfOffset));\n        const start = staticPosition + offset;\n        for(let i = 0; i < param.components.length; ++i){\n            const component = param.components[i];\n            cursor.setPosition(start + consumed);\n            const [data, consumed_] = decodeParameter(cursor, component, {\n                checksumAddress,\n                staticPosition: start\n            });\n            consumed += consumed_;\n            value[hasUnnamedChild ? i : component?.name] = data;\n        }\n        cursor.setPosition(staticPosition + 32);\n        return [\n            value,\n            32\n        ];\n    }\n    for(let i = 0; i < param.components.length; ++i){\n        const component = param.components[i];\n        const [data, consumed_] = decodeParameter(cursor, component, {\n            checksumAddress,\n            staticPosition\n        });\n        value[hasUnnamedChild ? i : component?.name] = data;\n        consumed += consumed_;\n    }\n    return [\n        value,\n        consumed\n    ];\n}\nfunction decodeString(cursor, { staticPosition }) {\n    const offset = Bytes.toNumber(cursor.readBytes(32));\n    const start = staticPosition + offset;\n    cursor.setPosition(start);\n    const length = Bytes.toNumber(cursor.readBytes(32));\n    if (length === 0) {\n        cursor.setPosition(staticPosition + 32);\n        return [\n            \"\",\n            32\n        ];\n    }\n    const data = cursor.readBytes(length, 32);\n    const value = Bytes.toString(Bytes.trimLeft(data));\n    cursor.setPosition(staticPosition + 32);\n    return [\n        value,\n        32\n    ];\n}\nfunction prepareParameters({ checksumAddress, parameters, values }) {\n    const preparedParameters = [];\n    for(let i = 0; i < parameters.length; i++){\n        preparedParameters.push(prepareParameter({\n            checksumAddress,\n            parameter: parameters[i],\n            value: values[i]\n        }));\n    }\n    return preparedParameters;\n}\nfunction prepareParameter({ checksumAddress = false, parameter: parameter_, value }) {\n    const parameter = parameter_;\n    const arrayComponents = getArrayComponents(parameter.type);\n    if (arrayComponents) {\n        const [length, type] = arrayComponents;\n        return encodeArray(value, {\n            checksumAddress,\n            length,\n            parameter: {\n                ...parameter,\n                type\n            }\n        });\n    }\n    if (parameter.type === \"tuple\") {\n        return encodeTuple(value, {\n            checksumAddress,\n            parameter: parameter\n        });\n    }\n    if (parameter.type === \"address\") {\n        return encodeAddress(value, {\n            checksum: checksumAddress\n        });\n    }\n    if (parameter.type === \"bool\") {\n        return encodeBoolean(value);\n    }\n    if (parameter.type.startsWith(\"uint\") || parameter.type.startsWith(\"int\")) {\n        const signed = parameter.type.startsWith(\"int\");\n        const [, , size = \"256\"] = Solidity_js_1.integerRegex.exec(parameter.type) ?? [];\n        return encodeNumber(value, {\n            signed,\n            size: Number(size)\n        });\n    }\n    if (parameter.type.startsWith(\"bytes\")) {\n        return encodeBytes(value, {\n            type: parameter.type\n        });\n    }\n    if (parameter.type === \"string\") {\n        return encodeString(value);\n    }\n    throw new AbiParameters.InvalidTypeError(parameter.type);\n}\nfunction encode(preparedParameters) {\n    let staticSize = 0;\n    for(let i = 0; i < preparedParameters.length; i++){\n        const { dynamic, encoded } = preparedParameters[i];\n        if (dynamic) staticSize += 32;\n        else staticSize += Hex.size(encoded);\n    }\n    const staticParameters = [];\n    const dynamicParameters = [];\n    let dynamicSize = 0;\n    for(let i = 0; i < preparedParameters.length; i++){\n        const { dynamic, encoded } = preparedParameters[i];\n        if (dynamic) {\n            staticParameters.push(Hex.fromNumber(staticSize + dynamicSize, {\n                size: 32\n            }));\n            dynamicParameters.push(encoded);\n            dynamicSize += Hex.size(encoded);\n        } else {\n            staticParameters.push(encoded);\n        }\n    }\n    return Hex.concat(...staticParameters, ...dynamicParameters);\n}\nfunction encodeAddress(value, options) {\n    const { checksum = false } = options;\n    Address.assert(value, {\n        strict: checksum\n    });\n    return {\n        dynamic: false,\n        encoded: Hex.padLeft(value.toLowerCase())\n    };\n}\nfunction encodeArray(value, options) {\n    const { checksumAddress, length, parameter } = options;\n    const dynamic = length === null;\n    if (!Array.isArray(value)) throw new AbiParameters.InvalidArrayError(value);\n    if (!dynamic && value.length !== length) throw new AbiParameters.ArrayLengthMismatchError({\n        expectedLength: length,\n        givenLength: value.length,\n        type: `${parameter.type}[${length}]`\n    });\n    let dynamicChild = false;\n    const preparedParameters = [];\n    for(let i = 0; i < value.length; i++){\n        const preparedParam = prepareParameter({\n            checksumAddress,\n            parameter,\n            value: value[i]\n        });\n        if (preparedParam.dynamic) dynamicChild = true;\n        preparedParameters.push(preparedParam);\n    }\n    if (dynamic || dynamicChild) {\n        const data = encode(preparedParameters);\n        if (dynamic) {\n            const length = Hex.fromNumber(preparedParameters.length, {\n                size: 32\n            });\n            return {\n                dynamic: true,\n                encoded: preparedParameters.length > 0 ? Hex.concat(length, data) : length\n            };\n        }\n        if (dynamicChild) return {\n            dynamic: true,\n            encoded: data\n        };\n    }\n    return {\n        dynamic: false,\n        encoded: Hex.concat(...preparedParameters.map(({ encoded })=>encoded))\n    };\n}\nfunction encodeBytes(value, { type }) {\n    const [, parametersize] = type.split(\"bytes\");\n    const bytesSize = Hex.size(value);\n    if (!parametersize) {\n        let value_ = value;\n        if (bytesSize % 32 !== 0) value_ = Hex.padRight(value_, Math.ceil((value.length - 2) / 2 / 32) * 32);\n        return {\n            dynamic: true,\n            encoded: Hex.concat(Hex.padLeft(Hex.fromNumber(bytesSize, {\n                size: 32\n            })), value_)\n        };\n    }\n    if (bytesSize !== Number.parseInt(parametersize, 10)) throw new AbiParameters.BytesSizeMismatchError({\n        expectedSize: Number.parseInt(parametersize, 10),\n        value\n    });\n    return {\n        dynamic: false,\n        encoded: Hex.padRight(value)\n    };\n}\nfunction encodeBoolean(value) {\n    if (typeof value !== \"boolean\") throw new Errors.BaseError(`Invalid boolean value: \"${value}\" (type: ${typeof value}). Expected: \\`true\\` or \\`false\\`.`);\n    return {\n        dynamic: false,\n        encoded: Hex.padLeft(Hex.fromBoolean(value))\n    };\n}\nfunction encodeNumber(value, { signed, size }) {\n    if (typeof size === \"number\") {\n        const max = 2n ** (BigInt(size) - (signed ? 1n : 0n)) - 1n;\n        const min = signed ? -max - 1n : 0n;\n        if (value > max || value < min) throw new Hex.IntegerOutOfRangeError({\n            max: max.toString(),\n            min: min.toString(),\n            signed,\n            size: size / 8,\n            value: value.toString()\n        });\n    }\n    return {\n        dynamic: false,\n        encoded: Hex.fromNumber(value, {\n            size: 32,\n            signed\n        })\n    };\n}\nfunction encodeString(value) {\n    const hexValue = Hex.fromString(value);\n    const partsLength = Math.ceil(Hex.size(hexValue) / 32);\n    const parts = [];\n    for(let i = 0; i < partsLength; i++){\n        parts.push(Hex.padRight(Hex.slice(hexValue, i * 32, (i + 1) * 32)));\n    }\n    return {\n        dynamic: true,\n        encoded: Hex.concat(Hex.padRight(Hex.fromNumber(Hex.size(hexValue), {\n            size: 32\n        })), ...parts)\n    };\n}\nfunction encodeTuple(value, options) {\n    const { checksumAddress, parameter } = options;\n    let dynamic = false;\n    const preparedParameters = [];\n    for(let i = 0; i < parameter.components.length; i++){\n        const param_ = parameter.components[i];\n        const index = Array.isArray(value) ? i : param_.name;\n        const preparedParam = prepareParameter({\n            checksumAddress,\n            parameter: param_,\n            value: value[index]\n        });\n        preparedParameters.push(preparedParam);\n        if (preparedParam.dynamic) dynamic = true;\n    }\n    return {\n        dynamic,\n        encoded: dynamic ? encode(preparedParameters) : Hex.concat(...preparedParameters.map(({ encoded })=>encoded))\n    };\n}\nfunction getArrayComponents(type) {\n    const matches = type.match(/^(.*)\\[(\\d+)?\\]$/);\n    return matches ? [\n        matches[2] ? Number(matches[2]) : null,\n        matches[1]\n    ] : undefined;\n}\nfunction hasDynamicChild(param) {\n    const { type } = param;\n    if (type === \"string\") return true;\n    if (type === \"bytes\") return true;\n    if (type.endsWith(\"[]\")) return true;\n    if (type === \"tuple\") return param.components?.some(hasDynamicChild);\n    const arrayComponents = getArrayComponents(param.type);\n    if (arrayComponents && hasDynamicChild({\n        ...param,\n        type: arrayComponents[1]\n    })) return true;\n    return false;\n} //# sourceMappingURL=abiParameters.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb3gvX2Nqcy9jb3JlL2ludGVybmFsL2FiaVBhcmFtZXRlcnMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELHVCQUF1QixHQUFHRTtBQUMxQkYscUJBQXFCLEdBQUdHO0FBQ3hCSCxtQkFBbUIsR0FBR0k7QUFDdEJKLGtCQUFrQixHQUFHSztBQUNyQkwsbUJBQW1CLEdBQUdNO0FBQ3RCTixvQkFBb0IsR0FBR087QUFDdkJQLG1CQUFtQixHQUFHUTtBQUN0QlIsb0JBQW9CLEdBQUdTO0FBQ3ZCVCx5QkFBeUIsR0FBR1U7QUFDNUJWLHdCQUF3QixHQUFHVztBQUMzQlgsY0FBYyxHQUFHWTtBQUNqQloscUJBQXFCLEdBQUdhO0FBQ3hCYixtQkFBbUIsR0FBR2M7QUFDdEJkLG1CQUFtQixHQUFHZTtBQUN0QmYscUJBQXFCLEdBQUdnQjtBQUN4QmhCLG9CQUFvQixHQUFHaUI7QUFDdkJqQixvQkFBb0IsR0FBR2tCO0FBQ3ZCbEIsbUJBQW1CLEdBQUdtQjtBQUN0Qm5CLDBCQUEwQixHQUFHb0I7QUFDN0JwQix1QkFBdUIsR0FBR3FCO0FBQzFCLE1BQU1DLGdCQUFnQkMsbUJBQU9BLENBQUMsK0VBQXFCO0FBQ25ELE1BQU1DLFVBQVVELG1CQUFPQSxDQUFDLG1FQUFlO0FBQ3ZDLE1BQU1FLFFBQVFGLG1CQUFPQSxDQUFDLCtEQUFhO0FBQ25DLE1BQU1HLFNBQVNILG1CQUFPQSxDQUFDLGlFQUFjO0FBQ3JDLE1BQU1JLE1BQU1KLG1CQUFPQSxDQUFDLDJEQUFXO0FBQy9CLE1BQU1LLGdCQUFnQkwsbUJBQU9BLENBQUMscUVBQWdCO0FBQzlDLFNBQVNyQixnQkFBZ0IyQixNQUFNLEVBQUVDLEtBQUssRUFBRUMsT0FBTztJQUMzQyxNQUFNLEVBQUVDLGVBQWUsRUFBRUMsY0FBYyxFQUFFLEdBQUdGO0lBQzVDLE1BQU1HLGtCQUFrQmQsbUJBQW1CVSxNQUFNSyxJQUFJ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LElBQUk7SUFDckQsSUFBSUQsbUJBQ0FiLGdCQUFnQjtRQUNaLEdBQUdTLEtBQUs7UUFDUkssTUFBTUQsZUFBZSxDQUFDLEVBQUU7SUFDNUIsSUFDQSxPQUFPO0lBQ1gsT0FBTztBQUNYLEVBQ0EseUNBQXlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd3N0b24tdWkvLi9ub2RlX21vZHVsZXMvb3gvX2Nqcy9jb3JlL2ludGVybmFsL2FiaVBhcmFtZXRlcnMuanM/NzYwNCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZGVjb2RlUGFyYW1ldGVyID0gZGVjb2RlUGFyYW1ldGVyO1xuZXhwb3J0cy5kZWNvZGVBZGRyZXNzID0gZGVjb2RlQWRkcmVzcztcbmV4cG9ydHMuZGVjb2RlQXJyYXkgPSBkZWNvZGVBcnJheTtcbmV4cG9ydHMuZGVjb2RlQm9vbCA9IGRlY29kZUJvb2w7XG5leHBvcnRzLmRlY29kZUJ5dGVzID0gZGVjb2RlQnl0ZXM7XG5leHBvcnRzLmRlY29kZU51bWJlciA9IGRlY29kZU51bWJlcjtcbmV4cG9ydHMuZGVjb2RlVHVwbGUgPSBkZWNvZGVUdXBsZTtcbmV4cG9ydHMuZGVjb2RlU3RyaW5nID0gZGVjb2RlU3RyaW5nO1xuZXhwb3J0cy5wcmVwYXJlUGFyYW1ldGVycyA9IHByZXBhcmVQYXJhbWV0ZXJzO1xuZXhwb3J0cy5wcmVwYXJlUGFyYW1ldGVyID0gcHJlcGFyZVBhcmFtZXRlcjtcbmV4cG9ydHMuZW5jb2RlID0gZW5jb2RlO1xuZXhwb3J0cy5lbmNvZGVBZGRyZXNzID0gZW5jb2RlQWRkcmVzcztcbmV4cG9ydHMuZW5jb2RlQXJyYXkgPSBlbmNvZGVBcnJheTtcbmV4cG9ydHMuZW5jb2RlQnl0ZXMgPSBlbmNvZGVCeXRlcztcbmV4cG9ydHMuZW5jb2RlQm9vbGVhbiA9IGVuY29kZUJvb2xlYW47XG5leHBvcnRzLmVuY29kZU51bWJlciA9IGVuY29kZU51bWJlcjtcbmV4cG9ydHMuZW5jb2RlU3RyaW5nID0gZW5jb2RlU3RyaW5nO1xuZXhwb3J0cy5lbmNvZGVUdXBsZSA9IGVuY29kZVR1cGxlO1xuZXhwb3J0cy5nZXRBcnJheUNvbXBvbmVudHMgPSBnZXRBcnJheUNvbXBvbmVudHM7XG5leHBvcnRzLmhhc0R5bmFtaWNDaGlsZCA9IGhhc0R5bmFtaWNDaGlsZDtcbmNvbnN0IEFiaVBhcmFtZXRlcnMgPSByZXF1aXJlKFwiLi4vQWJpUGFyYW1ldGVycy5qc1wiKTtcbmNvbnN0IEFkZHJlc3MgPSByZXF1aXJlKFwiLi4vQWRkcmVzcy5qc1wiKTtcbmNvbnN0IEJ5dGVzID0gcmVxdWlyZShcIi4uL0J5dGVzLmpzXCIpO1xuY29uc3QgRXJyb3JzID0gcmVxdWlyZShcIi4uL0Vycm9ycy5qc1wiKTtcbmNvbnN0IEhleCA9IHJlcXVpcmUoXCIuLi9IZXguanNcIik7XG5jb25zdCBTb2xpZGl0eV9qc18xID0gcmVxdWlyZShcIi4uL1NvbGlkaXR5LmpzXCIpO1xuZnVuY3Rpb24gZGVjb2RlUGFyYW1ldGVyKGN1cnNvciwgcGFyYW0sIG9wdGlvbnMpIHtcbiAgICBjb25zdCB7IGNoZWNrc3VtQWRkcmVzcywgc3RhdGljUG9zaXRpb24gfSA9IG9wdGlvbnM7XG4gICAgY29uc3QgYXJyYXlDb21wb25lbnRzID0gZ2V0QXJyYXlDb21wb25lbnRzKHBhcmFtLnR5cGUpO1xuICAgIGlmIChhcnJheUNvbXBvbmVudHMpIHtcbiAgICAgICAgY29uc3QgW2xlbmd0aCwgdHlwZV0gPSBhcnJheUNvbXBvbmVudHM7XG4gICAgICAgIHJldHVybiBkZWNvZGVBcnJheShjdXJzb3IsIHsgLi4ucGFyYW0sIHR5cGUgfSwgeyBjaGVja3N1bUFkZHJlc3MsIGxlbmd0aCwgc3RhdGljUG9zaXRpb24gfSk7XG4gICAgfVxuICAgIGlmIChwYXJhbS50eXBlID09PSAndHVwbGUnKVxuICAgICAgICByZXR1cm4gZGVjb2RlVHVwbGUoY3Vyc29yLCBwYXJhbSwge1xuICAgICAgICAgICAgY2hlY2tzdW1BZGRyZXNzLFxuICAgICAgICAgICAgc3RhdGljUG9zaXRpb24sXG4gICAgICAgIH0pO1xuICAgIGlmIChwYXJhbS50eXBlID09PSAnYWRkcmVzcycpXG4gICAgICAgIHJldHVybiBkZWNvZGVBZGRyZXNzKGN1cnNvciwgeyBjaGVja3N1bTogY2hlY2tzdW1BZGRyZXNzIH0pO1xuICAgIGlmIChwYXJhbS50eXBlID09PSAnYm9vbCcpXG4gICAgICAgIHJldHVybiBkZWNvZGVCb29sKGN1cnNvcik7XG4gICAgaWYgKHBhcmFtLnR5cGUuc3RhcnRzV2l0aCgnYnl0ZXMnKSlcbiAgICAgICAgcmV0dXJuIGRlY29kZUJ5dGVzKGN1cnNvciwgcGFyYW0sIHsgc3RhdGljUG9zaXRpb24gfSk7XG4gICAgaWYgKHBhcmFtLnR5cGUuc3RhcnRzV2l0aCgndWludCcpIHx8IHBhcmFtLnR5cGUuc3RhcnRzV2l0aCgnaW50JykpXG4gICAgICAgIHJldHVybiBkZWNvZGVOdW1iZXIoY3Vyc29yLCBwYXJhbSk7XG4gICAgaWYgKHBhcmFtLnR5cGUgPT09ICdzdHJpbmcnKVxuICAgICAgICByZXR1cm4gZGVjb2RlU3RyaW5nKGN1cnNvciwgeyBzdGF0aWNQb3NpdGlvbiB9KTtcbiAgICB0aHJvdyBuZXcgQWJpUGFyYW1ldGVycy5JbnZhbGlkVHlwZUVycm9yKHBhcmFtLnR5cGUpO1xufVxuY29uc3Qgc2l6ZU9mTGVuZ3RoID0gMzI7XG5jb25zdCBzaXplT2ZPZmZzZXQgPSAzMjtcbmZ1bmN0aW9uIGRlY29kZUFkZHJlc3MoY3Vyc29yLCBvcHRpb25zID0ge30pIHtcbiAgICBjb25zdCB7IGNoZWNrc3VtID0gZmFsc2UgfSA9IG9wdGlvbnM7XG4gICAgY29uc3QgdmFsdWUgPSBjdXJzb3IucmVhZEJ5dGVzKDMyKTtcbiAgICBjb25zdCB3cmFwID0gKGFkZHJlc3MpID0+IGNoZWNrc3VtID8gQWRkcmVzcy5jaGVja3N1bShhZGRyZXNzKSA6IGFkZHJlc3M7XG4gICAgcmV0dXJuIFt3cmFwKEhleC5mcm9tQnl0ZXMoQnl0ZXMuc2xpY2UodmFsdWUsIC0yMCkpKSwgMzJdO1xufVxuZnVuY3Rpb24gZGVjb2RlQXJyYXkoY3Vyc29yLCBwYXJhbSwgb3B0aW9ucykge1xuICAgIGNvbnN0IHsgY2hlY2tzdW1BZGRyZXNzLCBsZW5ndGgsIHN0YXRpY1Bvc2l0aW9uIH0gPSBvcHRpb25zO1xuICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IG9mZnNldCA9IEJ5dGVzLnRvTnVtYmVyKGN1cnNvci5yZWFkQnl0ZXMoc2l6ZU9mT2Zmc2V0KSk7XG4gICAgICAgIGNvbnN0IHN0YXJ0ID0gc3RhdGljUG9zaXRpb24gKyBvZmZzZXQ7XG4gICAgICAgIGNvbnN0IHN0YXJ0T2ZEYXRhID0gc3RhcnQgKyBzaXplT2ZMZW5ndGg7XG4gICAgICAgIGN1cnNvci5zZXRQb3NpdGlvbihzdGFydCk7XG4gICAgICAgIGNvbnN0IGxlbmd0aCA9IEJ5dGVzLnRvTnVtYmVyKGN1cnNvci5yZWFkQnl0ZXMoc2l6ZU9mTGVuZ3RoKSk7XG4gICAgICAgIGNvbnN0IGR5bmFtaWNDaGlsZCA9IGhhc0R5bmFtaWNDaGlsZChwYXJhbSk7XG4gICAgICAgIGxldCBjb25zdW1lZCA9IDA7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gW107XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGN1cnNvci5zZXRQb3NpdGlvbihzdGFydE9mRGF0YSArIChkeW5hbWljQ2hpbGQgPyBpICogMzIgOiBjb25zdW1lZCkpO1xuICAgICAgICAgICAgY29uc3QgW2RhdGEsIGNvbnN1bWVkX10gPSBkZWNvZGVQYXJhbWV0ZXIoY3Vyc29yLCBwYXJhbSwge1xuICAgICAgICAgICAgICAgIGNoZWNrc3VtQWRkcmVzcyxcbiAgICAgICAgICAgICAgICBzdGF0aWNQb3NpdGlvbjogc3RhcnRPZkRhdGEsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNvbnN1bWVkICs9IGNvbnN1bWVkXztcbiAgICAgICAgICAgIHZhbHVlLnB1c2goZGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgY3Vyc29yLnNldFBvc2l0aW9uKHN0YXRpY1Bvc2l0aW9uICsgMzIpO1xuICAgICAgICByZXR1cm4gW3ZhbHVlLCAzMl07XG4gICAgfVxuICAgIGlmIChoYXNEeW5hbWljQ2hpbGQocGFyYW0pKSB7XG4gICAgICAgIGNvbnN0IG9mZnNldCA9IEJ5dGVzLnRvTnVtYmVyKGN1cnNvci5yZWFkQnl0ZXMoc2l6ZU9mT2Zmc2V0KSk7XG4gICAgICAgIGNvbnN0IHN0YXJ0ID0gc3RhdGljUG9zaXRpb24gKyBvZmZzZXQ7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gW107XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGN1cnNvci5zZXRQb3NpdGlvbihzdGFydCArIGkgKiAzMik7XG4gICAgICAgICAgICBjb25zdCBbZGF0YV0gPSBkZWNvZGVQYXJhbWV0ZXIoY3Vyc29yLCBwYXJhbSwge1xuICAgICAgICAgICAgICAgIGNoZWNrc3VtQWRkcmVzcyxcbiAgICAgICAgICAgICAgICBzdGF0aWNQb3NpdGlvbjogc3RhcnQsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHZhbHVlLnB1c2goZGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgY3Vyc29yLnNldFBvc2l0aW9uKHN0YXRpY1Bvc2l0aW9uICsgMzIpO1xuICAgICAgICByZXR1cm4gW3ZhbHVlLCAzMl07XG4gICAgfVxuICAgIGxldCBjb25zdW1lZCA9IDA7XG4gICAgY29uc3QgdmFsdWUgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgICAgIGNvbnN0IFtkYXRhLCBjb25zdW1lZF9dID0gZGVjb2RlUGFyYW1ldGVyKGN1cnNvciwgcGFyYW0sIHtcbiAgICAgICAgICAgIGNoZWNrc3VtQWRkcmVzcyxcbiAgICAgICAgICAgIHN0YXRpY1Bvc2l0aW9uOiBzdGF0aWNQb3NpdGlvbiArIGNvbnN1bWVkLFxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3VtZWQgKz0gY29uc3VtZWRfO1xuICAgICAgICB2YWx1ZS5wdXNoKGRhdGEpO1xuICAgIH1cbiAgICByZXR1cm4gW3ZhbHVlLCBjb25zdW1lZF07XG59XG5mdW5jdGlvbiBkZWNvZGVCb29sKGN1cnNvcikge1xuICAgIHJldHVybiBbQnl0ZXMudG9Cb29sZWFuKGN1cnNvci5yZWFkQnl0ZXMoMzIpLCB7IHNpemU6IDMyIH0pLCAzMl07XG59XG5mdW5jdGlvbiBkZWNvZGVCeXRlcyhjdXJzb3IsIHBhcmFtLCB7IHN0YXRpY1Bvc2l0aW9uIH0pIHtcbiAgICBjb25zdCBbXywgc2l6ZV0gPSBwYXJhbS50eXBlLnNwbGl0KCdieXRlcycpO1xuICAgIGlmICghc2l6ZSkge1xuICAgICAgICBjb25zdCBvZmZzZXQgPSBCeXRlcy50b051bWJlcihjdXJzb3IucmVhZEJ5dGVzKDMyKSk7XG4gICAgICAgIGN1cnNvci5zZXRQb3NpdGlvbihzdGF0aWNQb3NpdGlvbiArIG9mZnNldCk7XG4gICAgICAgIGNvbnN0IGxlbmd0aCA9IEJ5dGVzLnRvTnVtYmVyKGN1cnNvci5yZWFkQnl0ZXMoMzIpKTtcbiAgICAgICAgaWYgKGxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgY3Vyc29yLnNldFBvc2l0aW9uKHN0YXRpY1Bvc2l0aW9uICsgMzIpO1xuICAgICAgICAgICAgcmV0dXJuIFsnMHgnLCAzMl07XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZGF0YSA9IGN1cnNvci5yZWFkQnl0ZXMobGVuZ3RoKTtcbiAgICAgICAgY3Vyc29yLnNldFBvc2l0aW9uKHN0YXRpY1Bvc2l0aW9uICsgMzIpO1xuICAgICAgICByZXR1cm4gW0hleC5mcm9tQnl0ZXMoZGF0YSksIDMyXTtcbiAgICB9XG4gICAgY29uc3QgdmFsdWUgPSBIZXguZnJvbUJ5dGVzKGN1cnNvci5yZWFkQnl0ZXMoTnVtYmVyLnBhcnNlSW50KHNpemUsIDEwKSwgMzIpKTtcbiAgICByZXR1cm4gW3ZhbHVlLCAzMl07XG59XG5mdW5jdGlvbiBkZWNvZGVOdW1iZXIoY3Vyc29yLCBwYXJhbSkge1xuICAgIGNvbnN0IHNpZ25lZCA9IHBhcmFtLnR5cGUuc3RhcnRzV2l0aCgnaW50Jyk7XG4gICAgY29uc3Qgc2l6ZSA9IE51bWJlci5wYXJzZUludChwYXJhbS50eXBlLnNwbGl0KCdpbnQnKVsxXSB8fCAnMjU2JywgMTApO1xuICAgIGNvbnN0IHZhbHVlID0gY3Vyc29yLnJlYWRCeXRlcygzMik7XG4gICAgcmV0dXJuIFtcbiAgICAgICAgc2l6ZSA+IDQ4XG4gICAgICAgICAgICA/IEJ5dGVzLnRvQmlnSW50KHZhbHVlLCB7IHNpZ25lZCB9KVxuICAgICAgICAgICAgOiBCeXRlcy50b051bWJlcih2YWx1ZSwgeyBzaWduZWQgfSksXG4gICAgICAgIDMyLFxuICAgIF07XG59XG5mdW5jdGlvbiBkZWNvZGVUdXBsZShjdXJzb3IsIHBhcmFtLCBvcHRpb25zKSB7XG4gICAgY29uc3QgeyBjaGVja3N1bUFkZHJlc3MsIHN0YXRpY1Bvc2l0aW9uIH0gPSBvcHRpb25zO1xuICAgIGNvbnN0IGhhc1VubmFtZWRDaGlsZCA9IHBhcmFtLmNvbXBvbmVudHMubGVuZ3RoID09PSAwIHx8IHBhcmFtLmNvbXBvbmVudHMuc29tZSgoeyBuYW1lIH0pID0+ICFuYW1lKTtcbiAgICBjb25zdCB2YWx1ZSA9IGhhc1VubmFtZWRDaGlsZCA/IFtdIDoge307XG4gICAgbGV0IGNvbnN1bWVkID0gMDtcbiAgICBpZiAoaGFzRHluYW1pY0NoaWxkKHBhcmFtKSkge1xuICAgICAgICBjb25zdCBvZmZzZXQgPSBCeXRlcy50b051bWJlcihjdXJzb3IucmVhZEJ5dGVzKHNpemVPZk9mZnNldCkpO1xuICAgICAgICBjb25zdCBzdGFydCA9IHN0YXRpY1Bvc2l0aW9uICsgb2Zmc2V0O1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhcmFtLmNvbXBvbmVudHMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGNvbnN0IGNvbXBvbmVudCA9IHBhcmFtLmNvbXBvbmVudHNbaV07XG4gICAgICAgICAgICBjdXJzb3Iuc2V0UG9zaXRpb24oc3RhcnQgKyBjb25zdW1lZCk7XG4gICAgICAgICAgICBjb25zdCBbZGF0YSwgY29uc3VtZWRfXSA9IGRlY29kZVBhcmFtZXRlcihjdXJzb3IsIGNvbXBvbmVudCwge1xuICAgICAgICAgICAgICAgIGNoZWNrc3VtQWRkcmVzcyxcbiAgICAgICAgICAgICAgICBzdGF0aWNQb3NpdGlvbjogc3RhcnQsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNvbnN1bWVkICs9IGNvbnN1bWVkXztcbiAgICAgICAgICAgIHZhbHVlW2hhc1VubmFtZWRDaGlsZCA/IGkgOiBjb21wb25lbnQ/Lm5hbWVdID0gZGF0YTtcbiAgICAgICAgfVxuICAgICAgICBjdXJzb3Iuc2V0UG9zaXRpb24oc3RhdGljUG9zaXRpb24gKyAzMik7XG4gICAgICAgIHJldHVybiBbdmFsdWUsIDMyXTtcbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXJhbS5jb21wb25lbnRzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGNvbnN0IGNvbXBvbmVudCA9IHBhcmFtLmNvbXBvbmVudHNbaV07XG4gICAgICAgIGNvbnN0IFtkYXRhLCBjb25zdW1lZF9dID0gZGVjb2RlUGFyYW1ldGVyKGN1cnNvciwgY29tcG9uZW50LCB7XG4gICAgICAgICAgICBjaGVja3N1bUFkZHJlc3MsXG4gICAgICAgICAgICBzdGF0aWNQb3NpdGlvbixcbiAgICAgICAgfSk7XG4gICAgICAgIHZhbHVlW2hhc1VubmFtZWRDaGlsZCA/IGkgOiBjb21wb25lbnQ/Lm5hbWVdID0gZGF0YTtcbiAgICAgICAgY29uc3VtZWQgKz0gY29uc3VtZWRfO1xuICAgIH1cbiAgICByZXR1cm4gW3ZhbHVlLCBjb25zdW1lZF07XG59XG5mdW5jdGlvbiBkZWNvZGVTdHJpbmcoY3Vyc29yLCB7IHN0YXRpY1Bvc2l0aW9uIH0pIHtcbiAgICBjb25zdCBvZmZzZXQgPSBCeXRlcy50b051bWJlcihjdXJzb3IucmVhZEJ5dGVzKDMyKSk7XG4gICAgY29uc3Qgc3RhcnQgPSBzdGF0aWNQb3NpdGlvbiArIG9mZnNldDtcbiAgICBjdXJzb3Iuc2V0UG9zaXRpb24oc3RhcnQpO1xuICAgIGNvbnN0IGxlbmd0aCA9IEJ5dGVzLnRvTnVtYmVyKGN1cnNvci5yZWFkQnl0ZXMoMzIpKTtcbiAgICBpZiAobGVuZ3RoID09PSAwKSB7XG4gICAgICAgIGN1cnNvci5zZXRQb3NpdGlvbihzdGF0aWNQb3NpdGlvbiArIDMyKTtcbiAgICAgICAgcmV0dXJuIFsnJywgMzJdO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gY3Vyc29yLnJlYWRCeXRlcyhsZW5ndGgsIDMyKTtcbiAgICBjb25zdCB2YWx1ZSA9IEJ5dGVzLnRvU3RyaW5nKEJ5dGVzLnRyaW1MZWZ0KGRhdGEpKTtcbiAgICBjdXJzb3Iuc2V0UG9zaXRpb24oc3RhdGljUG9zaXRpb24gKyAzMik7XG4gICAgcmV0dXJuIFt2YWx1ZSwgMzJdO1xufVxuZnVuY3Rpb24gcHJlcGFyZVBhcmFtZXRlcnMoeyBjaGVja3N1bUFkZHJlc3MsIHBhcmFtZXRlcnMsIHZhbHVlcywgfSkge1xuICAgIGNvbnN0IHByZXBhcmVkUGFyYW1ldGVycyA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGFyYW1ldGVycy5sZW5ndGg7IGkrKykge1xuICAgICAgICBwcmVwYXJlZFBhcmFtZXRlcnMucHVzaChwcmVwYXJlUGFyYW1ldGVyKHtcbiAgICAgICAgICAgIGNoZWNrc3VtQWRkcmVzcyxcbiAgICAgICAgICAgIHBhcmFtZXRlcjogcGFyYW1ldGVyc1tpXSxcbiAgICAgICAgICAgIHZhbHVlOiB2YWx1ZXNbaV0sXG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgcmV0dXJuIHByZXBhcmVkUGFyYW1ldGVycztcbn1cbmZ1bmN0aW9uIHByZXBhcmVQYXJhbWV0ZXIoeyBjaGVja3N1bUFkZHJlc3MgPSBmYWxzZSwgcGFyYW1ldGVyOiBwYXJhbWV0ZXJfLCB2YWx1ZSwgfSkge1xuICAgIGNvbnN0IHBhcmFtZXRlciA9IHBhcmFtZXRlcl87XG4gICAgY29uc3QgYXJyYXlDb21wb25lbnRzID0gZ2V0QXJyYXlDb21wb25lbnRzKHBhcmFtZXRlci50eXBlKTtcbiAgICBpZiAoYXJyYXlDb21wb25lbnRzKSB7XG4gICAgICAgIGNvbnN0IFtsZW5ndGgsIHR5cGVdID0gYXJyYXlDb21wb25lbnRzO1xuICAgICAgICByZXR1cm4gZW5jb2RlQXJyYXkodmFsdWUsIHtcbiAgICAgICAgICAgIGNoZWNrc3VtQWRkcmVzcyxcbiAgICAgICAgICAgIGxlbmd0aCxcbiAgICAgICAgICAgIHBhcmFtZXRlcjoge1xuICAgICAgICAgICAgICAgIC4uLnBhcmFtZXRlcixcbiAgICAgICAgICAgICAgICB0eXBlLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChwYXJhbWV0ZXIudHlwZSA9PT0gJ3R1cGxlJykge1xuICAgICAgICByZXR1cm4gZW5jb2RlVHVwbGUodmFsdWUsIHtcbiAgICAgICAgICAgIGNoZWNrc3VtQWRkcmVzcyxcbiAgICAgICAgICAgIHBhcmFtZXRlcjogcGFyYW1ldGVyLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgaWYgKHBhcmFtZXRlci50eXBlID09PSAnYWRkcmVzcycpIHtcbiAgICAgICAgcmV0dXJuIGVuY29kZUFkZHJlc3ModmFsdWUsIHtcbiAgICAgICAgICAgIGNoZWNrc3VtOiBjaGVja3N1bUFkZHJlc3MsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAocGFyYW1ldGVyLnR5cGUgPT09ICdib29sJykge1xuICAgICAgICByZXR1cm4gZW5jb2RlQm9vbGVhbih2YWx1ZSk7XG4gICAgfVxuICAgIGlmIChwYXJhbWV0ZXIudHlwZS5zdGFydHNXaXRoKCd1aW50JykgfHwgcGFyYW1ldGVyLnR5cGUuc3RhcnRzV2l0aCgnaW50JykpIHtcbiAgICAgICAgY29uc3Qgc2lnbmVkID0gcGFyYW1ldGVyLnR5cGUuc3RhcnRzV2l0aCgnaW50Jyk7XG4gICAgICAgIGNvbnN0IFssICwgc2l6ZSA9ICcyNTYnXSA9IFNvbGlkaXR5X2pzXzEuaW50ZWdlclJlZ2V4LmV4ZWMocGFyYW1ldGVyLnR5cGUpID8/IFtdO1xuICAgICAgICByZXR1cm4gZW5jb2RlTnVtYmVyKHZhbHVlLCB7XG4gICAgICAgICAgICBzaWduZWQsXG4gICAgICAgICAgICBzaXplOiBOdW1iZXIoc2l6ZSksXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAocGFyYW1ldGVyLnR5cGUuc3RhcnRzV2l0aCgnYnl0ZXMnKSkge1xuICAgICAgICByZXR1cm4gZW5jb2RlQnl0ZXModmFsdWUsIHsgdHlwZTogcGFyYW1ldGVyLnR5cGUgfSk7XG4gICAgfVxuICAgIGlmIChwYXJhbWV0ZXIudHlwZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIGVuY29kZVN0cmluZyh2YWx1ZSk7XG4gICAgfVxuICAgIHRocm93IG5ldyBBYmlQYXJhbWV0ZXJzLkludmFsaWRUeXBlRXJyb3IocGFyYW1ldGVyLnR5cGUpO1xufVxuZnVuY3Rpb24gZW5jb2RlKHByZXBhcmVkUGFyYW1ldGVycykge1xuICAgIGxldCBzdGF0aWNTaXplID0gMDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHByZXBhcmVkUGFyYW1ldGVycy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCB7IGR5bmFtaWMsIGVuY29kZWQgfSA9IHByZXBhcmVkUGFyYW1ldGVyc1tpXTtcbiAgICAgICAgaWYgKGR5bmFtaWMpXG4gICAgICAgICAgICBzdGF0aWNTaXplICs9IDMyO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICBzdGF0aWNTaXplICs9IEhleC5zaXplKGVuY29kZWQpO1xuICAgIH1cbiAgICBjb25zdCBzdGF0aWNQYXJhbWV0ZXJzID0gW107XG4gICAgY29uc3QgZHluYW1pY1BhcmFtZXRlcnMgPSBbXTtcbiAgICBsZXQgZHluYW1pY1NpemUgPSAwO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcHJlcGFyZWRQYXJhbWV0ZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IHsgZHluYW1pYywgZW5jb2RlZCB9ID0gcHJlcGFyZWRQYXJhbWV0ZXJzW2ldO1xuICAgICAgICBpZiAoZHluYW1pYykge1xuICAgICAgICAgICAgc3RhdGljUGFyYW1ldGVycy5wdXNoKEhleC5mcm9tTnVtYmVyKHN0YXRpY1NpemUgKyBkeW5hbWljU2l6ZSwgeyBzaXplOiAzMiB9KSk7XG4gICAgICAgICAgICBkeW5hbWljUGFyYW1ldGVycy5wdXNoKGVuY29kZWQpO1xuICAgICAgICAgICAgZHluYW1pY1NpemUgKz0gSGV4LnNpemUoZW5jb2RlZCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzdGF0aWNQYXJhbWV0ZXJzLnB1c2goZW5jb2RlZCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIEhleC5jb25jYXQoLi4uc3RhdGljUGFyYW1ldGVycywgLi4uZHluYW1pY1BhcmFtZXRlcnMpO1xufVxuZnVuY3Rpb24gZW5jb2RlQWRkcmVzcyh2YWx1ZSwgb3B0aW9ucykge1xuICAgIGNvbnN0IHsgY2hlY2tzdW0gPSBmYWxzZSB9ID0gb3B0aW9ucztcbiAgICBBZGRyZXNzLmFzc2VydCh2YWx1ZSwgeyBzdHJpY3Q6IGNoZWNrc3VtIH0pO1xuICAgIHJldHVybiB7XG4gICAgICAgIGR5bmFtaWM6IGZhbHNlLFxuICAgICAgICBlbmNvZGVkOiBIZXgucGFkTGVmdCh2YWx1ZS50b0xvd2VyQ2FzZSgpKSxcbiAgICB9O1xufVxuZnVuY3Rpb24gZW5jb2RlQXJyYXkodmFsdWUsIG9wdGlvbnMpIHtcbiAgICBjb25zdCB7IGNoZWNrc3VtQWRkcmVzcywgbGVuZ3RoLCBwYXJhbWV0ZXIgfSA9IG9wdGlvbnM7XG4gICAgY29uc3QgZHluYW1pYyA9IGxlbmd0aCA9PT0gbnVsbDtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkodmFsdWUpKVxuICAgICAgICB0aHJvdyBuZXcgQWJpUGFyYW1ldGVycy5JbnZhbGlkQXJyYXlFcnJvcih2YWx1ZSk7XG4gICAgaWYgKCFkeW5hbWljICYmIHZhbHVlLmxlbmd0aCAhPT0gbGVuZ3RoKVxuICAgICAgICB0aHJvdyBuZXcgQWJpUGFyYW1ldGVycy5BcnJheUxlbmd0aE1pc21hdGNoRXJyb3Ioe1xuICAgICAgICAgICAgZXhwZWN0ZWRMZW5ndGg6IGxlbmd0aCxcbiAgICAgICAgICAgIGdpdmVuTGVuZ3RoOiB2YWx1ZS5sZW5ndGgsXG4gICAgICAgICAgICB0eXBlOiBgJHtwYXJhbWV0ZXIudHlwZX1bJHtsZW5ndGh9XWAsXG4gICAgICAgIH0pO1xuICAgIGxldCBkeW5hbWljQ2hpbGQgPSBmYWxzZTtcbiAgICBjb25zdCBwcmVwYXJlZFBhcmFtZXRlcnMgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHZhbHVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IHByZXBhcmVkUGFyYW0gPSBwcmVwYXJlUGFyYW1ldGVyKHtcbiAgICAgICAgICAgIGNoZWNrc3VtQWRkcmVzcyxcbiAgICAgICAgICAgIHBhcmFtZXRlcixcbiAgICAgICAgICAgIHZhbHVlOiB2YWx1ZVtpXSxcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChwcmVwYXJlZFBhcmFtLmR5bmFtaWMpXG4gICAgICAgICAgICBkeW5hbWljQ2hpbGQgPSB0cnVlO1xuICAgICAgICBwcmVwYXJlZFBhcmFtZXRlcnMucHVzaChwcmVwYXJlZFBhcmFtKTtcbiAgICB9XG4gICAgaWYgKGR5bmFtaWMgfHwgZHluYW1pY0NoaWxkKSB7XG4gICAgICAgIGNvbnN0IGRhdGEgPSBlbmNvZGUocHJlcGFyZWRQYXJhbWV0ZXJzKTtcbiAgICAgICAgaWYgKGR5bmFtaWMpIHtcbiAgICAgICAgICAgIGNvbnN0IGxlbmd0aCA9IEhleC5mcm9tTnVtYmVyKHByZXBhcmVkUGFyYW1ldGVycy5sZW5ndGgsIHsgc2l6ZTogMzIgfSk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGR5bmFtaWM6IHRydWUsXG4gICAgICAgICAgICAgICAgZW5jb2RlZDogcHJlcGFyZWRQYXJhbWV0ZXJzLmxlbmd0aCA+IDAgPyBIZXguY29uY2F0KGxlbmd0aCwgZGF0YSkgOiBsZW5ndGgsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGlmIChkeW5hbWljQ2hpbGQpXG4gICAgICAgICAgICByZXR1cm4geyBkeW5hbWljOiB0cnVlLCBlbmNvZGVkOiBkYXRhIH07XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIGR5bmFtaWM6IGZhbHNlLFxuICAgICAgICBlbmNvZGVkOiBIZXguY29uY2F0KC4uLnByZXBhcmVkUGFyYW1ldGVycy5tYXAoKHsgZW5jb2RlZCB9KSA9PiBlbmNvZGVkKSksXG4gICAgfTtcbn1cbmZ1bmN0aW9uIGVuY29kZUJ5dGVzKHZhbHVlLCB7IHR5cGUgfSkge1xuICAgIGNvbnN0IFssIHBhcmFtZXRlcnNpemVdID0gdHlwZS5zcGxpdCgnYnl0ZXMnKTtcbiAgICBjb25zdCBieXRlc1NpemUgPSBIZXguc2l6ZSh2YWx1ZSk7XG4gICAgaWYgKCFwYXJhbWV0ZXJzaXplKSB7XG4gICAgICAgIGxldCB2YWx1ZV8gPSB2YWx1ZTtcbiAgICAgICAgaWYgKGJ5dGVzU2l6ZSAlIDMyICE9PSAwKVxuICAgICAgICAgICAgdmFsdWVfID0gSGV4LnBhZFJpZ2h0KHZhbHVlXywgTWF0aC5jZWlsKCh2YWx1ZS5sZW5ndGggLSAyKSAvIDIgLyAzMikgKiAzMik7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBkeW5hbWljOiB0cnVlLFxuICAgICAgICAgICAgZW5jb2RlZDogSGV4LmNvbmNhdChIZXgucGFkTGVmdChIZXguZnJvbU51bWJlcihieXRlc1NpemUsIHsgc2l6ZTogMzIgfSkpLCB2YWx1ZV8pLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBpZiAoYnl0ZXNTaXplICE9PSBOdW1iZXIucGFyc2VJbnQocGFyYW1ldGVyc2l6ZSwgMTApKVxuICAgICAgICB0aHJvdyBuZXcgQWJpUGFyYW1ldGVycy5CeXRlc1NpemVNaXNtYXRjaEVycm9yKHtcbiAgICAgICAgICAgIGV4cGVjdGVkU2l6ZTogTnVtYmVyLnBhcnNlSW50KHBhcmFtZXRlcnNpemUsIDEwKSxcbiAgICAgICAgICAgIHZhbHVlLFxuICAgICAgICB9KTtcbiAgICByZXR1cm4geyBkeW5hbWljOiBmYWxzZSwgZW5jb2RlZDogSGV4LnBhZFJpZ2h0KHZhbHVlKSB9O1xufVxuZnVuY3Rpb24gZW5jb2RlQm9vbGVhbih2YWx1ZSkge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdib29sZWFuJylcbiAgICAgICAgdGhyb3cgbmV3IEVycm9ycy5CYXNlRXJyb3IoYEludmFsaWQgYm9vbGVhbiB2YWx1ZTogXCIke3ZhbHVlfVwiICh0eXBlOiAke3R5cGVvZiB2YWx1ZX0pLiBFeHBlY3RlZDogXFxgdHJ1ZVxcYCBvciBcXGBmYWxzZVxcYC5gKTtcbiAgICByZXR1cm4geyBkeW5hbWljOiBmYWxzZSwgZW5jb2RlZDogSGV4LnBhZExlZnQoSGV4LmZyb21Cb29sZWFuKHZhbHVlKSkgfTtcbn1cbmZ1bmN0aW9uIGVuY29kZU51bWJlcih2YWx1ZSwgeyBzaWduZWQsIHNpemUgfSkge1xuICAgIGlmICh0eXBlb2Ygc2l6ZSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgY29uc3QgbWF4ID0gMm4gKiogKEJpZ0ludChzaXplKSAtIChzaWduZWQgPyAxbiA6IDBuKSkgLSAxbjtcbiAgICAgICAgY29uc3QgbWluID0gc2lnbmVkID8gLW1heCAtIDFuIDogMG47XG4gICAgICAgIGlmICh2YWx1ZSA+IG1heCB8fCB2YWx1ZSA8IG1pbilcbiAgICAgICAgICAgIHRocm93IG5ldyBIZXguSW50ZWdlck91dE9mUmFuZ2VFcnJvcih7XG4gICAgICAgICAgICAgICAgbWF4OiBtYXgudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICBtaW46IG1pbi50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgIHNpZ25lZCxcbiAgICAgICAgICAgICAgICBzaXplOiBzaXplIC8gOCxcbiAgICAgICAgICAgICAgICB2YWx1ZTogdmFsdWUudG9TdHJpbmcoKSxcbiAgICAgICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBkeW5hbWljOiBmYWxzZSxcbiAgICAgICAgZW5jb2RlZDogSGV4LmZyb21OdW1iZXIodmFsdWUsIHtcbiAgICAgICAgICAgIHNpemU6IDMyLFxuICAgICAgICAgICAgc2lnbmVkLFxuICAgICAgICB9KSxcbiAgICB9O1xufVxuZnVuY3Rpb24gZW5jb2RlU3RyaW5nKHZhbHVlKSB7XG4gICAgY29uc3QgaGV4VmFsdWUgPSBIZXguZnJvbVN0cmluZyh2YWx1ZSk7XG4gICAgY29uc3QgcGFydHNMZW5ndGggPSBNYXRoLmNlaWwoSGV4LnNpemUoaGV4VmFsdWUpIC8gMzIpO1xuICAgIGNvbnN0IHBhcnRzID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXJ0c0xlbmd0aDsgaSsrKSB7XG4gICAgICAgIHBhcnRzLnB1c2goSGV4LnBhZFJpZ2h0KEhleC5zbGljZShoZXhWYWx1ZSwgaSAqIDMyLCAoaSArIDEpICogMzIpKSk7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIGR5bmFtaWM6IHRydWUsXG4gICAgICAgIGVuY29kZWQ6IEhleC5jb25jYXQoSGV4LnBhZFJpZ2h0KEhleC5mcm9tTnVtYmVyKEhleC5zaXplKGhleFZhbHVlKSwgeyBzaXplOiAzMiB9KSksIC4uLnBhcnRzKSxcbiAgICB9O1xufVxuZnVuY3Rpb24gZW5jb2RlVHVwbGUodmFsdWUsIG9wdGlvbnMpIHtcbiAgICBjb25zdCB7IGNoZWNrc3VtQWRkcmVzcywgcGFyYW1ldGVyIH0gPSBvcHRpb25zO1xuICAgIGxldCBkeW5hbWljID0gZmFsc2U7XG4gICAgY29uc3QgcHJlcGFyZWRQYXJhbWV0ZXJzID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXJhbWV0ZXIuY29tcG9uZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBwYXJhbV8gPSBwYXJhbWV0ZXIuY29tcG9uZW50c1tpXTtcbiAgICAgICAgY29uc3QgaW5kZXggPSBBcnJheS5pc0FycmF5KHZhbHVlKSA/IGkgOiBwYXJhbV8ubmFtZTtcbiAgICAgICAgY29uc3QgcHJlcGFyZWRQYXJhbSA9IHByZXBhcmVQYXJhbWV0ZXIoe1xuICAgICAgICAgICAgY2hlY2tzdW1BZGRyZXNzLFxuICAgICAgICAgICAgcGFyYW1ldGVyOiBwYXJhbV8sXG4gICAgICAgICAgICB2YWx1ZTogdmFsdWVbaW5kZXhdLFxuICAgICAgICB9KTtcbiAgICAgICAgcHJlcGFyZWRQYXJhbWV0ZXJzLnB1c2gocHJlcGFyZWRQYXJhbSk7XG4gICAgICAgIGlmIChwcmVwYXJlZFBhcmFtLmR5bmFtaWMpXG4gICAgICAgICAgICBkeW5hbWljID0gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZHluYW1pYyxcbiAgICAgICAgZW5jb2RlZDogZHluYW1pY1xuICAgICAgICAgICAgPyBlbmNvZGUocHJlcGFyZWRQYXJhbWV0ZXJzKVxuICAgICAgICAgICAgOiBIZXguY29uY2F0KC4uLnByZXBhcmVkUGFyYW1ldGVycy5tYXAoKHsgZW5jb2RlZCB9KSA9PiBlbmNvZGVkKSksXG4gICAgfTtcbn1cbmZ1bmN0aW9uIGdldEFycmF5Q29tcG9uZW50cyh0eXBlKSB7XG4gICAgY29uc3QgbWF0Y2hlcyA9IHR5cGUubWF0Y2goL14oLiopXFxbKFxcZCspP1xcXSQvKTtcbiAgICByZXR1cm4gbWF0Y2hlc1xuICAgICAgICA/XG4gICAgICAgICAgICBbbWF0Y2hlc1syXSA/IE51bWJlcihtYXRjaGVzWzJdKSA6IG51bGwsIG1hdGNoZXNbMV1dXG4gICAgICAgIDogdW5kZWZpbmVkO1xufVxuZnVuY3Rpb24gaGFzRHluYW1pY0NoaWxkKHBhcmFtKSB7XG4gICAgY29uc3QgeyB0eXBlIH0gPSBwYXJhbTtcbiAgICBpZiAodHlwZSA9PT0gJ3N0cmluZycpXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIGlmICh0eXBlID09PSAnYnl0ZXMnKVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICBpZiAodHlwZS5lbmRzV2l0aCgnW10nKSlcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgaWYgKHR5cGUgPT09ICd0dXBsZScpXG4gICAgICAgIHJldHVybiBwYXJhbS5jb21wb25lbnRzPy5zb21lKGhhc0R5bmFtaWNDaGlsZCk7XG4gICAgY29uc3QgYXJyYXlDb21wb25lbnRzID0gZ2V0QXJyYXlDb21wb25lbnRzKHBhcmFtLnR5cGUpO1xuICAgIGlmIChhcnJheUNvbXBvbmVudHMgJiZcbiAgICAgICAgaGFzRHluYW1pY0NoaWxkKHtcbiAgICAgICAgICAgIC4uLnBhcmFtLFxuICAgICAgICAgICAgdHlwZTogYXJyYXlDb21wb25lbnRzWzFdLFxuICAgICAgICB9KSlcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YWJpUGFyYW1ldGVycy5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJkZWNvZGVQYXJhbWV0ZXIiLCJkZWNvZGVBZGRyZXNzIiwiZGVjb2RlQXJyYXkiLCJkZWNvZGVCb29sIiwiZGVjb2RlQnl0ZXMiLCJkZWNvZGVOdW1iZXIiLCJkZWNvZGVUdXBsZSIsImRlY29kZVN0cmluZyIsInByZXBhcmVQYXJhbWV0ZXJzIiwicHJlcGFyZVBhcmFtZXRlciIsImVuY29kZSIsImVuY29kZUFkZHJlc3MiLCJlbmNvZGVBcnJheSIsImVuY29kZUJ5dGVzIiwiZW5jb2RlQm9vbGVhbiIsImVuY29kZU51bWJlciIsImVuY29kZVN0cmluZyIsImVuY29kZVR1cGxlIiwiZ2V0QXJyYXlDb21wb25lbnRzIiwiaGFzRHluYW1pY0NoaWxkIiwiQWJpUGFyYW1ldGVycyIsInJlcXVpcmUiLCJBZGRyZXNzIiwiQnl0ZXMiLCJFcnJvcnMiLCJIZXgiLCJTb2xpZGl0eV9qc18xIiwiY3Vyc29yIiwicGFyYW0iLCJvcHRpb25zIiwiY2hlY2tzdW1BZGRyZXNzIiwic3RhdGljUG9zaXRpb24iLCJhcnJheUNvbXBvbmVudHMiLCJ0eXBlIiwibGVuZ3RoIiwiY2hlY2tzdW0iLCJzdGFydHNXaXRoIiwiSW52YWxpZFR5cGVFcnJvciIsInNpemVPZkxlbmd0aCIsInNpemVPZk9mZnNldCIsInJlYWRCeXRlcyIsIndyYXAiLCJhZGRyZXNzIiwiZnJvbUJ5dGVzIiwic2xpY2UiLCJvZmZzZXQiLCJ0b051bWJlciIsInN0YXJ0Iiwic3RhcnRPZkRhdGEiLCJzZXRQb3NpdGlvbiIsImR5bmFtaWNDaGlsZCIsImNvbnN1bWVkIiwiaSIsImRhdGEiLCJjb25zdW1lZF8iLCJwdXNoIiwidG9Cb29sZWFuIiwic2l6ZSIsIl8iLCJzcGxpdCIsIk51bWJlciIsInBhcnNlSW50Iiwic2lnbmVkIiwidG9CaWdJbnQiLCJoYXNVbm5hbWVkQ2hpbGQiLCJjb21wb25lbnRzIiwic29tZSIsIm5hbWUiLCJjb21wb25lbnQiLCJ0b1N0cmluZyIsInRyaW1MZWZ0IiwicGFyYW1ldGVycyIsInZhbHVlcyIsInByZXBhcmVkUGFyYW1ldGVycyIsInBhcmFtZXRlciIsInBhcmFtZXRlcl8iLCJpbnRlZ2VyUmVnZXgiLCJleGVjIiwic3RhdGljU2l6ZSIsImR5bmFtaWMiLCJlbmNvZGVkIiwic3RhdGljUGFyYW1ldGVycyIsImR5bmFtaWNQYXJhbWV0ZXJzIiwiZHluYW1pY1NpemUiLCJmcm9tTnVtYmVyIiwiY29uY2F0IiwiYXNzZXJ0Iiwic3RyaWN0IiwicGFkTGVmdCIsInRvTG93ZXJDYXNlIiwiQXJyYXkiLCJpc0FycmF5IiwiSW52YWxpZEFycmF5RXJyb3IiLCJBcnJheUxlbmd0aE1pc21hdGNoRXJyb3IiLCJleHBlY3RlZExlbmd0aCIsImdpdmVuTGVuZ3RoIiwicHJlcGFyZWRQYXJhbSIsIm1hcCIsInBhcmFtZXRlcnNpemUiLCJieXRlc1NpemUiLCJ2YWx1ZV8iLCJwYWRSaWdodCIsIk1hdGgiLCJjZWlsIiwiQnl0ZXNTaXplTWlzbWF0Y2hFcnJvciIsImV4cGVjdGVkU2l6ZSIsIkJhc2VFcnJvciIsImZyb21Cb29sZWFuIiwibWF4IiwiQmlnSW50IiwibWluIiwiSW50ZWdlck91dE9mUmFuZ2VFcnJvciIsImhleFZhbHVlIiwiZnJvbVN0cmluZyIsInBhcnRzTGVuZ3RoIiwicGFydHMiLCJwYXJhbV8iLCJpbmRleCIsIm1hdGNoZXMiLCJtYXRjaCIsInVuZGVmaW5lZCIsImVuZHNXaXRoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ox/_cjs/core/internal/abiParameters.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ox/_cjs/core/internal/bytes.js":
/*!*****************************************************!*\
  !*** ./node_modules/ox/_cjs/core/internal/bytes.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.charCodeMap = void 0;\nexports.assertSize = assertSize;\nexports.assertStartOffset = assertStartOffset;\nexports.assertEndOffset = assertEndOffset;\nexports.charCodeToBase16 = charCodeToBase16;\nexports.pad = pad;\nexports.trim = trim;\nconst Bytes = __webpack_require__(/*! ../Bytes.js */ \"(ssr)/./node_modules/ox/_cjs/core/Bytes.js\");\nfunction assertSize(bytes, size_) {\n    if (Bytes.size(bytes) > size_) throw new Bytes.SizeOverflowError({\n        givenSize: Bytes.size(bytes),\n        maxSize: size_\n    });\n}\nfunction assertStartOffset(value, start) {\n    if (typeof start === \"number\" && start > 0 && start > Bytes.size(value) - 1) throw new Bytes.SliceOffsetOutOfBoundsError({\n        offset: start,\n        position: \"start\",\n        size: Bytes.size(value)\n    });\n}\nfunction assertEndOffset(value, start, end) {\n    if (typeof start === \"number\" && typeof end === \"number\" && Bytes.size(value) !== end - start) {\n        throw new Bytes.SliceOffsetOutOfBoundsError({\n            offset: end,\n            position: \"end\",\n            size: Bytes.size(value)\n        });\n    }\n}\nexports.charCodeMap = {\n    zero: 48,\n    nine: 57,\n    A: 65,\n    F: 70,\n    a: 97,\n    f: 102\n};\nfunction charCodeToBase16(char) {\n    if (char >= exports.charCodeMap.zero && char <= exports.charCodeMap.nine) return char - exports.charCodeMap.zero;\n    if (char >= exports.charCodeMap.A && char <= exports.charCodeMap.F) return char - (exports.charCodeMap.A - 10);\n    if (char >= exports.charCodeMap.a && char <= exports.charCodeMap.f) return char - (exports.charCodeMap.a - 10);\n    return undefined;\n}\nfunction pad(bytes, options = {}) {\n    const { dir, size = 32 } = options;\n    if (size === 0) return bytes;\n    if (bytes.length > size) throw new Bytes.SizeExceedsPaddingSizeError({\n        size: bytes.length,\n        targetSize: size,\n        type: \"Bytes\"\n    });\n    const paddedBytes = new Uint8Array(size);\n    for(let i = 0; i < size; i++){\n        const padEnd = dir === \"right\";\n        paddedBytes[padEnd ? i : size - i - 1] = bytes[padEnd ? i : bytes.length - i - 1];\n    }\n    return paddedBytes;\n}\nfunction trim(value, options = {}) {\n    const { dir = \"left\" } = options;\n    let data = value;\n    let sliceLength = 0;\n    for(let i = 0; i < data.length - 1; i++){\n        if (data[dir === \"left\" ? i : data.length - i - 1].toString() === \"0\") sliceLength++;\n        else break;\n    }\n    data = dir === \"left\" ? data.slice(sliceLength) : data.slice(0, data.length - sliceLength);\n    return data;\n} //# sourceMappingURL=bytes.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb3gvX2Nqcy9jb3JlL2ludGVybmFsL2J5dGVzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxtQkFBbUIsR0FBRyxLQUFLO0FBQzNCQSxrQkFBa0IsR0FBR0c7QUFDckJILHlCQUF5QixHQUFHSTtBQUM1QkosdUJBQXVCLEdBQUdLO0FBQzFCTCx3QkFBd0IsR0FBR007QUFDM0JOLFdBQVcsR0FBR087QUFDZFAsWUFBWSxHQUFHUTtBQUNmLE1BQU1DLFFBQVFDLG1CQUFPQSxDQUFDLCtEQUFhO0FBQ25DLFNBQVNQLFdBQVdRLEtBQUssRUFBRUMsS0FBSztJQUM1QixJQUFJSCxNQUFNSSxJQUFJLENBQUNGLFNBQVNDLE9BQ3BCLE1BQU0sSUFBSUgsTUFBTUssaUJBQWlCLENBQUM7UUFDOUJDLFdBQVdOLE1BQU1JLElBQUksQ0FBQ0Y7UUFDdEJLLFNBQVNKO0lBQ2I7QUFDUjtBQUNBLFNBQVNSLGtCQUFrQkgsS0FBSyxFQUFFZ0IsS0FBSztJQUNuQyxJQUFJLE9BQU9BLFVBQVUsWUFBWUEsUUFBUSxLQUFLQSxRQUFRUixNQUFNSSxJQUFJLENBQUNaLFNBQVMsR0FDdEUsTUFBTSxJQUFJUSxNQUFNUywyQkFBMkIsQ0FBQztRQUN4Q0MsUUFBUUY7UUFDUkcsVUFBVTtRQUNWUCxNQUFNSixNQUFNSSxJQUFJLENBQUNaO0lBQ3JCO0FBQ1I7QUFDQSxTQUFTSSxnQkFBZ0JKLEtBQUssRUFBRWdCLEtBQUssRUFBRUksR0FBRztJQUN0QyxJQUFJLE9BQU9KLFVBQVUsWUFDakIsT0FBT0ksUUFBUSxZQUNmWixNQUFNSSxJQUFJLENBQUNaLFdBQVdvQixNQUFNSixPQUFPO1FBQ25DLE1BQU0sSUFBSVIsTUFBTVMsMkJBQTJCLENBQUM7WUFDeENDLFFBQVFFO1lBQ1JELFVBQVU7WUFDVlAsTUFBTUosTUFBTUksSUFBSSxDQUFDWjtRQUNyQjtJQUNKO0FBQ0o7QUFDQUQsbUJBQW1CLEdBQUc7SUFDbEJzQixNQUFNO0lBQ05DLE1BQU07SUFDTkMsR0FBRztJQUNIQyxHQUFHO0lBQ0hDLEdBQUc7SUFDSEMsR0FBRztBQUNQO0FBQ0EsU0FBU3JCLGlCQUFpQnNCLElBQUk7SUFDMUIsSUFBSUEsUUFBUTVCLFFBQVFFLFdBQVcsQ0FBQ29CLElBQUksSUFBSU0sUUFBUTVCLFFBQVFFLFdBQVcsQ0FBQ3FCLElBQUksRUFDcEUsT0FBT0ssT0FBTzVCLFFBQVFFLFdBQVcsQ0FBQ29CLElBQUk7SUFDMUMsSUFBSU0sUUFBUTVCLFFBQVFFLFdBQVcsQ0FBQ3NCLENBQUMsSUFBSUksUUFBUTVCLFFBQVFFLFdBQVcsQ0FBQ3VCLENBQUMsRUFDOUQsT0FBT0csT0FBUTVCLENBQUFBLFFBQVFFLFdBQVcsQ0FBQ3NCLENBQUMsR0FBRyxFQUFDO0lBQzVDLElBQUlJLFFBQVE1QixRQUFRRSxXQUFXLENBQUN3QixDQUFDLElBQUlFLFFBQVE1QixRQUFRRSxXQUFXLENBQUN5QixDQUFDLEVBQzlELE9BQU9DLE9BQVE1QixDQUFBQSxRQUFRRSxXQUFXLENBQUN3QixDQUFDLEdBQUcsRUFBQztJQUM1QyxPQUFPRztBQUNYO0FBQ0EsU0FBU3RCLElBQUlJLEtBQUssRUFBRW1CLFVBQVUsQ0FBQyxDQUFDO0lBQzVCLE1BQU0sRUFBRUMsR0FBRyxFQUFFbEIsT0FBTyxFQUFFLEVBQUUsR0FBR2lCO0lBQzNCLElBQUlqQixTQUFTLEdBQ1QsT0FBT0Y7SUFDWCxJQUFJQSxNQUFNcUIsTUFBTSxHQUFHbkIsTUFDZixNQUFNLElBQUlKLE1BQU13QiwyQkFBMkIsQ0FBQztRQUN4Q3BCLE1BQU1GLE1BQU1xQixNQUFNO1FBQ2xCRSxZQUFZckI7UUFDWnNCLE1BQU07SUFDVjtJQUNKLE1BQU1DLGNBQWMsSUFBSUMsV0FBV3hCO0lBQ25DLElBQUssSUFBSXlCLElBQUksR0FBR0EsSUFBSXpCLE1BQU15QixJQUFLO1FBQzNCLE1BQU1DLFNBQVNSLFFBQVE7UUFDdkJLLFdBQVcsQ0FBQ0csU0FBU0QsSUFBSXpCLE9BQU95QixJQUFJLEVBQUUsR0FDbEMzQixLQUFLLENBQUM0QixTQUFTRCxJQUFJM0IsTUFBTXFCLE1BQU0sR0FBR00sSUFBSSxFQUFFO0lBQ2hEO0lBQ0EsT0FBT0Y7QUFDWDtBQUNBLFNBQVM1QixLQUFLUCxLQUFLLEVBQUU2QixVQUFVLENBQUMsQ0FBQztJQUM3QixNQUFNLEVBQUVDLE1BQU0sTUFBTSxFQUFFLEdBQUdEO0lBQ3pCLElBQUlVLE9BQU92QztJQUNYLElBQUl3QyxjQUFjO0lBQ2xCLElBQUssSUFBSUgsSUFBSSxHQUFHQSxJQUFJRSxLQUFLUixNQUFNLEdBQUcsR0FBR00sSUFBSztRQUN0QyxJQUFJRSxJQUFJLENBQUNULFFBQVEsU0FBU08sSUFBSUUsS0FBS1IsTUFBTSxHQUFHTSxJQUFJLEVBQUUsQ0FBQ0ksUUFBUSxPQUFPLEtBQzlERDthQUVBO0lBQ1I7SUFDQUQsT0FDSVQsUUFBUSxTQUNGUyxLQUFLRyxLQUFLLENBQUNGLGVBQ1hELEtBQUtHLEtBQUssQ0FBQyxHQUFHSCxLQUFLUixNQUFNLEdBQUdTO0lBQ3RDLE9BQU9EO0FBQ1gsRUFDQSxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93c3Rvbi11aS8uL25vZGVfbW9kdWxlcy9veC9fY2pzL2NvcmUvaW50ZXJuYWwvYnl0ZXMuanM/NDY2NiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuY2hhckNvZGVNYXAgPSB2b2lkIDA7XG5leHBvcnRzLmFzc2VydFNpemUgPSBhc3NlcnRTaXplO1xuZXhwb3J0cy5hc3NlcnRTdGFydE9mZnNldCA9IGFzc2VydFN0YXJ0T2Zmc2V0O1xuZXhwb3J0cy5hc3NlcnRFbmRPZmZzZXQgPSBhc3NlcnRFbmRPZmZzZXQ7XG5leHBvcnRzLmNoYXJDb2RlVG9CYXNlMTYgPSBjaGFyQ29kZVRvQmFzZTE2O1xuZXhwb3J0cy5wYWQgPSBwYWQ7XG5leHBvcnRzLnRyaW0gPSB0cmltO1xuY29uc3QgQnl0ZXMgPSByZXF1aXJlKFwiLi4vQnl0ZXMuanNcIik7XG5mdW5jdGlvbiBhc3NlcnRTaXplKGJ5dGVzLCBzaXplXykge1xuICAgIGlmIChCeXRlcy5zaXplKGJ5dGVzKSA+IHNpemVfKVxuICAgICAgICB0aHJvdyBuZXcgQnl0ZXMuU2l6ZU92ZXJmbG93RXJyb3Ioe1xuICAgICAgICAgICAgZ2l2ZW5TaXplOiBCeXRlcy5zaXplKGJ5dGVzKSxcbiAgICAgICAgICAgIG1heFNpemU6IHNpemVfLFxuICAgICAgICB9KTtcbn1cbmZ1bmN0aW9uIGFzc2VydFN0YXJ0T2Zmc2V0KHZhbHVlLCBzdGFydCkge1xuICAgIGlmICh0eXBlb2Ygc3RhcnQgPT09ICdudW1iZXInICYmIHN0YXJ0ID4gMCAmJiBzdGFydCA+IEJ5dGVzLnNpemUodmFsdWUpIC0gMSlcbiAgICAgICAgdGhyb3cgbmV3IEJ5dGVzLlNsaWNlT2Zmc2V0T3V0T2ZCb3VuZHNFcnJvcih7XG4gICAgICAgICAgICBvZmZzZXQ6IHN0YXJ0LFxuICAgICAgICAgICAgcG9zaXRpb246ICdzdGFydCcsXG4gICAgICAgICAgICBzaXplOiBCeXRlcy5zaXplKHZhbHVlKSxcbiAgICAgICAgfSk7XG59XG5mdW5jdGlvbiBhc3NlcnRFbmRPZmZzZXQodmFsdWUsIHN0YXJ0LCBlbmQpIHtcbiAgICBpZiAodHlwZW9mIHN0YXJ0ID09PSAnbnVtYmVyJyAmJlxuICAgICAgICB0eXBlb2YgZW5kID09PSAnbnVtYmVyJyAmJlxuICAgICAgICBCeXRlcy5zaXplKHZhbHVlKSAhPT0gZW5kIC0gc3RhcnQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEJ5dGVzLlNsaWNlT2Zmc2V0T3V0T2ZCb3VuZHNFcnJvcih7XG4gICAgICAgICAgICBvZmZzZXQ6IGVuZCxcbiAgICAgICAgICAgIHBvc2l0aW9uOiAnZW5kJyxcbiAgICAgICAgICAgIHNpemU6IEJ5dGVzLnNpemUodmFsdWUpLFxuICAgICAgICB9KTtcbiAgICB9XG59XG5leHBvcnRzLmNoYXJDb2RlTWFwID0ge1xuICAgIHplcm86IDQ4LFxuICAgIG5pbmU6IDU3LFxuICAgIEE6IDY1LFxuICAgIEY6IDcwLFxuICAgIGE6IDk3LFxuICAgIGY6IDEwMixcbn07XG5mdW5jdGlvbiBjaGFyQ29kZVRvQmFzZTE2KGNoYXIpIHtcbiAgICBpZiAoY2hhciA+PSBleHBvcnRzLmNoYXJDb2RlTWFwLnplcm8gJiYgY2hhciA8PSBleHBvcnRzLmNoYXJDb2RlTWFwLm5pbmUpXG4gICAgICAgIHJldHVybiBjaGFyIC0gZXhwb3J0cy5jaGFyQ29kZU1hcC56ZXJvO1xuICAgIGlmIChjaGFyID49IGV4cG9ydHMuY2hhckNvZGVNYXAuQSAmJiBjaGFyIDw9IGV4cG9ydHMuY2hhckNvZGVNYXAuRilcbiAgICAgICAgcmV0dXJuIGNoYXIgLSAoZXhwb3J0cy5jaGFyQ29kZU1hcC5BIC0gMTApO1xuICAgIGlmIChjaGFyID49IGV4cG9ydHMuY2hhckNvZGVNYXAuYSAmJiBjaGFyIDw9IGV4cG9ydHMuY2hhckNvZGVNYXAuZilcbiAgICAgICAgcmV0dXJuIGNoYXIgLSAoZXhwb3J0cy5jaGFyQ29kZU1hcC5hIC0gMTApO1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG59XG5mdW5jdGlvbiBwYWQoYnl0ZXMsIG9wdGlvbnMgPSB7fSkge1xuICAgIGNvbnN0IHsgZGlyLCBzaXplID0gMzIgfSA9IG9wdGlvbnM7XG4gICAgaWYgKHNpemUgPT09IDApXG4gICAgICAgIHJldHVybiBieXRlcztcbiAgICBpZiAoYnl0ZXMubGVuZ3RoID4gc2l6ZSlcbiAgICAgICAgdGhyb3cgbmV3IEJ5dGVzLlNpemVFeGNlZWRzUGFkZGluZ1NpemVFcnJvcih7XG4gICAgICAgICAgICBzaXplOiBieXRlcy5sZW5ndGgsXG4gICAgICAgICAgICB0YXJnZXRTaXplOiBzaXplLFxuICAgICAgICAgICAgdHlwZTogJ0J5dGVzJyxcbiAgICAgICAgfSk7XG4gICAgY29uc3QgcGFkZGVkQnl0ZXMgPSBuZXcgVWludDhBcnJheShzaXplKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNpemU7IGkrKykge1xuICAgICAgICBjb25zdCBwYWRFbmQgPSBkaXIgPT09ICdyaWdodCc7XG4gICAgICAgIHBhZGRlZEJ5dGVzW3BhZEVuZCA/IGkgOiBzaXplIC0gaSAtIDFdID1cbiAgICAgICAgICAgIGJ5dGVzW3BhZEVuZCA/IGkgOiBieXRlcy5sZW5ndGggLSBpIC0gMV07XG4gICAgfVxuICAgIHJldHVybiBwYWRkZWRCeXRlcztcbn1cbmZ1bmN0aW9uIHRyaW0odmFsdWUsIG9wdGlvbnMgPSB7fSkge1xuICAgIGNvbnN0IHsgZGlyID0gJ2xlZnQnIH0gPSBvcHRpb25zO1xuICAgIGxldCBkYXRhID0gdmFsdWU7XG4gICAgbGV0IHNsaWNlTGVuZ3RoID0gMDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRhdGEubGVuZ3RoIC0gMTsgaSsrKSB7XG4gICAgICAgIGlmIChkYXRhW2RpciA9PT0gJ2xlZnQnID8gaSA6IGRhdGEubGVuZ3RoIC0gaSAtIDFdLnRvU3RyaW5nKCkgPT09ICcwJylcbiAgICAgICAgICAgIHNsaWNlTGVuZ3RoKys7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBkYXRhID1cbiAgICAgICAgZGlyID09PSAnbGVmdCdcbiAgICAgICAgICAgID8gZGF0YS5zbGljZShzbGljZUxlbmd0aClcbiAgICAgICAgICAgIDogZGF0YS5zbGljZSgwLCBkYXRhLmxlbmd0aCAtIHNsaWNlTGVuZ3RoKTtcbiAgICByZXR1cm4gZGF0YTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJ5dGVzLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImNoYXJDb2RlTWFwIiwiYXNzZXJ0U2l6ZSIsImFzc2VydFN0YXJ0T2Zmc2V0IiwiYXNzZXJ0RW5kT2Zmc2V0IiwiY2hhckNvZGVUb0Jhc2UxNiIsInBhZCIsInRyaW0iLCJCeXRlcyIsInJlcXVpcmUiLCJieXRlcyIsInNpemVfIiwic2l6ZSIsIlNpemVPdmVyZmxvd0Vycm9yIiwiZ2l2ZW5TaXplIiwibWF4U2l6ZSIsInN0YXJ0IiwiU2xpY2VPZmZzZXRPdXRPZkJvdW5kc0Vycm9yIiwib2Zmc2V0IiwicG9zaXRpb24iLCJlbmQiLCJ6ZXJvIiwibmluZSIsIkEiLCJGIiwiYSIsImYiLCJjaGFyIiwidW5kZWZpbmVkIiwib3B0aW9ucyIsImRpciIsImxlbmd0aCIsIlNpemVFeGNlZWRzUGFkZGluZ1NpemVFcnJvciIsInRhcmdldFNpemUiLCJ0eXBlIiwicGFkZGVkQnl0ZXMiLCJVaW50OEFycmF5IiwiaSIsInBhZEVuZCIsImRhdGEiLCJzbGljZUxlbmd0aCIsInRvU3RyaW5nIiwic2xpY2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ox/_cjs/core/internal/bytes.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ox/_cjs/core/internal/cursor.js":
/*!******************************************************!*\
  !*** ./node_modules/ox/_cjs/core/internal/cursor.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.RecursiveReadLimitExceededError = exports.PositionOutOfBoundsError = exports.NegativeOffsetError = void 0;\nexports.create = create;\nconst Errors = __webpack_require__(/*! ../Errors.js */ \"(ssr)/./node_modules/ox/_cjs/core/Errors.js\");\nconst staticCursor = {\n    bytes: new Uint8Array(),\n    dataView: new DataView(new ArrayBuffer(0)),\n    position: 0,\n    positionReadCount: new Map(),\n    recursiveReadCount: 0,\n    recursiveReadLimit: Number.POSITIVE_INFINITY,\n    assertReadLimit () {\n        if (this.recursiveReadCount >= this.recursiveReadLimit) throw new RecursiveReadLimitExceededError({\n            count: this.recursiveReadCount + 1,\n            limit: this.recursiveReadLimit\n        });\n    },\n    assertPosition (position) {\n        if (position < 0 || position > this.bytes.length - 1) throw new PositionOutOfBoundsError({\n            length: this.bytes.length,\n            position\n        });\n    },\n    decrementPosition (offset) {\n        if (offset < 0) throw new NegativeOffsetError({\n            offset\n        });\n        const position = this.position - offset;\n        this.assertPosition(position);\n        this.position = position;\n    },\n    getReadCount (position) {\n        return this.positionReadCount.get(position || this.position) || 0;\n    },\n    incrementPosition (offset) {\n        if (offset < 0) throw new NegativeOffsetError({\n            offset\n        });\n        const position = this.position + offset;\n        this.assertPosition(position);\n        this.position = position;\n    },\n    inspectByte (position_) {\n        const position = position_ ?? this.position;\n        this.assertPosition(position);\n        return this.bytes[position];\n    },\n    inspectBytes (length, position_) {\n        const position = position_ ?? this.position;\n        this.assertPosition(position + length - 1);\n        return this.bytes.subarray(position, position + length);\n    },\n    inspectUint8 (position_) {\n        const position = position_ ?? this.position;\n        this.assertPosition(position);\n        return this.bytes[position];\n    },\n    inspectUint16 (position_) {\n        const position = position_ ?? this.position;\n        this.assertPosition(position + 1);\n        return this.dataView.getUint16(position);\n    },\n    inspectUint24 (position_) {\n        const position = position_ ?? this.position;\n        this.assertPosition(position + 2);\n        return (this.dataView.getUint16(position) << 8) + this.dataView.getUint8(position + 2);\n    },\n    inspectUint32 (position_) {\n        const position = position_ ?? this.position;\n        this.assertPosition(position + 3);\n        return this.dataView.getUint32(position);\n    },\n    pushByte (byte) {\n        this.assertPosition(this.position);\n        this.bytes[this.position] = byte;\n        this.position++;\n    },\n    pushBytes (bytes) {\n        this.assertPosition(this.position + bytes.length - 1);\n        this.bytes.set(bytes, this.position);\n        this.position += bytes.length;\n    },\n    pushUint8 (value) {\n        this.assertPosition(this.position);\n        this.bytes[this.position] = value;\n        this.position++;\n    },\n    pushUint16 (value) {\n        this.assertPosition(this.position + 1);\n        this.dataView.setUint16(this.position, value);\n        this.position += 2;\n    },\n    pushUint24 (value) {\n        this.assertPosition(this.position + 2);\n        this.dataView.setUint16(this.position, value >> 8);\n        this.dataView.setUint8(this.position + 2, value & ~4294967040);\n        this.position += 3;\n    },\n    pushUint32 (value) {\n        this.assertPosition(this.position + 3);\n        this.dataView.setUint32(this.position, value);\n        this.position += 4;\n    },\n    readByte () {\n        this.assertReadLimit();\n        this._touch();\n        const value = this.inspectByte();\n        this.position++;\n        return value;\n    },\n    readBytes (length, size) {\n        this.assertReadLimit();\n        this._touch();\n        const value = this.inspectBytes(length);\n        this.position += size ?? length;\n        return value;\n    },\n    readUint8 () {\n        this.assertReadLimit();\n        this._touch();\n        const value = this.inspectUint8();\n        this.position += 1;\n        return value;\n    },\n    readUint16 () {\n        this.assertReadLimit();\n        this._touch();\n        const value = this.inspectUint16();\n        this.position += 2;\n        return value;\n    },\n    readUint24 () {\n        this.assertReadLimit();\n        this._touch();\n        const value = this.inspectUint24();\n        this.position += 3;\n        return value;\n    },\n    readUint32 () {\n        this.assertReadLimit();\n        this._touch();\n        const value = this.inspectUint32();\n        this.position += 4;\n        return value;\n    },\n    get remaining () {\n        return this.bytes.length - this.position;\n    },\n    setPosition (position) {\n        const oldPosition = this.position;\n        this.assertPosition(position);\n        this.position = position;\n        return ()=>this.position = oldPosition;\n    },\n    _touch () {\n        if (this.recursiveReadLimit === Number.POSITIVE_INFINITY) return;\n        const count = this.getReadCount();\n        this.positionReadCount.set(this.position, count + 1);\n        if (count > 0) this.recursiveReadCount++;\n    }\n};\nfunction create(bytes, { recursiveReadLimit = 8192 } = {}) {\n    const cursor = Object.create(staticCursor);\n    cursor.bytes = bytes;\n    cursor.dataView = new DataView(bytes.buffer, bytes.byteOffset, bytes.byteLength);\n    cursor.positionReadCount = new Map();\n    cursor.recursiveReadLimit = recursiveReadLimit;\n    return cursor;\n}\nclass NegativeOffsetError extends Errors.BaseError {\n    constructor({ offset }){\n        super(`Offset \\`${offset}\\` cannot be negative.`);\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"Cursor.NegativeOffsetError\"\n        });\n    }\n}\nexports.NegativeOffsetError = NegativeOffsetError;\nclass PositionOutOfBoundsError extends Errors.BaseError {\n    constructor({ length, position }){\n        super(`Position \\`${position}\\` is out of bounds (\\`0 < position < ${length}\\`).`);\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"Cursor.PositionOutOfBoundsError\"\n        });\n    }\n}\nexports.PositionOutOfBoundsError = PositionOutOfBoundsError;\nclass RecursiveReadLimitExceededError extends Errors.BaseError {\n    constructor({ count, limit }){\n        super(`Recursive read limit of \\`${limit}\\` exceeded (recursive read count: \\`${count}\\`).`);\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"Cursor.RecursiveReadLimitExceededError\"\n        });\n    }\n}\nexports.RecursiveReadLimitExceededError = RecursiveReadLimitExceededError; //# sourceMappingURL=cursor.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb3gvX2Nqcy9jb3JlL2ludGVybmFsL2N1cnNvci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsdUNBQXVDLEdBQUdBLGdDQUFnQyxHQUFHQSwyQkFBMkIsR0FBRyxLQUFLO0FBQ2hIQSxjQUFjLEdBQUdLO0FBQ2pCLE1BQU1DLFNBQVNDLG1CQUFPQSxDQUFDLGlFQUFjO0FBQ3JDLE1BQU1DLGVBQWU7SUFDakJDLE9BQU8sSUFBSUM7SUFDWEMsVUFBVSxJQUFJQyxTQUFTLElBQUlDLFlBQVk7SUFDdkNDLFVBQVU7SUFDVkMsbUJBQW1CLElBQUlDO0lBQ3ZCQyxvQkFBb0I7SUFDcEJDLG9CQUFvQkMsT0FBT0MsaUJBQWlCO0lBQzVDQztRQUNJLElBQUksSUFBSSxDQUFDSixrQkFBa0IsSUFBSSxJQUFJLENBQUNDLGtCQUFrQixFQUNsRCxNQUFNLElBQUloQixnQ0FBZ0M7WUFDdENvQixPQUFPLElBQUksQ0FBQ0wsa0JBQWtCLEdBQUc7WUFDakNNLE9BQU8sSUFBSSxDQUFDTCxrQkFBa0I7UUFDbEM7SUFDUjtJQUNBTSxnQkFBZVYsUUFBUTtRQUNuQixJQUFJQSxXQUFXLEtBQUtBLFdBQVcsSUFBSSxDQUFDTCxLQUFLLENBQUNnQixNQUFNLEdBQUcsR0FDL0MsTUFBTSxJQUFJdEIseUJBQXlCO1lBQy9Cc0IsUUFBUSxJQUFJLENBQUNoQixLQUFLLENBQUNnQixNQUFNO1lBQ3pCWDtRQUNKO0lBQ1I7SUFDQVksbUJBQWtCQyxNQUFNO1FBQ3BCLElBQUlBLFNBQVMsR0FDVCxNQUFNLElBQUl2QixvQkFBb0I7WUFBRXVCO1FBQU87UUFDM0MsTUFBTWIsV0FBVyxJQUFJLENBQUNBLFFBQVEsR0FBR2E7UUFDakMsSUFBSSxDQUFDSCxjQUFjLENBQUNWO1FBQ3BCLElBQUksQ0FBQ0EsUUFBUSxHQUFHQTtJQUNwQjtJQUNBYyxjQUFhZCxRQUFRO1FBQ2pCLE9BQU8s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VnZFLE9BQU87UUFDWDtJQUNKO0FBQ0o7QUFDQUQsdUNBQXVDLEdBQUdFLGlDQUMxQyxrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93c3Rvbi11aS8uL25vZGVfbW9kdWxlcy9veC9fY2pzL2NvcmUvaW50ZXJuYWwvY3Vyc29yLmpzP2FkOTMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlJlY3Vyc2l2ZVJlYWRMaW1pdEV4Y2VlZGVkRXJyb3IgPSBleHBvcnRzLlBvc2l0aW9uT3V0T2ZCb3VuZHNFcnJvciA9IGV4cG9ydHMuTmVnYXRpdmVPZmZzZXRFcnJvciA9IHZvaWQgMDtcbmV4cG9ydHMuY3JlYXRlID0gY3JlYXRlO1xuY29uc3QgRXJyb3JzID0gcmVxdWlyZShcIi4uL0Vycm9ycy5qc1wiKTtcbmNvbnN0IHN0YXRpY0N1cnNvciA9IHtcbiAgICBieXRlczogbmV3IFVpbnQ4QXJyYXkoKSxcbiAgICBkYXRhVmlldzogbmV3IERhdGFWaWV3KG5ldyBBcnJheUJ1ZmZlcigwKSksXG4gICAgcG9zaXRpb246IDAsXG4gICAgcG9zaXRpb25SZWFkQ291bnQ6IG5ldyBNYXAoKSxcbiAgICByZWN1cnNpdmVSZWFkQ291bnQ6IDAsXG4gICAgcmVjdXJzaXZlUmVhZExpbWl0OiBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFksXG4gICAgYXNzZXJ0UmVhZExpbWl0KCkge1xuICAgICAgICBpZiAodGhpcy5yZWN1cnNpdmVSZWFkQ291bnQgPj0gdGhpcy5yZWN1cnNpdmVSZWFkTGltaXQpXG4gICAgICAgICAgICB0aHJvdyBuZXcgUmVjdXJzaXZlUmVhZExpbWl0RXhjZWVkZWRFcnJvcih7XG4gICAgICAgICAgICAgICAgY291bnQ6IHRoaXMucmVjdXJzaXZlUmVhZENvdW50ICsgMSxcbiAgICAgICAgICAgICAgICBsaW1pdDogdGhpcy5yZWN1cnNpdmVSZWFkTGltaXQsXG4gICAgICAgICAgICB9KTtcbiAgICB9LFxuICAgIGFzc2VydFBvc2l0aW9uKHBvc2l0aW9uKSB7XG4gICAgICAgIGlmIChwb3NpdGlvbiA8IDAgfHwgcG9zaXRpb24gPiB0aGlzLmJ5dGVzLmxlbmd0aCAtIDEpXG4gICAgICAgICAgICB0aHJvdyBuZXcgUG9zaXRpb25PdXRPZkJvdW5kc0Vycm9yKHtcbiAgICAgICAgICAgICAgICBsZW5ndGg6IHRoaXMuYnl0ZXMubGVuZ3RoLFxuICAgICAgICAgICAgICAgIHBvc2l0aW9uLFxuICAgICAgICAgICAgfSk7XG4gICAgfSxcbiAgICBkZWNyZW1lbnRQb3NpdGlvbihvZmZzZXQpIHtcbiAgICAgICAgaWYgKG9mZnNldCA8IDApXG4gICAgICAgICAgICB0aHJvdyBuZXcgTmVnYXRpdmVPZmZzZXRFcnJvcih7IG9mZnNldCB9KTtcbiAgICAgICAgY29uc3QgcG9zaXRpb24gPSB0aGlzLnBvc2l0aW9uIC0gb2Zmc2V0O1xuICAgICAgICB0aGlzLmFzc2VydFBvc2l0aW9uKHBvc2l0aW9uKTtcbiAgICAgICAgdGhpcy5wb3NpdGlvbiA9IHBvc2l0aW9uO1xuICAgIH0sXG4gICAgZ2V0UmVhZENvdW50KHBvc2l0aW9uKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBvc2l0aW9uUmVhZENvdW50LmdldChwb3NpdGlvbiB8fCB0aGlzLnBvc2l0aW9uKSB8fCAwO1xuICAgIH0sXG4gICAgaW5jcmVtZW50UG9zaXRpb24ob2Zmc2V0KSB7XG4gICAgICAgIGlmIChvZmZzZXQgPCAwKVxuICAgICAgICAgICAgdGhyb3cgbmV3IE5lZ2F0aXZlT2Zmc2V0RXJyb3IoeyBvZmZzZXQgfSk7XG4gICAgICAgIGNvbnN0IHBvc2l0aW9uID0gdGhpcy5wb3NpdGlvbiArIG9mZnNldDtcbiAgICAgICAgdGhpcy5hc3NlcnRQb3NpdGlvbihwb3NpdGlvbik7XG4gICAgICAgIHRoaXMucG9zaXRpb24gPSBwb3NpdGlvbjtcbiAgICB9LFxuICAgIGluc3BlY3RCeXRlKHBvc2l0aW9uXykge1xuICAgICAgICBjb25zdCBwb3NpdGlvbiA9IHBvc2l0aW9uXyA/PyB0aGlzLnBvc2l0aW9uO1xuICAgICAgICB0aGlzLmFzc2VydFBvc2l0aW9uKHBvc2l0aW9uKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuYnl0ZXNbcG9zaXRpb25dO1xuICAgIH0sXG4gICAgaW5zcGVjdEJ5dGVzKGxlbmd0aCwgcG9zaXRpb25fKSB7XG4gICAgICAgIGNvbnN0IHBvc2l0aW9uID0gcG9zaXRpb25fID8/IHRoaXMucG9zaXRpb247XG4gICAgICAgIHRoaXMuYXNzZXJ0UG9zaXRpb24ocG9zaXRpb24gKyBsZW5ndGggLSAxKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuYnl0ZXMuc3ViYXJyYXkocG9zaXRpb24sIHBvc2l0aW9uICsgbGVuZ3RoKTtcbiAgICB9LFxuICAgIGluc3BlY3RVaW50OChwb3NpdGlvbl8pIHtcbiAgICAgICAgY29uc3QgcG9zaXRpb24gPSBwb3NpdGlvbl8gPz8gdGhpcy5wb3NpdGlvbjtcbiAgICAgICAgdGhpcy5hc3NlcnRQb3NpdGlvbihwb3NpdGlvbik7XG4gICAgICAgIHJldHVybiB0aGlzLmJ5dGVzW3Bvc2l0aW9uXTtcbiAgICB9LFxuICAgIGluc3BlY3RVaW50MTYocG9zaXRpb25fKSB7XG4gICAgICAgIGNvbnN0IHBvc2l0aW9uID0gcG9zaXRpb25fID8/IHRoaXMucG9zaXRpb247XG4gICAgICAgIHRoaXMuYXNzZXJ0UG9zaXRpb24ocG9zaXRpb24gKyAxKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YVZpZXcuZ2V0VWludDE2KHBvc2l0aW9uKTtcbiAgICB9LFxuICAgIGluc3BlY3RVaW50MjQocG9zaXRpb25fKSB7XG4gICAgICAgIGNvbnN0IHBvc2l0aW9uID0gcG9zaXRpb25fID8/IHRoaXMucG9zaXRpb247XG4gICAgICAgIHRoaXMuYXNzZXJ0UG9zaXRpb24ocG9zaXRpb24gKyAyKTtcbiAgICAgICAgcmV0dXJuICgodGhpcy5kYXRhVmlldy5nZXRVaW50MTYocG9zaXRpb24pIDw8IDgpICtcbiAgICAgICAgICAgIHRoaXMuZGF0YVZpZXcuZ2V0VWludDgocG9zaXRpb24gKyAyKSk7XG4gICAgfSxcbiAgICBpbnNwZWN0VWludDMyKHBvc2l0aW9uXykge1xuICAgICAgICBjb25zdCBwb3NpdGlvbiA9IHBvc2l0aW9uXyA/PyB0aGlzLnBvc2l0aW9uO1xuICAgICAgICB0aGlzLmFzc2VydFBvc2l0aW9uKHBvc2l0aW9uICsgMyk7XG4gICAgICAgIHJldHVybiB0aGlzLmRhdGFWaWV3LmdldFVpbnQzMihwb3NpdGlvbik7XG4gICAgfSxcbiAgICBwdXNoQnl0ZShieXRlKSB7XG4gICAgICAgIHRoaXMuYXNzZXJ0UG9zaXRpb24odGhpcy5wb3NpdGlvbik7XG4gICAgICAgIHRoaXMuYnl0ZXNbdGhpcy5wb3NpdGlvbl0gPSBieXRlO1xuICAgICAgICB0aGlzLnBvc2l0aW9uKys7XG4gICAgfSxcbiAgICBwdXNoQnl0ZXMoYnl0ZXMpIHtcbiAgICAgICAgdGhpcy5hc3NlcnRQb3NpdGlvbih0aGlzLnBvc2l0aW9uICsgYnl0ZXMubGVuZ3RoIC0gMSk7XG4gICAgICAgIHRoaXMuYnl0ZXMuc2V0KGJ5dGVzLCB0aGlzLnBvc2l0aW9uKTtcbiAgICAgICAgdGhpcy5wb3NpdGlvbiArPSBieXRlcy5sZW5ndGg7XG4gICAgfSxcbiAgICBwdXNoVWludDgodmFsdWUpIHtcbiAgICAgICAgdGhpcy5hc3NlcnRQb3NpdGlvbih0aGlzLnBvc2l0aW9uKTtcbiAgICAgICAgdGhpcy5ieXRlc1t0aGlzLnBvc2l0aW9uXSA9IHZhbHVlO1xuICAgICAgICB0aGlzLnBvc2l0aW9uKys7XG4gICAgfSxcbiAgICBwdXNoVWludDE2KHZhbHVlKSB7XG4gICAgICAgIHRoaXMuYXNzZXJ0UG9zaXRpb24odGhpcy5wb3NpdGlvbiArIDEpO1xuICAgICAgICB0aGlzLmRhdGFWaWV3LnNldFVpbnQxNih0aGlzLnBvc2l0aW9uLCB2YWx1ZSk7XG4gICAgICAgIHRoaXMucG9zaXRpb24gKz0gMjtcbiAgICB9LFxuICAgIHB1c2hVaW50MjQodmFsdWUpIHtcbiAgICAgICAgdGhpcy5hc3NlcnRQb3NpdGlvbih0aGlzLnBvc2l0aW9uICsgMik7XG4gICAgICAgIHRoaXMuZGF0YVZpZXcuc2V0VWludDE2KHRoaXMucG9zaXRpb24sIHZhbHVlID4+IDgpO1xuICAgICAgICB0aGlzLmRhdGFWaWV3LnNldFVpbnQ4KHRoaXMucG9zaXRpb24gKyAyLCB2YWx1ZSAmIH40Mjk0OTY3MDQwKTtcbiAgICAgICAgdGhpcy5wb3NpdGlvbiArPSAzO1xuICAgIH0sXG4gICAgcHVzaFVpbnQzMih2YWx1ZSkge1xuICAgICAgICB0aGlzLmFzc2VydFBvc2l0aW9uKHRoaXMucG9zaXRpb24gKyAzKTtcbiAgICAgICAgdGhpcy5kYXRhVmlldy5zZXRVaW50MzIodGhpcy5wb3NpdGlvbiwgdmFsdWUpO1xuICAgICAgICB0aGlzLnBvc2l0aW9uICs9IDQ7XG4gICAgfSxcbiAgICByZWFkQnl0ZSgpIHtcbiAgICAgICAgdGhpcy5hc3NlcnRSZWFkTGltaXQoKTtcbiAgICAgICAgdGhpcy5fdG91Y2goKTtcbiAgICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLmluc3BlY3RCeXRlKCk7XG4gICAgICAgIHRoaXMucG9zaXRpb24rKztcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH0sXG4gICAgcmVhZEJ5dGVzKGxlbmd0aCwgc2l6ZSkge1xuICAgICAgICB0aGlzLmFzc2VydFJlYWRMaW1pdCgpO1xuICAgICAgICB0aGlzLl90b3VjaCgpO1xuICAgICAgICBjb25zdCB2YWx1ZSA9IHRoaXMuaW5zcGVjdEJ5dGVzKGxlbmd0aCk7XG4gICAgICAgIHRoaXMucG9zaXRpb24gKz0gc2l6ZSA/PyBsZW5ndGg7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9LFxuICAgIHJlYWRVaW50OCgpIHtcbiAgICAgICAgdGhpcy5hc3NlcnRSZWFkTGltaXQoKTtcbiAgICAgICAgdGhpcy5fdG91Y2goKTtcbiAgICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLmluc3BlY3RVaW50OCgpO1xuICAgICAgICB0aGlzLnBvc2l0aW9uICs9IDE7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9LFxuICAgIHJlYWRVaW50MTYoKSB7XG4gICAgICAgIHRoaXMuYXNzZXJ0UmVhZExpbWl0KCk7XG4gICAgICAgIHRoaXMuX3RvdWNoKCk7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy5pbnNwZWN0VWludDE2KCk7XG4gICAgICAgIHRoaXMucG9zaXRpb24gKz0gMjtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH0sXG4gICAgcmVhZFVpbnQyNCgpIHtcbiAgICAgICAgdGhpcy5hc3NlcnRSZWFkTGltaXQoKTtcbiAgICAgICAgdGhpcy5fdG91Y2goKTtcbiAgICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLmluc3BlY3RVaW50MjQoKTtcbiAgICAgICAgdGhpcy5wb3NpdGlvbiArPSAzO1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfSxcbiAgICByZWFkVWludDMyKCkge1xuICAgICAgICB0aGlzLmFzc2VydFJlYWRMaW1pdCgpO1xuICAgICAgICB0aGlzLl90b3VjaCgpO1xuICAgICAgICBjb25zdCB2YWx1ZSA9IHRoaXMuaW5zcGVjdFVpbnQzMigpO1xuICAgICAgICB0aGlzLnBvc2l0aW9uICs9IDQ7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9LFxuICAgIGdldCByZW1haW5pbmcoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmJ5dGVzLmxlbmd0aCAtIHRoaXMucG9zaXRpb247XG4gICAgfSxcbiAgICBzZXRQb3NpdGlvbihwb3NpdGlvbikge1xuICAgICAgICBjb25zdCBvbGRQb3NpdGlvbiA9IHRoaXMucG9zaXRpb247XG4gICAgICAgIHRoaXMuYXNzZXJ0UG9zaXRpb24ocG9zaXRpb24pO1xuICAgICAgICB0aGlzLnBvc2l0aW9uID0gcG9zaXRpb247XG4gICAgICAgIHJldHVybiAoKSA9PiAodGhpcy5wb3NpdGlvbiA9IG9sZFBvc2l0aW9uKTtcbiAgICB9LFxuICAgIF90b3VjaCgpIHtcbiAgICAgICAgaWYgKHRoaXMucmVjdXJzaXZlUmVhZExpbWl0ID09PSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFkpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGNvbnN0IGNvdW50ID0gdGhpcy5nZXRSZWFkQ291bnQoKTtcbiAgICAgICAgdGhpcy5wb3NpdGlvblJlYWRDb3VudC5zZXQodGhpcy5wb3NpdGlvbiwgY291bnQgKyAxKTtcbiAgICAgICAgaWYgKGNvdW50ID4gMClcbiAgICAgICAgICAgIHRoaXMucmVjdXJzaXZlUmVhZENvdW50Kys7XG4gICAgfSxcbn07XG5mdW5jdGlvbiBjcmVhdGUoYnl0ZXMsIHsgcmVjdXJzaXZlUmVhZExpbWl0ID0gOF8xOTIgfSA9IHt9KSB7XG4gICAgY29uc3QgY3Vyc29yID0gT2JqZWN0LmNyZWF0ZShzdGF0aWNDdXJzb3IpO1xuICAgIGN1cnNvci5ieXRlcyA9IGJ5dGVzO1xuICAgIGN1cnNvci5kYXRhVmlldyA9IG5ldyBEYXRhVmlldyhieXRlcy5idWZmZXIsIGJ5dGVzLmJ5dGVPZmZzZXQsIGJ5dGVzLmJ5dGVMZW5ndGgpO1xuICAgIGN1cnNvci5wb3NpdGlvblJlYWRDb3VudCA9IG5ldyBNYXAoKTtcbiAgICBjdXJzb3IucmVjdXJzaXZlUmVhZExpbWl0ID0gcmVjdXJzaXZlUmVhZExpbWl0O1xuICAgIHJldHVybiBjdXJzb3I7XG59XG5jbGFzcyBOZWdhdGl2ZU9mZnNldEVycm9yIGV4dGVuZHMgRXJyb3JzLkJhc2VFcnJvciB7XG4gICAgY29uc3RydWN0b3IoeyBvZmZzZXQgfSkge1xuICAgICAgICBzdXBlcihgT2Zmc2V0IFxcYCR7b2Zmc2V0fVxcYCBjYW5ub3QgYmUgbmVnYXRpdmUuYCk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIm5hbWVcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6ICdDdXJzb3IuTmVnYXRpdmVPZmZzZXRFcnJvcidcbiAgICAgICAgfSk7XG4gICAgfVxufVxuZXhwb3J0cy5OZWdhdGl2ZU9mZnNldEVycm9yID0gTmVnYXRpdmVPZmZzZXRFcnJvcjtcbmNsYXNzIFBvc2l0aW9uT3V0T2ZCb3VuZHNFcnJvciBleHRlbmRzIEVycm9ycy5CYXNlRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKHsgbGVuZ3RoLCBwb3NpdGlvbiB9KSB7XG4gICAgICAgIHN1cGVyKGBQb3NpdGlvbiBcXGAke3Bvc2l0aW9ufVxcYCBpcyBvdXQgb2YgYm91bmRzIChcXGAwIDwgcG9zaXRpb24gPCAke2xlbmd0aH1cXGApLmApO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJuYW1lXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiAnQ3Vyc29yLlBvc2l0aW9uT3V0T2ZCb3VuZHNFcnJvcidcbiAgICAgICAgfSk7XG4gICAgfVxufVxuZXhwb3J0cy5Qb3NpdGlvbk91dE9mQm91bmRzRXJyb3IgPSBQb3NpdGlvbk91dE9mQm91bmRzRXJyb3I7XG5jbGFzcyBSZWN1cnNpdmVSZWFkTGltaXRFeGNlZWRlZEVycm9yIGV4dGVuZHMgRXJyb3JzLkJhc2VFcnJvciB7XG4gICAgY29uc3RydWN0b3IoeyBjb3VudCwgbGltaXQgfSkge1xuICAgICAgICBzdXBlcihgUmVjdXJzaXZlIHJlYWQgbGltaXQgb2YgXFxgJHtsaW1pdH1cXGAgZXhjZWVkZWQgKHJlY3Vyc2l2ZSByZWFkIGNvdW50OiBcXGAke2NvdW50fVxcYCkuYCk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIm5hbWVcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6ICdDdXJzb3IuUmVjdXJzaXZlUmVhZExpbWl0RXhjZWVkZWRFcnJvcidcbiAgICAgICAgfSk7XG4gICAgfVxufVxuZXhwb3J0cy5SZWN1cnNpdmVSZWFkTGltaXRFeGNlZWRlZEVycm9yID0gUmVjdXJzaXZlUmVhZExpbWl0RXhjZWVkZWRFcnJvcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWN1cnNvci5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJSZWN1cnNpdmVSZWFkTGltaXRFeGNlZWRlZEVycm9yIiwiUG9zaXRpb25PdXRPZkJvdW5kc0Vycm9yIiwiTmVnYXRpdmVPZmZzZXRFcnJvciIsImNyZWF0ZSIsIkVycm9ycyIsInJlcXVpcmUiLCJzdGF0aWNDdXJzb3IiLCJieXRlcyIsIlVpbnQ4QXJyYXkiLCJkYXRhVmlldyIsIkRhdGFWaWV3IiwiQXJyYXlCdWZmZXIiLCJwb3NpdGlvbiIsInBvc2l0aW9uUmVhZENvdW50IiwiTWFwIiwicmVjdXJzaXZlUmVhZENvdW50IiwicmVjdXJzaXZlUmVhZExpbWl0IiwiTnVtYmVyIiwiUE9TSVRJVkVfSU5GSU5JVFkiLCJhc3NlcnRSZWFkTGltaXQiLCJjb3VudCIsImxpbWl0IiwiYXNzZXJ0UG9zaXRpb24iLCJsZW5ndGgiLCJkZWNyZW1lbnRQb3NpdGlvbiIsIm9mZnNldCIsImdldFJlYWRDb3VudCIsImdldCIsImluY3JlbWVudFBvc2l0aW9uIiwiaW5zcGVjdEJ5dGUiLCJwb3NpdGlvbl8iLCJpbnNwZWN0Qnl0ZXMiLCJzdWJhcnJheSIsImluc3BlY3RVaW50OCIsImluc3BlY3RVaW50MTYiLCJnZXRVaW50MTYiLCJpbnNwZWN0VWludDI0IiwiZ2V0VWludDgiLCJpbnNwZWN0VWludDMyIiwiZ2V0VWludDMyIiwicHVzaEJ5dGUiLCJieXRlIiwicHVzaEJ5dGVzIiwic2V0IiwicHVzaFVpbnQ4IiwicHVzaFVpbnQxNiIsInNldFVpbnQxNiIsInB1c2hVaW50MjQiLCJzZXRVaW50OCIsInB1c2hVaW50MzIiLCJzZXRVaW50MzIiLCJyZWFkQnl0ZSIsIl90b3VjaCIsInJlYWRCeXRlcyIsInNpemUiLCJyZWFkVWludDgiLCJyZWFkVWludDE2IiwicmVhZFVpbnQyNCIsInJlYWRVaW50MzIiLCJyZW1haW5pbmciLCJzZXRQb3NpdGlvbiIsIm9sZFBvc2l0aW9uIiwiY3Vyc29yIiwiYnVmZmVyIiwiYnl0ZU9mZnNldCIsImJ5dGVMZW5ndGgiLCJCYXNlRXJyb3IiLCJjb25zdHJ1Y3RvciIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ox/_cjs/core/internal/cursor.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ox/_cjs/core/internal/entropy.js":
/*!*******************************************************!*\
  !*** ./node_modules/ox/_cjs/core/internal/entropy.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.extraEntropy = void 0;\nexports.setExtraEntropy = setExtraEntropy;\nexports.extraEntropy = false;\nfunction setExtraEntropy(entropy) {\n    exports.extraEntropy = entropy;\n} //# sourceMappingURL=entropy.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb3gvX2Nqcy9jb3JlL2ludGVybmFsL2VudHJvcHkuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELG9CQUFvQixHQUFHLEtBQUs7QUFDNUJBLHVCQUF1QixHQUFHRztBQUMxQkgsb0JBQW9CLEdBQUc7QUFDdkIsU0FBU0csZ0JBQWdCQyxPQUFPO0lBQzVCSixvQkFBb0IsR0FBR0k7QUFDM0IsRUFDQSxtQ0FBbUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93c3Rvbi11aS8uL25vZGVfbW9kdWxlcy9veC9fY2pzL2NvcmUvaW50ZXJuYWwvZW50cm9weS5qcz8yNmEyIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5leHRyYUVudHJvcHkgPSB2b2lkIDA7XG5leHBvcnRzLnNldEV4dHJhRW50cm9weSA9IHNldEV4dHJhRW50cm9weTtcbmV4cG9ydHMuZXh0cmFFbnRyb3B5ID0gZmFsc2U7XG5mdW5jdGlvbiBzZXRFeHRyYUVudHJvcHkoZW50cm9weSkge1xuICAgIGV4cG9ydHMuZXh0cmFFbnRyb3B5ID0gZW50cm9weTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVudHJvcHkuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZXh0cmFFbnRyb3B5Iiwic2V0RXh0cmFFbnRyb3B5IiwiZW50cm9weSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ox/_cjs/core/internal/entropy.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ox/_cjs/core/internal/errors.js":
/*!******************************************************!*\
  !*** ./node_modules/ox/_cjs/core/internal/errors.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.getUrl = getUrl;\nexports.getVersion = getVersion;\nexports.prettyPrint = prettyPrint;\nconst version_js_1 = __webpack_require__(/*! ../version.js */ \"(ssr)/./node_modules/ox/_cjs/core/version.js\");\nfunction getUrl(url) {\n    return url;\n}\nfunction getVersion() {\n    return version_js_1.version;\n}\nfunction prettyPrint(args) {\n    if (!args) return \"\";\n    const entries = Object.entries(args).map(([key, value])=>{\n        if (value === undefined || value === false) return null;\n        return [\n            key,\n            value\n        ];\n    }).filter(Boolean);\n    const maxLength = entries.reduce((acc, [key])=>Math.max(acc, key.length), 0);\n    return entries.map(([key, value])=>`  ${`${key}:`.padEnd(maxLength + 1)}  ${value}`).join(\"\\n\");\n} //# sourceMappingURL=errors.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb3gvX2Nqcy9jb3JlL2ludGVybmFsL2Vycm9ycy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsY0FBYyxHQUFHRTtBQUNqQkYsa0JBQWtCLEdBQUdHO0FBQ3JCSCxtQkFBbUIsR0FBR0k7QUFDdEIsTUFBTUMsZUFBZUMsbUJBQU9BLENBQUMsbUVBQWU7QUFDNUMsU0FBU0osT0FBT0ssR0FBRztJQUNmLE9BQU9BO0FBQ1g7QUFDQSxTQUFTSjtJQUNMLE9BQU9FLGFBQWFHLE9BQU87QUFDL0I7QUFDQSxTQUFTSixZQUFZSyxJQUFJO0lBQ3JCLElBQUksQ0FBQ0EsTUFDRCxPQUFPO0lBQ1gsTUFBTUMsVUFBVVosT0FBT1ksT0FBTyxDQUFDRCxNQUMxQkUsR0FBRyxDQUFDLENBQUMsQ0FBQ0MsS0FBS1gsTUFBTTtRQUNsQixJQUFJQSxVQUFVWSxhQUFhWixVQUFVLE9BQ2pDLE9BQU87UUFDWCxPQUFPO1lBQUNXO1lBQUtYO1NBQU07SUFDdkIsR0FDS2EsTUFBTSxDQUFDQztJQUNaLE1BQU1DLFlBQVlOLFFBQVFPLE1BQU0sQ0FBQyxDQUFDQyxLQUFLLENBQUNOLElBQUksR0FBS08sS0FBS0MsR0FBRyxDQUFDRixLQUFLTixJQUFJUyxNQUFNLEdBQUc7SUFDNUUsT0FBT1gsUUFDRkMsR0FBRyxDQUFDLENBQUMsQ0FBQ0MsS0FBS1gsTUFBTSxHQUFLLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRVcsSUFBSSxDQUFDLENBQUMsQ0FBQ1UsTUFBTSxDQUFDTixZQUFZLEdBQUcsRUFBRSxFQUFFZixNQUFNLENBQUMsRUFDdEVzQixJQUFJLENBQUM7QUFDZCxFQUNBLGtDQUFrQyIsInNvdXJjZXMiOlsid2VicGFjazovL3dzdG9uLXVpLy4vbm9kZV9tb2R1bGVzL294L19janMvY29yZS9pbnRlcm5hbC9lcnJvcnMuanM/NmJiNyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZ2V0VXJsID0gZ2V0VXJsO1xuZXhwb3J0cy5nZXRWZXJzaW9uID0gZ2V0VmVyc2lvbjtcbmV4cG9ydHMucHJldHR5UHJpbnQgPSBwcmV0dHlQcmludDtcbmNvbnN0IHZlcnNpb25fanNfMSA9IHJlcXVpcmUoXCIuLi92ZXJzaW9uLmpzXCIpO1xuZnVuY3Rpb24gZ2V0VXJsKHVybCkge1xuICAgIHJldHVybiB1cmw7XG59XG5mdW5jdGlvbiBnZXRWZXJzaW9uKCkge1xuICAgIHJldHVybiB2ZXJzaW9uX2pzXzEudmVyc2lvbjtcbn1cbmZ1bmN0aW9uIHByZXR0eVByaW50KGFyZ3MpIHtcbiAgICBpZiAoIWFyZ3MpXG4gICAgICAgIHJldHVybiAnJztcbiAgICBjb25zdCBlbnRyaWVzID0gT2JqZWN0LmVudHJpZXMoYXJncylcbiAgICAgICAgLm1hcCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHZhbHVlID09PSBmYWxzZSlcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICByZXR1cm4gW2tleSwgdmFsdWVdO1xuICAgIH0pXG4gICAgICAgIC5maWx0ZXIoQm9vbGVhbik7XG4gICAgY29uc3QgbWF4TGVuZ3RoID0gZW50cmllcy5yZWR1Y2UoKGFjYywgW2tleV0pID0+IE1hdGgubWF4KGFjYywga2V5Lmxlbmd0aCksIDApO1xuICAgIHJldHVybiBlbnRyaWVzXG4gICAgICAgIC5tYXAoKFtrZXksIHZhbHVlXSkgPT4gYCAgJHtgJHtrZXl9OmAucGFkRW5kKG1heExlbmd0aCArIDEpfSAgJHt2YWx1ZX1gKVxuICAgICAgICAuam9pbignXFxuJyk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lcnJvcnMuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZ2V0VXJsIiwiZ2V0VmVyc2lvbiIsInByZXR0eVByaW50IiwidmVyc2lvbl9qc18xIiwicmVxdWlyZSIsInVybCIsInZlcnNpb24iLCJhcmdzIiwiZW50cmllcyIsIm1hcCIsImtleSIsInVuZGVmaW5lZCIsImZpbHRlciIsIkJvb2xlYW4iLCJtYXhMZW5ndGgiLCJyZWR1Y2UiLCJhY2MiLCJNYXRoIiwibWF4IiwibGVuZ3RoIiwicGFkRW5kIiwiam9pbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ox/_cjs/core/internal/errors.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ox/_cjs/core/internal/hex.js":
/*!***************************************************!*\
  !*** ./node_modules/ox/_cjs/core/internal/hex.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.assertSize = assertSize;\nexports.assertStartOffset = assertStartOffset;\nexports.assertEndOffset = assertEndOffset;\nexports.pad = pad;\nexports.trim = trim;\nconst Hex = __webpack_require__(/*! ../Hex.js */ \"(ssr)/./node_modules/ox/_cjs/core/Hex.js\");\nfunction assertSize(hex, size_) {\n    if (Hex.size(hex) > size_) throw new Hex.SizeOverflowError({\n        givenSize: Hex.size(hex),\n        maxSize: size_\n    });\n}\nfunction assertStartOffset(value, start) {\n    if (typeof start === \"number\" && start > 0 && start > Hex.size(value) - 1) throw new Hex.SliceOffsetOutOfBoundsError({\n        offset: start,\n        position: \"start\",\n        size: Hex.size(value)\n    });\n}\nfunction assertEndOffset(value, start, end) {\n    if (typeof start === \"number\" && typeof end === \"number\" && Hex.size(value) !== end - start) {\n        throw new Hex.SliceOffsetOutOfBoundsError({\n            offset: end,\n            position: \"end\",\n            size: Hex.size(value)\n        });\n    }\n}\nfunction pad(hex_, options = {}) {\n    const { dir, size = 32 } = options;\n    if (size === 0) return hex_;\n    const hex = hex_.replace(\"0x\", \"\");\n    if (hex.length > size * 2) throw new Hex.SizeExceedsPaddingSizeError({\n        size: Math.ceil(hex.length / 2),\n        targetSize: size,\n        type: \"Hex\"\n    });\n    return `0x${hex[dir === \"right\" ? \"padEnd\" : \"padStart\"](size * 2, \"0\")}`;\n}\nfunction trim(value, options = {}) {\n    const { dir = \"left\" } = options;\n    let data = value.replace(\"0x\", \"\");\n    let sliceLength = 0;\n    for(let i = 0; i < data.length - 1; i++){\n        if (data[dir === \"left\" ? i : data.length - i - 1].toString() === \"0\") sliceLength++;\n        else break;\n    }\n    data = dir === \"left\" ? data.slice(sliceLength) : data.slice(0, data.length - sliceLength);\n    if (data === \"0\") return \"0x\";\n    if (dir === \"right\" && data.length % 2 === 1) return `0x${data}0`;\n    return `0x${data}`;\n} //# sourceMappingURL=hex.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb3gvX2Nqcy9jb3JlL2ludGVybmFsL2hleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsa0JBQWtCLEdBQUdFO0FBQ3JCRix5QkFBeUIsR0FBR0c7QUFDNUJILHVCQUF1QixHQUFHSTtBQUMxQkosV0FBVyxHQUFHSztBQUNkTCxZQUFZLEdBQUdNO0FBQ2YsTUFBTUMsTUFBTUMsbUJBQU9BLENBQUMsMkRBQVc7QUFDL0IsU0FBU04sV0FBV08sR0FBRyxFQUFFQyxLQUFLO0lBQzFCLElBQUlILElBQUlJLElBQUksQ0FBQ0YsT0FBT0MsT0FDaEIsTUFBTSxJQUFJSCxJQUFJSyxpQkFBaUIsQ0FBQztRQUM1QkMsV0FBV04sSUFBSUksSUFBSSxDQUFDRjtRQUNwQkssU0FBU0o7SUFDYjtBQUNSO0FBQ0EsU0FBU1Asa0JBQWtCRixLQUFLLEVBQUVjLEtBQUs7SUFDbkMsSUFBSSxPQUFPQSxVQUFVLFlBQVlBLFFBQVEsS0FBS0EsUUFBUVIsSUFBSUksSUFBSSxDQUFDVixTQUFTLEdBQ3BFLE1BQU0sSUFBSU0sSUFBSVMsMkJBQTJCLENBQUM7UUFDdENDLFFBQVFGO1FBQ1JHLFVBQVU7UUFDVlAsTUFBTUosSUFBSUksSUFBSSxDQUFDVjtJQUNuQjtBQUNSO0FBQ0EsU0FBU0csZ0JBQWdCSCxLQUFLLEVBQUVjLEtBQUssRUFBRUksR0FBRztJQUN0QyxJQUFJLE9BQU9KLFVBQVUsWUFDakIsT0FBT0ksUUFBUSxZQUNmWixJQUFJSSxJQUFJLENBQUNWLFdBQVdrQixNQUFNSixPQUFPO1FBQ2pDLE1BQU0sSUFBSVIsSUFBSVMsMkJBQTJCLENBQUM7WUFDdENDLFFBQVFFO1lBQ1JELFVBQVU7WUFDVlAsTUFBTUosSUFBSUksSUFBSSxDQUFDVjtRQUNuQjtJQUNKO0FBQ0o7QUFDQSxTQUFTSSxJQUFJZSxJQUFJLEVBQUVDLFVBQVUsQ0FBQyxDQUFDO0lBQzNCLE1BQU0sRUFBRUMsR0FBRyxFQUFFWCxPQUFPLEVBQUUsRUFBRSxHQUFHVTtJQUMzQixJQUFJVixTQUFTLEdBQ1QsT0FBT1M7SUFDWCxNQUFNWCxNQUFNVyxLQUFLRyxPQUFPLENBQUMsTUFBTTtJQUMvQixJQUFJZCxJQUFJZSxNQUFNLEdBQUdiLE9BQU8sR0FDcEIsTUFBTSxJQUFJSixJQUFJa0IsMkJBQTJCLENBQUM7UUFDdENkLE1BQU1lLEtBQUtDLElBQUksQ0FBQ2xCLElBQUllLE1BQU0sR0FBRztRQUM3QkksWUFBWWpCO1FBQ1prQixNQUFNO0lBQ1Y7SUFDSixPQUFPLENBQUMsRUFBRSxFQUFFcEIsR0FBRyxDQUFDYSxRQUFRLFVBQVUsV0FBVyxXQUFXLENBQUNYLE9BQU8sR0FBRyxLQUFLLENBQUM7QUFDN0U7QUFDQSxTQUFTTCxLQUFLTCxLQUFLLEVBQUVvQixVQUFVLENBQUMsQ0FBQztJQUM3QixNQUFNLEVBQUVDLE1BQU0sTUFBTSxFQUFFLEdBQUdEO0lBQ3pCLElBQUlTLE9BQU83QixNQUFNc0IsT0FBTyxDQUFDLE1BQU07SUFDL0IsSUFBSVEsY0FBYztJQUNsQixJQUFLLElBQUlDLElBQUksR0FBR0EsSUFBSUYsS0FBS04sTUFBTSxHQUFHLEdBQUdRLElBQUs7UUFDdEMsSUFBSUYsSUFBSSxDQUFDUixRQUFRLFNBQVNVLElBQUlGLEtBQUtOLE1BQU0sR0FBR1EsSUFBSSxFQUFFLENBQUNDLFFBQVEsT0FBTyxLQUM5REY7YUFFQTtJQUNSO0lBQ0FELE9BQ0lSLFFBQVEsU0FDRlEsS0FBS0ksS0FBSyxDQUFDSCxlQUNYRCxLQUFLSSxLQUFLLENBQUMsR0FBR0osS0FBS04sTUFBTSxHQUFHTztJQUN0QyxJQUFJRCxTQUFTLEtBQ1QsT0FBTztJQUNYLElBQUlSLFFBQVEsV0FBV1EsS0FBS04sTUFBTSxHQUFHLE1BQU0sR0FDdkMsT0FBTyxDQUFDLEVBQUUsRUFBRU0sS0FBSyxDQUFDLENBQUM7SUFDdkIsT0FBTyxDQUFDLEVBQUUsRUFBRUEsS0FBSyxDQUFDO0FBQ3RCLEVBQ0EsK0JBQStCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd3N0b24tdWkvLi9ub2RlX21vZHVsZXMvb3gvX2Nqcy9jb3JlL2ludGVybmFsL2hleC5qcz80NDgxIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5hc3NlcnRTaXplID0gYXNzZXJ0U2l6ZTtcbmV4cG9ydHMuYXNzZXJ0U3RhcnRPZmZzZXQgPSBhc3NlcnRTdGFydE9mZnNldDtcbmV4cG9ydHMuYXNzZXJ0RW5kT2Zmc2V0ID0gYXNzZXJ0RW5kT2Zmc2V0O1xuZXhwb3J0cy5wYWQgPSBwYWQ7XG5leHBvcnRzLnRyaW0gPSB0cmltO1xuY29uc3QgSGV4ID0gcmVxdWlyZShcIi4uL0hleC5qc1wiKTtcbmZ1bmN0aW9uIGFzc2VydFNpemUoaGV4LCBzaXplXykge1xuICAgIGlmIChIZXguc2l6ZShoZXgpID4gc2l6ZV8pXG4gICAgICAgIHRocm93IG5ldyBIZXguU2l6ZU92ZXJmbG93RXJyb3Ioe1xuICAgICAgICAgICAgZ2l2ZW5TaXplOiBIZXguc2l6ZShoZXgpLFxuICAgICAgICAgICAgbWF4U2l6ZTogc2l6ZV8sXG4gICAgICAgIH0pO1xufVxuZnVuY3Rpb24gYXNzZXJ0U3RhcnRPZmZzZXQodmFsdWUsIHN0YXJ0KSB7XG4gICAgaWYgKHR5cGVvZiBzdGFydCA9PT0gJ251bWJlcicgJiYgc3RhcnQgPiAwICYmIHN0YXJ0ID4gSGV4LnNpemUodmFsdWUpIC0gMSlcbiAgICAgICAgdGhyb3cgbmV3IEhleC5TbGljZU9mZnNldE91dE9mQm91bmRzRXJyb3Ioe1xuICAgICAgICAgICAgb2Zmc2V0OiBzdGFydCxcbiAgICAgICAgICAgIHBvc2l0aW9uOiAnc3RhcnQnLFxuICAgICAgICAgICAgc2l6ZTogSGV4LnNpemUodmFsdWUpLFxuICAgICAgICB9KTtcbn1cbmZ1bmN0aW9uIGFzc2VydEVuZE9mZnNldCh2YWx1ZSwgc3RhcnQsIGVuZCkge1xuICAgIGlmICh0eXBlb2Ygc3RhcnQgPT09ICdudW1iZXInICYmXG4gICAgICAgIHR5cGVvZiBlbmQgPT09ICdudW1iZXInICYmXG4gICAgICAgIEhleC5zaXplKHZhbHVlKSAhPT0gZW5kIC0gc3RhcnQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEhleC5TbGljZU9mZnNldE91dE9mQm91bmRzRXJyb3Ioe1xuICAgICAgICAgICAgb2Zmc2V0OiBlbmQsXG4gICAgICAgICAgICBwb3NpdGlvbjogJ2VuZCcsXG4gICAgICAgICAgICBzaXplOiBIZXguc2l6ZSh2YWx1ZSksXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHBhZChoZXhfLCBvcHRpb25zID0ge30pIHtcbiAgICBjb25zdCB7IGRpciwgc2l6ZSA9IDMyIH0gPSBvcHRpb25zO1xuICAgIGlmIChzaXplID09PSAwKVxuICAgICAgICByZXR1cm4gaGV4XztcbiAgICBjb25zdCBoZXggPSBoZXhfLnJlcGxhY2UoJzB4JywgJycpO1xuICAgIGlmIChoZXgubGVuZ3RoID4gc2l6ZSAqIDIpXG4gICAgICAgIHRocm93IG5ldyBIZXguU2l6ZUV4Y2VlZHNQYWRkaW5nU2l6ZUVycm9yKHtcbiAgICAgICAgICAgIHNpemU6IE1hdGguY2VpbChoZXgubGVuZ3RoIC8gMiksXG4gICAgICAgICAgICB0YXJnZXRTaXplOiBzaXplLFxuICAgICAgICAgICAgdHlwZTogJ0hleCcsXG4gICAgICAgIH0pO1xuICAgIHJldHVybiBgMHgke2hleFtkaXIgPT09ICdyaWdodCcgPyAncGFkRW5kJyA6ICdwYWRTdGFydCddKHNpemUgKiAyLCAnMCcpfWA7XG59XG5mdW5jdGlvbiB0cmltKHZhbHVlLCBvcHRpb25zID0ge30pIHtcbiAgICBjb25zdCB7IGRpciA9ICdsZWZ0JyB9ID0gb3B0aW9ucztcbiAgICBsZXQgZGF0YSA9IHZhbHVlLnJlcGxhY2UoJzB4JywgJycpO1xuICAgIGxldCBzbGljZUxlbmd0aCA9IDA7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aCAtIDE7IGkrKykge1xuICAgICAgICBpZiAoZGF0YVtkaXIgPT09ICdsZWZ0JyA/IGkgOiBkYXRhLmxlbmd0aCAtIGkgLSAxXS50b1N0cmluZygpID09PSAnMCcpXG4gICAgICAgICAgICBzbGljZUxlbmd0aCsrO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICBicmVhaztcbiAgICB9XG4gICAgZGF0YSA9XG4gICAgICAgIGRpciA9PT0gJ2xlZnQnXG4gICAgICAgICAgICA/IGRhdGEuc2xpY2Uoc2xpY2VMZW5ndGgpXG4gICAgICAgICAgICA6IGRhdGEuc2xpY2UoMCwgZGF0YS5sZW5ndGggLSBzbGljZUxlbmd0aCk7XG4gICAgaWYgKGRhdGEgPT09ICcwJylcbiAgICAgICAgcmV0dXJuICcweCc7XG4gICAgaWYgKGRpciA9PT0gJ3JpZ2h0JyAmJiBkYXRhLmxlbmd0aCAlIDIgPT09IDEpXG4gICAgICAgIHJldHVybiBgMHgke2RhdGF9MGA7XG4gICAgcmV0dXJuIGAweCR7ZGF0YX1gO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aGV4LmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImFzc2VydFNpemUiLCJhc3NlcnRTdGFydE9mZnNldCIsImFzc2VydEVuZE9mZnNldCIsInBhZCIsInRyaW0iLCJIZXgiLCJyZXF1aXJlIiwiaGV4Iiwic2l6ZV8iLCJzaXplIiwiU2l6ZU92ZXJmbG93RXJyb3IiLCJnaXZlblNpemUiLCJtYXhTaXplIiwic3RhcnQiLCJTbGljZU9mZnNldE91dE9mQm91bmRzRXJyb3IiLCJvZmZzZXQiLCJwb3NpdGlvbiIsImVuZCIsImhleF8iLCJvcHRpb25zIiwiZGlyIiwicmVwbGFjZSIsImxlbmd0aCIsIlNpemVFeGNlZWRzUGFkZGluZ1NpemVFcnJvciIsIk1hdGgiLCJjZWlsIiwidGFyZ2V0U2l6ZSIsInR5cGUiLCJkYXRhIiwic2xpY2VMZW5ndGgiLCJpIiwidG9TdHJpbmciLCJzbGljZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ox/_cjs/core/internal/hex.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ox/_cjs/core/internal/lru.js":
/*!***************************************************!*\
  !*** ./node_modules/ox/_cjs/core/internal/lru.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.LruMap = void 0;\nclass LruMap extends Map {\n    constructor(size){\n        super();\n        Object.defineProperty(this, \"maxSize\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.maxSize = size;\n    }\n    get(key) {\n        const value = super.get(key);\n        if (super.has(key) && value !== undefined) {\n            this.delete(key);\n            super.set(key, value);\n        }\n        return value;\n    }\n    set(key, value) {\n        super.set(key, value);\n        if (this.maxSize && this.size > this.maxSize) {\n            const firstKey = this.keys().next().value;\n            if (firstKey) this.delete(firstKey);\n        }\n        return this;\n    }\n}\nexports.LruMap = LruMap; //# sourceMappingURL=lru.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb3gvX2Nqcy9jb3JlL2ludGVybmFsL2xydS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsY0FBYyxHQUFHLEtBQUs7QUFDdEIsTUFBTUUsZUFBZUM7SUFDakJDLFlBQVlDLElBQUksQ0FBRTtRQUNkLEtBQUs7UUFDTFAsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxXQUFXO1lBQ25DTyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWUCxPQUFPLEtBQUs7UUFDaEI7UUFDQSxJQUFJLENBQUNRLE9BQU8sR0FBR0o7SUFDbkI7SUFDQUssSUFBSUMsR0FBRyxFQUFFO1FBQ0wsTUFBTVYsUUFBUSxLQUFLLENBQUNTLElBQUlDO1FBQ3hCLElBQUksS0FBSyxDQUFDQyxJQUFJRCxRQUFRVixVQUFVWSxXQUFXO1lBQ3ZDLElBQUksQ0FBQ0MsTUFBTSxDQUFDSDtZQUNaLEtBQUssQ0FBQ0ksSUFBSUosS0FBS1Y7UUFDbkI7UUFDQSxPQUFPQTtJQUNYO0lBQ0FjLElBQUlKLEdBQUcsRUFBRVYsS0FBSyxFQUFFO1FBQ1osS0FBSyxDQUFDYyxJQUFJSixLQUFLVjtRQUNmLElBQUksSUFBSSxDQUFDUSxPQUFPLElBQUksSUFBSSxDQUFDSixJQUFJLEdBQUcsSUFBSSxDQUFDSSxPQUFPLEVBQUU7WUFDMUMsTUFBTU8sV0FBVyxJQUFJLENBQUNDLElBQUksR0FBR0MsSUFBSSxHQUFHakIsS0FBSztZQUN6QyxJQUFJZSxVQUNBLElBQUksQ0FBQ0YsTUFBTSxDQUFDRTtRQUNwQjtRQUNBLE9BQU8sSUFBSTtJQUNmO0FBQ0o7QUFDQWhCLGNBQWMsR0FBR0UsUUFDakIsK0JBQStCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd3N0b24tdWkvLi9ub2RlX21vZHVsZXMvb3gvX2Nqcy9jb3JlL2ludGVybmFsL2xydS5qcz9iMjc0Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5McnVNYXAgPSB2b2lkIDA7XG5jbGFzcyBMcnVNYXAgZXh0ZW5kcyBNYXAge1xuICAgIGNvbnN0cnVjdG9yKHNpemUpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwibWF4U2l6ZVwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm1heFNpemUgPSBzaXplO1xuICAgIH1cbiAgICBnZXQoa2V5KSB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gc3VwZXIuZ2V0KGtleSk7XG4gICAgICAgIGlmIChzdXBlci5oYXMoa2V5KSAmJiB2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLmRlbGV0ZShrZXkpO1xuICAgICAgICAgICAgc3VwZXIuc2V0KGtleSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgc2V0KGtleSwgdmFsdWUpIHtcbiAgICAgICAgc3VwZXIuc2V0KGtleSwgdmFsdWUpO1xuICAgICAgICBpZiAodGhpcy5tYXhTaXplICYmIHRoaXMuc2l6ZSA+IHRoaXMubWF4U2l6ZSkge1xuICAgICAgICAgICAgY29uc3QgZmlyc3RLZXkgPSB0aGlzLmtleXMoKS5uZXh0KCkudmFsdWU7XG4gICAgICAgICAgICBpZiAoZmlyc3RLZXkpXG4gICAgICAgICAgICAgICAgdGhpcy5kZWxldGUoZmlyc3RLZXkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbn1cbmV4cG9ydHMuTHJ1TWFwID0gTHJ1TWFwO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bHJ1LmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIkxydU1hcCIsIk1hcCIsImNvbnN0cnVjdG9yIiwic2l6ZSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIm1heFNpemUiLCJnZXQiLCJrZXkiLCJoYXMiLCJ1bmRlZmluZWQiLCJkZWxldGUiLCJzZXQiLCJmaXJzdEtleSIsImtleXMiLCJuZXh0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ox/_cjs/core/internal/lru.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ox/_cjs/core/version.js":
/*!**********************************************!*\
  !*** ./node_modules/ox/_cjs/core/version.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.version = void 0;\nexports.version = \"0.1.1\"; //# sourceMappingURL=version.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb3gvX2Nqcy9jb3JlL3ZlcnNpb24uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELGVBQWUsR0FBRyxLQUFLO0FBQ3ZCQSxlQUFlLEdBQUcsU0FDbEIsbUNBQW1DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd3N0b24tdWkvLi9ub2RlX21vZHVsZXMvb3gvX2Nqcy9jb3JlL3ZlcnNpb24uanM/NWU5OSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMudmVyc2lvbiA9IHZvaWQgMDtcbmV4cG9ydHMudmVyc2lvbiA9ICcwLjEuMSc7XG4vLyMgc291cmNlTWFwcGluZ1VSTD12ZXJzaW9uLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInZlcnNpb24iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ox/_cjs/core/version.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ox/_cjs/erc6492/SignatureErc6492.js":
/*!**********************************************************!*\
  !*** ./node_modules/ox/_cjs/erc6492/SignatureErc6492.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.InvalidWrappedSignatureError = exports.universalSignatureValidatorAbi = exports.universalSignatureValidatorBytecode = exports.magicBytes = void 0;\nexports.assert = assert;\nexports.from = from;\nexports.unwrap = unwrap;\nexports.wrap = wrap;\nexports.validate = validate;\nconst AbiParameters = __webpack_require__(/*! ../core/AbiParameters.js */ \"(ssr)/./node_modules/ox/_cjs/core/AbiParameters.js\");\nconst Errors = __webpack_require__(/*! ../core/Errors.js */ \"(ssr)/./node_modules/ox/_cjs/core/Errors.js\");\nconst Hex = __webpack_require__(/*! ../core/Hex.js */ \"(ssr)/./node_modules/ox/_cjs/core/Hex.js\");\nexports.magicBytes = \"0x6492649264926492649264926492649264926492649264926492649264926492\";\nexports.universalSignatureValidatorBytecode = \"0x608060405234801561001057600080fd5b5060405161069438038061069483398101604081905261002f9161051e565b600061003c848484610048565b9050806000526001601ff35b60007f64926492649264926492649264926492649264926492649264926492649264926100748361040c565b036101e7576000606080848060200190518101906100929190610577565b60405192955090935091506000906001600160a01b038516906100b69085906105dd565b6000604051808303816000865af19150503d80600081146100f3576040519150601f19603f3d011682016040523d82523d6000602084013e6100f8565b606091505b50509050876001600160a01b03163b60000361016057806101605760405162461bcd60e51b815260206004820152601e60248201527f5369676e617475726556616c696461746f723a206465706c6f796d656e74000060448201526064015b60405180910390fd5b604051630b135d3f60e11b808252906001600160a01b038a1690631626ba7e90610190908b9087906004016105f9565b602060405180830381865afa1580156101ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101d19190610633565b6001600160e01b03191614945050505050610405565b6001600160a01b0384163b1561027a57604051630b135d3f60e11b808252906001600160a01b03861690631626ba7e9061022790879087906004016105f9565b602060405180830381865afa158015610244573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102689190610633565b6001600160e01b031916149050610405565b81516041146102df5760405162461bcd60e51b815260206004820152603a602482015260008051602061067483398151915260448201527f3a20696e76616c6964207369676e6174757265206c656e6774680000000000006064820152608401610157565b6102e7610425565b5060208201516040808401518451859392600091859190811061030c5761030c61065d565b016020015160f81c9050601b811480159061032b57508060ff16601c14155b1561038c5760405162461bcd60e51b815260206004820152603b602482015260008051602061067483398151915260448201527f3a20696e76616c6964207369676e617475726520762076616c756500000000006064820152608401610157565b60408051600081526020810180835289905260ff83169181019190915260608101849052608081018390526001600160a01b0389169060019060a0016020604051602081039080840390855afa1580156103ea573d6000803e3d6000fd5b505050602060405103516001600160a01b0316149450505050505b9392505050565b600060208251101561041d57600080fd5b508051015190565b60405180606001604052806003906020820280368337509192915050565b6001600160a01b038116811461045857600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b60005b8381101561048c578181015183820152602001610474565b50506000910152565b600082601f8301126104a657600080fd5b81516001600160401b038111156104bf576104bf61045b565b604051601f8201601f19908116603f011681016001600160401b03811182821017156104ed576104ed61045b565b60405281815283820160200185101561050557600080fd5b610516826020830160208701610471565b949350505050565b60008060006060848603121561053357600080fd5b835161053e81610443565b6020850151604086015191945092506001600160401b0381111561056157600080fd5b61056d86828701610495565b9150509250925092565b60008060006060848603121561058c57600080fd5b835161059781610443565b60208501519093506001600160401b038111156105b357600080fd5b6105bf86828701610495565b604086015190935090506001600160401b0381111561056157600080fd5b600082516105ef818460208701610471565b9190910192915050565b828152604060208201526000825180604084015261061e816060850160208701610471565b601f01601f1916919091016060019392505050565b60006020828403121561064557600080fd5b81516001600160e01b03198116811461040557600080fd5b634e487b7160e01b600052603260045260246000fdfe5369676e617475726556616c696461746f72237265636f7665725369676e6572\";\nexports.universalSignatureValidatorAbi = [\n    {\n        inputs: [\n            {\n                name: \"_signer\",\n                type: \"address\"\n            },\n            {\n                name: \"_hash\",\n                type: \"bytes32\"\n            },\n            {\n                name: \"_signature\",\n                type: \"bytes\"\n            }\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"constructor\"\n    },\n    {\n        inputs: [\n            {\n                name: \"_signer\",\n                type: \"address\"\n            },\n            {\n                name: \"_hash\",\n                type: \"bytes32\"\n            },\n            {\n                name: \"_signature\",\n                type: \"bytes\"\n            }\n        ],\n        outputs: [\n            {\n                type: \"bool\"\n            }\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n        name: \"isValidSig\"\n    }\n];\nfunction assert(wrapped) {\n    if (Hex.slice(wrapped, -32) !== exports.magicBytes) throw new InvalidWrappedSignatureError(wrapped);\n}\nfunction from(wrapped) {\n    if (typeof wrapped === \"string\") return unwrap(wrapped);\n    return wrapped;\n}\nfunction unwrap(wrapped) {\n    assert(wrapped);\n    const [to, data, signature] = AbiParameters.decode(AbiParameters.from(\"address, bytes, bytes\"), wrapped);\n    return {\n        data,\n        signature,\n        to\n    };\n}\nfunction wrap(value) {\n    const { data, signature, to } = value;\n    return Hex.concat(AbiParameters.encode(AbiParameters.from(\"address, bytes, bytes\"), [\n        to,\n        data,\n        signature\n    ]), exports.magicBytes);\n}\nfunction validate(wrapped) {\n    try {\n        assert(wrapped);\n        return true;\n    } catch  {\n        return false;\n    }\n}\nclass InvalidWrappedSignatureError extends Errors.BaseError {\n    constructor(wrapped){\n        super(`Value \\`${wrapped}\\` is an invalid ERC-6492 wrapped signature.`);\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"SignatureErc6492.InvalidWrappedSignatureError\"\n        });\n    }\n}\nexports.InvalidWrappedSignatureError = InvalidWrappedSignatureError; //# sourceMappingURL=SignatureErc6492.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ox/_cjs/erc6492/SignatureErc6492.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ox/_cjs/erc6492/index.js":
/*!***********************************************!*\
  !*** ./node_modules/ox/_cjs/erc6492/index.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.SignatureErc6492 = void 0;\nexports.SignatureErc6492 = __webpack_require__(/*! ./SignatureErc6492.js */ \"(ssr)/./node_modules/ox/_cjs/erc6492/SignatureErc6492.js\"); //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb3gvX2Nqcy9lcmM2NDkyL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCx3QkFBd0IsR0FBRyxLQUFLO0FBQ2hDQSx1SUFBMkQsRUFDM0QsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd3N0b24tdWkvLi9ub2RlX21vZHVsZXMvb3gvX2Nqcy9lcmM2NDkyL2luZGV4LmpzPzFlMTgiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlNpZ25hdHVyZUVyYzY0OTIgPSB2b2lkIDA7XG5leHBvcnRzLlNpZ25hdHVyZUVyYzY0OTIgPSByZXF1aXJlKFwiLi9TaWduYXR1cmVFcmM2NDkyLmpzXCIpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiU2lnbmF0dXJlRXJjNjQ5MiIsInJlcXVpcmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ox/_cjs/erc6492/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ox/_cjs/erc8010/SignatureErc8010.js":
/*!**********************************************************!*\
  !*** ./node_modules/ox/_cjs/erc8010/SignatureErc8010.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.InvalidWrappedSignatureError = exports.suffixParameters = exports.magicBytes = void 0;\nexports.assert = assert;\nexports.from = from;\nexports.unwrap = unwrap;\nexports.wrap = wrap;\nexports.validate = validate;\nconst AbiParameters = __webpack_require__(/*! ../core/AbiParameters.js */ \"(ssr)/./node_modules/ox/_cjs/core/AbiParameters.js\");\nconst Authorization = __webpack_require__(/*! ../core/Authorization.js */ \"(ssr)/./node_modules/ox/_cjs/core/Authorization.js\");\nconst Errors = __webpack_require__(/*! ../core/Errors.js */ \"(ssr)/./node_modules/ox/_cjs/core/Errors.js\");\nconst Hex = __webpack_require__(/*! ../core/Hex.js */ \"(ssr)/./node_modules/ox/_cjs/core/Hex.js\");\nconst Secp256k1 = __webpack_require__(/*! ../core/Secp256k1.js */ \"(ssr)/./node_modules/ox/_cjs/core/Secp256k1.js\");\nconst Signature = __webpack_require__(/*! ../core/Signature.js */ \"(ssr)/./node_modules/ox/_cjs/core/Signature.js\");\nexports.magicBytes = \"0x8010801080108010801080108010801080108010801080108010801080108010\";\nexports.suffixParameters = AbiParameters.from(\"(uint256 chainId, address delegation, uint256 nonce, uint8 yParity, uint256 r, uint256 s), address to, bytes data\");\nfunction assert(value) {\n    if (typeof value === \"string\") {\n        if (Hex.slice(value, -32) !== exports.magicBytes) throw new InvalidWrappedSignatureError(value);\n    } else Signature.assert(value.authorization);\n}\nfunction from(value) {\n    if (typeof value === \"string\") return unwrap(value);\n    return value;\n}\nfunction unwrap(wrapped) {\n    assert(wrapped);\n    const suffixLength = Hex.toNumber(Hex.slice(wrapped, -64, -32));\n    const suffix = Hex.slice(wrapped, -suffixLength - 64, -64);\n    const signature = Hex.slice(wrapped, 0, -suffixLength - 64);\n    const [auth, to, data] = AbiParameters.decode(exports.suffixParameters, suffix);\n    const authorization = Authorization.from({\n        address: auth.delegation,\n        chainId: Number(auth.chainId),\n        nonce: auth.nonce,\n        yParity: auth.yParity,\n        r: auth.r,\n        s: auth.s\n    });\n    return {\n        authorization,\n        signature,\n        ...data && data !== \"0x\" ? {\n            data,\n            to\n        } : {}\n    };\n}\nfunction wrap(value) {\n    const { data, signature } = value;\n    assert(value);\n    const self = Secp256k1.recoverAddress({\n        payload: Authorization.getSignPayload(value.authorization),\n        signature: Signature.from(value.authorization)\n    });\n    const suffix = AbiParameters.encode(exports.suffixParameters, [\n        {\n            ...value.authorization,\n            delegation: value.authorization.address,\n            chainId: BigInt(value.authorization.chainId)\n        },\n        value.to ?? self,\n        data ?? \"0x\"\n    ]);\n    const suffixLength = Hex.fromNumber(Hex.size(suffix), {\n        size: 32\n    });\n    return Hex.concat(signature, suffix, suffixLength, exports.magicBytes);\n}\nfunction validate(value) {\n    try {\n        assert(value);\n        return true;\n    } catch  {\n        return false;\n    }\n}\nclass InvalidWrappedSignatureError extends Errors.BaseError {\n    constructor(wrapped){\n        super(`Value \\`${wrapped}\\` is an invalid ERC-8010 wrapped signature.`);\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"SignatureErc8010.InvalidWrappedSignatureError\"\n        });\n    }\n}\nexports.InvalidWrappedSignatureError = InvalidWrappedSignatureError; //# sourceMappingURL=SignatureErc8010.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ox/_cjs/erc8010/SignatureErc8010.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ox/_cjs/erc8010/index.js":
/*!***********************************************!*\
  !*** ./node_modules/ox/_cjs/erc8010/index.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.SignatureErc8010 = void 0;\nexports.SignatureErc8010 = __webpack_require__(/*! ./SignatureErc8010.js */ \"(ssr)/./node_modules/ox/_cjs/erc8010/SignatureErc8010.js\"); //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb3gvX2Nqcy9lcmM4MDEwL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCx3QkFBd0IsR0FBRyxLQUFLO0FBQ2hDQSx1SUFBMkQsRUFDM0QsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd3N0b24tdWkvLi9ub2RlX21vZHVsZXMvb3gvX2Nqcy9lcmM4MDEwL2luZGV4LmpzPzcxNzUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlNpZ25hdHVyZUVyYzgwMTAgPSB2b2lkIDA7XG5leHBvcnRzLlNpZ25hdHVyZUVyYzgwMTAgPSByZXF1aXJlKFwiLi9TaWduYXR1cmVFcmM4MDEwLmpzXCIpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiU2lnbmF0dXJlRXJjODAxMCIsInJlcXVpcmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ox/_cjs/erc8010/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ox/node_modules/abitype/dist/cjs/errors.js":
/*!*****************************************************************!*\
  !*** ./node_modules/ox/node_modules/abitype/dist/cjs/errors.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.BaseError = void 0;\nconst version_js_1 = __webpack_require__(/*! ./version.js */ \"(ssr)/./node_modules/ox/node_modules/abitype/dist/cjs/version.js\");\nclass BaseError extends Error {\n    constructor(shortMessage, args = {}){\n        const details = args.cause instanceof BaseError ? args.cause.details : args.cause?.message ? args.cause.message : args.details;\n        const docsPath = args.cause instanceof BaseError ? args.cause.docsPath || args.docsPath : args.docsPath;\n        const message = [\n            shortMessage || \"An error occurred.\",\n            \"\",\n            ...args.metaMessages ? [\n                ...args.metaMessages,\n                \"\"\n            ] : [],\n            ...docsPath ? [\n                `Docs: https://abitype.dev${docsPath}`\n            ] : [],\n            ...details ? [\n                `Details: ${details}`\n            ] : [],\n            `Version: abitype@${version_js_1.version}`\n        ].join(\"\\n\");\n        super(message);\n        Object.defineProperty(this, \"details\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"docsPath\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"metaMessages\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"shortMessage\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"AbiTypeError\"\n        });\n        if (args.cause) this.cause = args.cause;\n        this.details = details;\n        this.docsPath = docsPath;\n        this.metaMessages = args.metaMessages;\n        this.shortMessage = shortMessage;\n    }\n}\nexports.BaseError = BaseError; //# sourceMappingURL=errors.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb3gvbm9kZV9tb2R1bGVzL2FiaXR5cGUvZGlzdC9janMvZXJyb3JzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxpQkFBaUIsR0FBRyxLQUFLO0FBQ3pCLE1BQU1HLGVBQWVDLG1CQUFPQSxDQUFDLHNGQUFjO0FBQzNDLE1BQU1GLGtCQUFrQkc7SUFDcEJDLFlBQVlDLFlBQVksRUFBRUMsT0FBTyxDQUFDLENBQUMsQ0FBRTtRQUNqQyxNQUFNQyxVQUFVRCxLQUFLRSxLQUFLLFlBQVlSLFlBQ2hDTSxLQUFLRSxLQUFLLENBQUNELE9BQU8sR0FDbEJELEtBQUtFLEtBQUssRUFBRUMsVUFDUkgsS0FBS0UsS0FBSyxDQUFDQyxPQUFPLEdBQ2xCSCxLQUFLQyxPQUFPO1FBQ3RCLE1BQU1HLFdBQVdKLEtBQUtFLEtBQUssWUFBWVIsWUFDakNNLEtBQUtFLEtBQUssQ0FBQ0UsUUFBUSxJQUFJSixLQUFLSSxRQUFRLEdBQ3BDSixLQUFLSSxRQUFRO1FBQ25CLE1BQU1ELFVBQVU7WUFDWkosZ0JBQWdCO1lBQ2hCO2VBQ0lDLEtBQUtLLFlBQVksR0FBRzttQkFBSUwsS0FBS0ssWUFBWTtnQkFBRTthQUFHLEdBQUcsRUFBRTtlQUNuREQsV0FBVztnQkFBQyxDQUFDLHlCQUF5QixFQUFFQSxTQUFTLENBQUM7YUFBQyxHQUFHLEVBQUU7ZUFDeERILFVBQVU7Z0JBQUMsQ0FBQyxTQUFTLEVBQUVBLFFBQVEsQ0FBQzthQUFDLEdBQUcsRUFBRTtZQUMxQyxDQUFDLGlCQUFpQixFQUFFTixhQUFhVyxPQUFPLENBQUMsQ0FBQztTQUM3QyxDQUFDQyxJQUFJLENBQUM7UUFDUCxLQUFLLENBQUNKO1FBQ05iLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsV0FBVztZQUNuQ2lCLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZqQixPQUFPLEtBQUs7UUFDaEI7UUFDQUgsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxZQUFZO1lBQ3BDaUIsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVmpCLE9BQU8sS0FBSztRQUNoQjtRQUNBSCxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLGdCQUFnQjtZQUN4Q2lCLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZqQixPQUFPLEtBQUs7UUFDaEI7UUFDQUgsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxnQkFBZ0I7WUFDeENpQixZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWakIsT0FBTyxLQUFLO1FBQ2hCO1FBQ0FILE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsUUFBUTtZQUNoQ2lCLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZqQixPQUFPO1FBQ1g7UUFDQSxJQUFJTyxLQUFLRSxLQUFLLEVBQ1YsSUFBSSxDQUFDQSxLQUFLLEdBQUdGLEtBQUtFLEtBQUs7UUFDM0IsSUFBSSxDQUFDRCxPQUFPLEdBQUdBO1FBQ2YsSUFBSSxDQUFDRyxRQUFRLEdBQUdBO1FBQ2hCLElBQUksQ0FBQ0MsWUFBWSxHQUFHTCxLQUFLSyxZQUFZO1FBQ3JDLElBQUksQ0FBQ04sWUFBWSxHQUFHQTtJQUN4QjtBQUNKO0FBQ0FQLGlCQUFpQixHQUFHRSxXQUNwQixrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93c3Rvbi11aS8uL25vZGVfbW9kdWxlcy9veC9ub2RlX21vZHVsZXMvYWJpdHlwZS9kaXN0L2Nqcy9lcnJvcnMuanM/ZTk1NyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQmFzZUVycm9yID0gdm9pZCAwO1xuY29uc3QgdmVyc2lvbl9qc18xID0gcmVxdWlyZShcIi4vdmVyc2lvbi5qc1wiKTtcbmNsYXNzIEJhc2VFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihzaG9ydE1lc3NhZ2UsIGFyZ3MgPSB7fSkge1xuICAgICAgICBjb25zdCBkZXRhaWxzID0gYXJncy5jYXVzZSBpbnN0YW5jZW9mIEJhc2VFcnJvclxuICAgICAgICAgICAgPyBhcmdzLmNhdXNlLmRldGFpbHNcbiAgICAgICAgICAgIDogYXJncy5jYXVzZT8ubWVzc2FnZVxuICAgICAgICAgICAgICAgID8gYXJncy5jYXVzZS5tZXNzYWdlXG4gICAgICAgICAgICAgICAgOiBhcmdzLmRldGFpbHM7XG4gICAgICAgIGNvbnN0IGRvY3NQYXRoID0gYXJncy5jYXVzZSBpbnN0YW5jZW9mIEJhc2VFcnJvclxuICAgICAgICAgICAgPyBhcmdzLmNhdXNlLmRvY3NQYXRoIHx8IGFyZ3MuZG9jc1BhdGhcbiAgICAgICAgICAgIDogYXJncy5kb2NzUGF0aDtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IFtcbiAgICAgICAgICAgIHNob3J0TWVzc2FnZSB8fCAnQW4gZXJyb3Igb2NjdXJyZWQuJyxcbiAgICAgICAgICAgICcnLFxuICAgICAgICAgICAgLi4uKGFyZ3MubWV0YU1lc3NhZ2VzID8gWy4uLmFyZ3MubWV0YU1lc3NhZ2VzLCAnJ10gOiBbXSksXG4gICAgICAgICAgICAuLi4oZG9jc1BhdGggPyBbYERvY3M6IGh0dHBzOi8vYWJpdHlwZS5kZXYke2RvY3NQYXRofWBdIDogW10pLFxuICAgICAgICAgICAgLi4uKGRldGFpbHMgPyBbYERldGFpbHM6ICR7ZGV0YWlsc31gXSA6IFtdKSxcbiAgICAgICAgICAgIGBWZXJzaW9uOiBhYml0eXBlQCR7dmVyc2lvbl9qc18xLnZlcnNpb259YCxcbiAgICAgICAgXS5qb2luKCdcXG4nKTtcbiAgICAgICAgc3VwZXIobWVzc2FnZSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImRldGFpbHNcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwiZG9jc1BhdGhcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwibWV0YU1lc3NhZ2VzXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInNob3J0TWVzc2FnZVwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJuYW1lXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiAnQWJpVHlwZUVycm9yJ1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKGFyZ3MuY2F1c2UpXG4gICAgICAgICAgICB0aGlzLmNhdXNlID0gYXJncy5jYXVzZTtcbiAgICAgICAgdGhpcy5kZXRhaWxzID0gZGV0YWlscztcbiAgICAgICAgdGhpcy5kb2NzUGF0aCA9IGRvY3NQYXRoO1xuICAgICAgICB0aGlzLm1ldGFNZXNzYWdlcyA9IGFyZ3MubWV0YU1lc3NhZ2VzO1xuICAgICAgICB0aGlzLnNob3J0TWVzc2FnZSA9IHNob3J0TWVzc2FnZTtcbiAgICB9XG59XG5leHBvcnRzLkJhc2VFcnJvciA9IEJhc2VFcnJvcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVycm9ycy5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJCYXNlRXJyb3IiLCJ2ZXJzaW9uX2pzXzEiLCJyZXF1aXJlIiwiRXJyb3IiLCJjb25zdHJ1Y3RvciIsInNob3J0TWVzc2FnZSIsImFyZ3MiLCJkZXRhaWxzIiwiY2F1c2UiLCJtZXNzYWdlIiwiZG9jc1BhdGgiLCJtZXRhTWVzc2FnZXMiLCJ2ZXJzaW9uIiwiam9pbiIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ox/node_modules/abitype/dist/cjs/errors.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ox/node_modules/abitype/dist/cjs/exports/index.js":
/*!************************************************************************!*\
  !*** ./node_modules/ox/node_modules/abitype/dist/cjs/exports/index.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.CircularReferenceError = exports.InvalidParenthesisError = exports.UnknownSignatureError = exports.InvalidSignatureError = exports.InvalidStructSignatureError = exports.InvalidAbiParameterError = exports.InvalidAbiParametersError = exports.InvalidParameterError = exports.SolidityProtectedKeywordError = exports.InvalidModifierError = exports.InvalidFunctionModifierError = exports.InvalidAbiTypeParameterError = exports.UnknownSolidityTypeError = exports.InvalidAbiItemError = exports.UnknownTypeError = exports.parseAbiParameters = exports.parseAbiParameter = exports.parseAbiItem = exports.parseAbi = exports.formatAbiParameters = exports.formatAbiParameter = exports.formatAbiItem = exports.formatAbi = exports.narrow = exports.BaseError = void 0;\nvar errors_js_1 = __webpack_require__(/*! ../errors.js */ \"(ssr)/./node_modules/ox/node_modules/abitype/dist/cjs/errors.js\");\nObject.defineProperty(exports, \"BaseError\", ({\n    enumerable: true,\n    get: function() {\n        return errors_js_1.BaseError;\n    }\n}));\nvar narrow_js_1 = __webpack_require__(/*! ../narrow.js */ \"(ssr)/./node_modules/ox/node_modules/abitype/dist/cjs/narrow.js\");\nObject.defineProperty(exports, \"narrow\", ({\n    enumerable: true,\n    get: function() {\n        return narrow_js_1.narrow;\n    }\n}));\nvar formatAbi_js_1 = __webpack_require__(/*! ../human-readable/formatAbi.js */ \"(ssr)/./node_modules/ox/node_modules/abitype/dist/cjs/human-readable/formatAbi.js\");\nObject.defineProperty(exports, \"formatAbi\", ({\n    enumerable: true,\n    get: function() {\n        return formatAbi_js_1.formatAbi;\n    }\n}));\nvar formatAbiItem_js_1 = __webpack_require__(/*! ../human-readable/formatAbiItem.js */ \"(ssr)/./node_modules/ox/node_modules/abitype/dist/cjs/human-readable/formatAbiItem.js\");\nObject.defineProperty(exports, \"formatAbiItem\", ({\n    enumerable: true,\n    get: function() {\n        return formatAbiItem_js_1.formatAbiItem;\n    }\n}));\nvar formatAbiParameter_js_1 = __webpack_require__(/*! ../human-readable/formatAbiParameter.js */ \"(ssr)/./node_modules/ox/node_modules/abitype/dist/cjs/human-readable/formatAbiParameter.js\");\nObject.defineProperty(exports, \"formatAbiParameter\", ({\n    enumerable: true,\n    get: function() {\n        return formatAbiParameter_js_1.formatAbiParameter;\n    }\n}));\nvar formatAbiParameters_js_1 = __webpack_require__(/*! ../human-readable/formatAbiParameters.js */ \"(ssr)/./node_modules/ox/node_modules/abitype/dist/cjs/human-readable/formatAbiParameters.js\");\nObject.defineProperty(exports, \"formatAbiParameters\", ({\n    enumerable: true,\n    get: function() {\n        return formatAbiParameters_js_1.formatAbiParameters;\n    }\n}));\nvar parseAbi_js_1 = __webpack_require__(/*! ../human-readable/parseAbi.js */ \"(ssr)/./node_modules/ox/node_modules/abitype/dist/cjs/human-readable/parseAbi.js\");\nObject.defineProperty(exports, \"parseAbi\", ({\n    enumerable: true,\n    get: function() {\n        return parseAbi_js_1.parseAbi;\n    }\n}));\nvar parseAbiItem_js_1 = __webpack_require__(/*! ../human-readable/parseAbiItem.js */ \"(ssr)/./node_modules/ox/node_modules/abitype/dist/cjs/human-readable/parseAbiItem.js\");\nObject.defineProperty(exports, \"parseAbiItem\", ({\n    enumerable: true,\n    get: function() {\n        return parseAbiItem_js_1.parseAbiItem;\n    }\n}));\nvar parseAbiParameter_js_1 = __webpack_require__(/*! ../human-readable/parseAbiParameter.js */ \"(ssr)/./node_modules/ox/node_modules/abitype/dist/cjs/human-readable/parseAbiParameter.js\");\nObject.defineProperty(exports, \"parseAbiParameter\", ({\n    enumerable: true,\n    get: function() {\n        return parseAbiParameter_js_1.parseAbiParameter;\n    }\n}));\nvar parseAbiParameters_js_1 = __webpack_require__(/*! ../human-readable/parseAbiParameters.js */ \"(ssr)/./node_modules/ox/node_modules/abitype/dist/cjs/human-readable/parseAbiParameters.js\");\nObject.defineProperty(exports, \"parseAbiParameters\", ({\n    enumerable: true,\n    get: function() {\n        return parseAbiParameters_js_1.parseAbiParameters;\n    }\n}));\nvar abiItem_js_1 = __webpack_require__(/*! ../human-readable/errors/abiItem.js */ \"(ssr)/./node_modules/ox/node_modules/abitype/dist/cjs/human-readable/errors/abiItem.js\");\nObject.defineProperty(exports, \"UnknownTypeError\", ({\n    enumerable: true,\n    get: function() {\n        return abiItem_js_1.UnknownTypeError;\n    }\n}));\nObject.defineProperty(exports, \"InvalidAbiItemError\", ({\n    enumerable: true,\n    get: function() {\n        return abiItem_js_1.InvalidAbiItemError;\n    }\n}));\nObject.defineProperty(exports, \"UnknownSolidityTypeError\", ({\n    enumerable: true,\n    get: function() {\n        return abiItem_js_1.UnknownSolidityTypeError;\n    }\n}));\nvar abiParameter_js_1 = __webpack_require__(/*! ../human-readable/errors/abiParameter.js */ \"(ssr)/./node_modules/ox/node_modules/abitype/dist/cjs/human-readable/errors/abiParameter.js\");\nObject.defineProperty(exports, \"InvalidAbiTypeParameterError\", ({\n    enumerable: true,\n    get: function() {\n        return abiParameter_js_1.InvalidAbiTypeParameterError;\n    }\n}));\nObject.defineProperty(exports, \"InvalidFunctionModifierError\", ({\n    enumerable: true,\n    get: function() {\n        return abiParameter_js_1.InvalidFunctionModifierError;\n    }\n}));\nObject.defineProperty(exports, \"InvalidModifierError\", ({\n    enumerable: true,\n    get: function() {\n        return abiParameter_js_1.InvalidModifierError;\n    }\n}));\nObject.defineProperty(exports, \"SolidityProtectedKeywordError\", ({\n    enumerable: true,\n    get: function() {\n        return abiParameter_js_1.SolidityProtectedKeywordError;\n    }\n}));\nObject.defineProperty(exports, \"InvalidParameterError\", ({\n    enumerable: true,\n    get: function() {\n        return abiParameter_js_1.InvalidParameterError;\n    }\n}));\nObject.defineProperty(exports, \"InvalidAbiParametersError\", ({\n    enumerable: true,\n    get: function() {\n        return abiParameter_js_1.InvalidAbiParametersError;\n    }\n}));\nObject.defineProperty(exports, \"InvalidAbiParameterError\", ({\n    enumerable: true,\n    get: function() {\n        return abiParameter_js_1.InvalidAbiParameterError;\n    }\n}));\nvar signature_js_1 = __webpack_require__(/*! ../human-readable/errors/signature.js */ \"(ssr)/./node_modules/ox/node_modules/abitype/dist/cjs/human-readable/errors/signature.js\");\nObject.defineProperty(exports, \"InvalidStructSignatureError\", ({\n    enumerable: true,\n    get: function() {\n        return signature_js_1.InvalidStructSignatureError;\n    }\n}));\nObject.defineProperty(exports, \"InvalidSignatureError\", ({\n    enumerable: true,\n    get: function() {\n        return signature_js_1.InvalidSignatureError;\n    }\n}));\nObject.defineProperty(exports, \"UnknownSignatureError\", ({\n    enumerable: true,\n    get: function() {\n        return signature_js_1.UnknownSignatureError;\n    }\n}));\nvar splitParameters_js_1 = __webpack_require__(/*! ../human-readable/errors/splitParameters.js */ \"(ssr)/./node_modules/ox/node_modules/abitype/dist/cjs/human-readable/errors/splitParameters.js\");\nObject.defineProperty(exports, \"InvalidParenthesisError\", ({\n    enumerable: true,\n    get: function() {\n        return splitParameters_js_1.InvalidParenthesisError;\n    }\n}));\nvar struct_js_1 = __webpack_require__(/*! ../human-readable/errors/struct.js */ \"(ssr)/./node_modules/ox/node_modules/abitype/dist/cjs/human-readable/errors/struct.js\");\nObject.defineProperty(exports, \"CircularReferenceError\", ({\n    enumerable: true,\n    get: function() {\n        return struct_js_1.CircularReferenceError;\n    }\n})); //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ox/node_modules/abitype/dist/cjs/exports/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ox/node_modules/abitype/dist/cjs/human-readable/errors/abiItem.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/ox/node_modules/abitype/dist/cjs/human-readable/errors/abiItem.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.UnknownSolidityTypeError = exports.UnknownTypeError = exports.InvalidAbiItemError = void 0;\nconst errors_js_1 = __webpack_require__(/*! ../../errors.js */ \"(ssr)/./node_modules/ox/node_modules/abitype/dist/cjs/errors.js\");\nclass InvalidAbiItemError extends errors_js_1.BaseError {\n    constructor({ signature }){\n        super(\"Failed to parse ABI item.\", {\n            details: `parseAbiItem(${JSON.stringify(signature, null, 2)})`,\n            docsPath: \"/api/human#parseabiitem-1\"\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"InvalidAbiItemError\"\n        });\n    }\n}\nexports.InvalidAbiItemError = InvalidAbiItemError;\nclass UnknownTypeError extends errors_js_1.BaseError {\n    constructor({ type }){\n        super(\"Unknown type.\", {\n            metaMessages: [\n                `Type \"${type}\" is not a valid ABI type. Perhaps you forgot to include a struct signature?`\n            ]\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"UnknownTypeError\"\n        });\n    }\n}\nexports.UnknownTypeError = UnknownTypeError;\nclass UnknownSolidityTypeError extends errors_js_1.BaseError {\n    constructor({ type }){\n        super(\"Unknown type.\", {\n            metaMessages: [\n                `Type \"${type}\" is not a valid ABI type.`\n            ]\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"UnknownSolidityTypeError\"\n        });\n    }\n}\nexports.UnknownSolidityTypeError = UnknownSolidityTypeError; //# sourceMappingURL=abiItem.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb3gvbm9kZV9tb2R1bGVzL2FiaXR5cGUvZGlzdC9janMvaHVtYW4tcmVhZGFibGUvZXJyb3JzL2FiaUl0ZW0uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELGdDQUFnQyxHQUFHQSx3QkFBd0IsR0FBR0EsMkJBQTJCLEdBQUcsS0FBSztBQUNqRyxNQUFNSyxjQUFjQyxtQkFBT0EsQ0FBQyx3RkFBaUI7QUFDN0MsTUFBTUYsNEJBQTRCQyxZQUFZRSxTQUFTO0lBQ25EQyxZQUFZLEVBQUVDLFNBQVMsRUFBRSxDQUFFO1FBQ3ZCLEtBQUssQ0FBQyw2QkFBNkI7WUFDL0JDLFNBQVMsQ0FBQyxhQUFhLEVBQUVDLEtBQUtDLFNBQVMsQ0FBQ0gsV0FBVyxNQUFNLEdBQUcsQ0FBQyxDQUFDO1lBQzlESSxVQUFVO1FBQ2Q7UUFDQWYsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxRQUFRO1lBQ2hDZSxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWZixPQUFPO1FBQ1g7SUFDSjtBQUNKO0FBQ0FELDJCQUEyQixHQUFHSTtBQUM5QixNQUFNRCx5QkFBeUJFLFlBQVlFLFNBQVM7SUFDaERDLFlBQVksRUFBRVMsSUFBSSxFQUFFLENBQUU7UUFDbEIsS0FBSyxDQUFDLGlCQUFpQjtZQUNuQkMsY0FBYztnQkFDVixDQUFDLE1BQU0sRUFBRUQsS0FBSyw0RUFBNEUsQ0FBQzthQUM5RjtRQUNMO1FBQ0FuQixPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLFFBQVE7WUFDaENlLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZmLE9BQU87UUFDWDtJQUNKO0FBQ0o7QUFDQUQsd0JBQXdCLEdBQUdHO0FBQzNCLE1BQU1ELGlDQUFpQ0csWUFBWUUsU0FBUztJQUN4REMsWUFBWSxFQUFFUyxJQUFJLEVBQUUsQ0FBRTtRQUNsQixLQUFLLENBQUMsaUJBQWlCO1lBQ25CQyxjQUFjO2dCQUFDLENBQUMsTUFBTSxFQUFFRCxLQUFLLDBCQUEwQixDQUFDO2FBQUM7UUFDN0Q7UUFDQW5CLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsUUFBUTtZQUNoQ2UsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVmYsT0FBTztRQUNYO0lBQ0o7QUFDSjtBQUNBRCxnQ0FBZ0MsR0FBR0UsMEJBQ25DLG1DQUFtQyIsInNvdXJjZXMiOlsid2VicGFjazovL3dzdG9uLXVpLy4vbm9kZV9tb2R1bGVzL294L25vZGVfbW9kdWxlcy9hYml0eXBlL2Rpc3QvY2pzL2h1bWFuLXJlYWRhYmxlL2Vycm9ycy9hYmlJdGVtLmpzPzdkZTAiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlVua25vd25Tb2xpZGl0eVR5cGVFcnJvciA9IGV4cG9ydHMuVW5rbm93blR5cGVFcnJvciA9IGV4cG9ydHMuSW52YWxpZEFiaUl0ZW1FcnJvciA9IHZvaWQgMDtcbmNvbnN0IGVycm9yc19qc18xID0gcmVxdWlyZShcIi4uLy4uL2Vycm9ycy5qc1wiKTtcbmNsYXNzIEludmFsaWRBYmlJdGVtRXJyb3IgZXh0ZW5kcyBlcnJvcnNfanNfMS5CYXNlRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKHsgc2lnbmF0dXJlIH0pIHtcbiAgICAgICAgc3VwZXIoJ0ZhaWxlZCB0byBwYXJzZSBBQkkgaXRlbS4nLCB7XG4gICAgICAgICAgICBkZXRhaWxzOiBgcGFyc2VBYmlJdGVtKCR7SlNPTi5zdHJpbmdpZnkoc2lnbmF0dXJlLCBudWxsLCAyKX0pYCxcbiAgICAgICAgICAgIGRvY3NQYXRoOiAnL2FwaS9odW1hbiNwYXJzZWFiaWl0ZW0tMScsXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJuYW1lXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiAnSW52YWxpZEFiaUl0ZW1FcnJvcidcbiAgICAgICAgfSk7XG4gICAgfVxufVxuZXhwb3J0cy5JbnZhbGlkQWJpSXRlbUVycm9yID0gSW52YWxpZEFiaUl0ZW1FcnJvcjtcbmNsYXNzIFVua25vd25UeXBlRXJyb3IgZXh0ZW5kcyBlcnJvcnNfanNfMS5CYXNlRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKHsgdHlwZSB9KSB7XG4gICAgICAgIHN1cGVyKCdVbmtub3duIHR5cGUuJywge1xuICAgICAgICAgICAgbWV0YU1lc3NhZ2VzOiBbXG4gICAgICAgICAgICAgICAgYFR5cGUgXCIke3R5cGV9XCIgaXMgbm90IGEgdmFsaWQgQUJJIHR5cGUuIFBlcmhhcHMgeW91IGZvcmdvdCB0byBpbmNsdWRlIGEgc3RydWN0IHNpZ25hdHVyZT9gLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIm5hbWVcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6ICdVbmtub3duVHlwZUVycm9yJ1xuICAgICAgICB9KTtcbiAgICB9XG59XG5leHBvcnRzLlVua25vd25UeXBlRXJyb3IgPSBVbmtub3duVHlwZUVycm9yO1xuY2xhc3MgVW5rbm93blNvbGlkaXR5VHlwZUVycm9yIGV4dGVuZHMgZXJyb3JzX2pzXzEuQmFzZUVycm9yIHtcbiAgICBjb25zdHJ1Y3Rvcih7IHR5cGUgfSkge1xuICAgICAgICBzdXBlcignVW5rbm93biB0eXBlLicsIHtcbiAgICAgICAgICAgIG1ldGFNZXNzYWdlczogW2BUeXBlIFwiJHt0eXBlfVwiIGlzIG5vdCBhIHZhbGlkIEFCSSB0eXBlLmBdLFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwibmFtZVwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogJ1Vua25vd25Tb2xpZGl0eVR5cGVFcnJvcidcbiAgICAgICAgfSk7XG4gICAgfVxufVxuZXhwb3J0cy5Vbmtub3duU29saWRpdHlUeXBlRXJyb3IgPSBVbmtub3duU29saWRpdHlUeXBlRXJyb3I7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hYmlJdGVtLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIlVua25vd25Tb2xpZGl0eVR5cGVFcnJvciIsIlVua25vd25UeXBlRXJyb3IiLCJJbnZhbGlkQWJpSXRlbUVycm9yIiwiZXJyb3JzX2pzXzEiLCJyZXF1aXJlIiwiQmFzZUVycm9yIiwiY29uc3RydWN0b3IiLCJzaWduYXR1cmUiLCJkZXRhaWxzIiwiSlNPTiIsInN0cmluZ2lmeSIsImRvY3NQYXRoIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwidHlwZSIsIm1ldGFNZXNzYWdlcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ox/node_modules/abitype/dist/cjs/human-readable/errors/abiItem.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ox/node_modules/abitype/dist/cjs/human-readable/errors/abiParameter.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/ox/node_modules/abitype/dist/cjs/human-readable/errors/abiParameter.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.InvalidAbiTypeParameterError = exports.InvalidFunctionModifierError = exports.InvalidModifierError = exports.SolidityProtectedKeywordError = exports.InvalidParameterError = exports.InvalidAbiParametersError = exports.InvalidAbiParameterError = void 0;\nconst errors_js_1 = __webpack_require__(/*! ../../errors.js */ \"(ssr)/./node_modules/ox/node_modules/abitype/dist/cjs/errors.js\");\nclass InvalidAbiParameterError extends errors_js_1.BaseError {\n    constructor({ param }){\n        super(\"Failed to parse ABI parameter.\", {\n            details: `parseAbiParameter(${JSON.stringify(param, null, 2)})`,\n            docsPath: \"/api/human#parseabiparameter-1\"\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"InvalidAbiParameterError\"\n        });\n    }\n}\nexports.InvalidAbiParameterError = InvalidAbiParameterError;\nclass InvalidAbiParametersError extends errors_js_1.BaseError {\n    constructor({ params }){\n        super(\"Failed to parse ABI parameters.\", {\n            details: `parseAbiParameters(${JSON.stringify(params, null, 2)})`,\n            docsPath: \"/api/human#parseabiparameters-1\"\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"InvalidAbiParametersError\"\n        });\n    }\n}\nexports.InvalidAbiParametersError = InvalidAbiParametersError;\nclass InvalidParameterError extends errors_js_1.BaseError {\n    constructor({ param }){\n        super(\"Invalid ABI parameter.\", {\n            details: param\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"InvalidParameterError\"\n        });\n    }\n}\nexports.InvalidParameterError = InvalidParameterError;\nclass SolidityProtectedKeywordError extends errors_js_1.BaseError {\n    constructor({ param, name }){\n        super(\"Invalid ABI parameter.\", {\n            details: param,\n            metaMessages: [\n                `\"${name}\" is a protected Solidity keyword. More info: https://docs.soliditylang.org/en/latest/cheatsheet.html`\n            ]\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"SolidityProtectedKeywordError\"\n        });\n    }\n}\nexports.SolidityProtectedKeywordError = SolidityProtectedKeywordError;\nclass InvalidModifierError extends errors_js_1.BaseError {\n    constructor({ param, type, modifier }){\n        super(\"Invalid ABI parameter.\", {\n            details: param,\n            metaMessages: [\n                `Modifier \"${modifier}\" not allowed${type ? ` in \"${type}\" type` : \"\"}.`\n            ]\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"InvalidModifierError\"\n        });\n    }\n}\nexports.InvalidModifierError = InvalidModifierError;\nclass InvalidFunctionModifierError extends errors_js_1.BaseError {\n    constructor({ param, type, modifier }){\n        super(\"Invalid ABI parameter.\", {\n            details: param,\n            metaMessages: [\n                `Modifier \"${modifier}\" not allowed${type ? ` in \"${type}\" type` : \"\"}.`,\n                `Data location can only be specified for array, struct, or mapping types, but \"${modifier}\" was given.`\n            ]\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"InvalidFunctionModifierError\"\n        });\n    }\n}\nexports.InvalidFunctionModifierError = InvalidFunctionModifierError;\nclass InvalidAbiTypeParameterError extends errors_js_1.BaseError {\n    constructor({ abiParameter }){\n        super(\"Invalid ABI parameter.\", {\n            details: JSON.stringify(abiParameter, null, 2),\n            metaMessages: [\n                \"ABI parameter type is invalid.\"\n            ]\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"InvalidAbiTypeParameterError\"\n        });\n    }\n}\nexports.InvalidAbiTypeParameterError = InvalidAbiTypeParameterError; //# sourceMappingURL=abiParameter.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ox/node_modules/abitype/dist/cjs/human-readable/errors/abiParameter.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ox/node_modules/abitype/dist/cjs/human-readable/errors/signature.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/ox/node_modules/abitype/dist/cjs/human-readable/errors/signature.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.InvalidStructSignatureError = exports.UnknownSignatureError = exports.InvalidSignatureError = void 0;\nconst errors_js_1 = __webpack_require__(/*! ../../errors.js */ \"(ssr)/./node_modules/ox/node_modules/abitype/dist/cjs/errors.js\");\nclass InvalidSignatureError extends errors_js_1.BaseError {\n    constructor({ signature, type }){\n        super(`Invalid ${type} signature.`, {\n            details: signature\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"InvalidSignatureError\"\n        });\n    }\n}\nexports.InvalidSignatureError = InvalidSignatureError;\nclass UnknownSignatureError extends errors_js_1.BaseError {\n    constructor({ signature }){\n        super(\"Unknown signature.\", {\n            details: signature\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"UnknownSignatureError\"\n        });\n    }\n}\nexports.UnknownSignatureError = UnknownSignatureError;\nclass InvalidStructSignatureError extends errors_js_1.BaseError {\n    constructor({ signature }){\n        super(\"Invalid struct signature.\", {\n            details: signature,\n            metaMessages: [\n                \"No properties exist.\"\n            ]\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"InvalidStructSignatureError\"\n        });\n    }\n}\nexports.InvalidStructSignatureError = InvalidStructSignatureError; //# sourceMappingURL=signature.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb3gvbm9kZV9tb2R1bGVzL2FiaXR5cGUvZGlzdC9janMvaHVtYW4tcmVhZGFibGUvZXJyb3JzL3NpZ25hdHVyZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsbUNBQW1DLEdBQUdBLDZCQUE2QixHQUFHQSw2QkFBNkIsR0FBRyxLQUFLO0FBQzNHLE1BQU1LLGNBQWNDLG1CQUFPQSxDQUFDLHdGQUFpQjtBQUM3QyxNQUFNRiw4QkFBOEJDLFlBQVlFLFNBQVM7SUFDckRDLFlBQVksRUFBRUMsU0FBUyxFQUFFQyxJQUFJLEVBQUcsQ0FBRTtRQUM5QixLQUFLLENBQUMsQ0FBQyxRQUFRLEVBQUVBLEtBQUssV0FBVyxDQUFDLEVBQUU7WUFDaENDLFNBQVNGO1FBQ2I7UUFDQVgsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxRQUFRO1lBQ2hDYSxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWYixPQUFPO1FBQ1g7SUFDSjtBQUNKO0FBQ0FELDZCQUE2QixHQUFHSTtBQUNoQyxNQUFNRCw4QkFBOEJFLFlBQVlFLFNBQVM7SUFDckRDLFlBQVksRUFBRUMsU0FBUyxFQUFFLENBQUU7UUFDdkIsS0FBSyxDQUFDLHNCQUFzQjtZQUN4QkUsU0FBU0Y7UUFDYjtRQUNBWCxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLFFBQVE7WUFDaENhLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZiLE9BQU87UUFDWDtJQUNKO0FBQ0o7QUFDQUQsNkJBQTZCLEdBQUdHO0FBQ2hDLE1BQU1ELG9DQUFvQ0csWUFBWUUsU0FBUztJQUMzREMsWUFBWSxFQUFFQyxTQUFTLEVBQUUsQ0FBRTtRQUN2QixLQUFLLENBQUMsNkJBQTZCO1lBQy9CRSxTQUFTRjtZQUNUTSxjQUFjO2dCQUFDO2FBQXVCO1FBQzFDO1FBQ0FqQixPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLFFBQVE7WUFDaENhLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZiLE9BQU87UUFDWDtJQUNKO0FBQ0o7QUFDQUQsbUNBQW1DLEdBQUdFLDZCQUN0QyxxQ0FBcUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93c3Rvbi11aS8uL25vZGVfbW9kdWxlcy9veC9ub2RlX21vZHVsZXMvYWJpdHlwZS9kaXN0L2Nqcy9odW1hbi1yZWFkYWJsZS9lcnJvcnMvc2lnbmF0dXJlLmpzP2U4MzYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkludmFsaWRTdHJ1Y3RTaWduYXR1cmVFcnJvciA9IGV4cG9ydHMuVW5rbm93blNpZ25hdHVyZUVycm9yID0gZXhwb3J0cy5JbnZhbGlkU2lnbmF0dXJlRXJyb3IgPSB2b2lkIDA7XG5jb25zdCBlcnJvcnNfanNfMSA9IHJlcXVpcmUoXCIuLi8uLi9lcnJvcnMuanNcIik7XG5jbGFzcyBJbnZhbGlkU2lnbmF0dXJlRXJyb3IgZXh0ZW5kcyBlcnJvcnNfanNfMS5CYXNlRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKHsgc2lnbmF0dXJlLCB0eXBlLCB9KSB7XG4gICAgICAgIHN1cGVyKGBJbnZhbGlkICR7dHlwZX0gc2lnbmF0dXJlLmAsIHtcbiAgICAgICAgICAgIGRldGFpbHM6IHNpZ25hdHVyZSxcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIm5hbWVcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6ICdJbnZhbGlkU2lnbmF0dXJlRXJyb3InXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbmV4cG9ydHMuSW52YWxpZFNpZ25hdHVyZUVycm9yID0gSW52YWxpZFNpZ25hdHVyZUVycm9yO1xuY2xhc3MgVW5rbm93blNpZ25hdHVyZUVycm9yIGV4dGVuZHMgZXJyb3JzX2pzXzEuQmFzZUVycm9yIHtcbiAgICBjb25zdHJ1Y3Rvcih7IHNpZ25hdHVyZSB9KSB7XG4gICAgICAgIHN1cGVyKCdVbmtub3duIHNpZ25hdHVyZS4nLCB7XG4gICAgICAgICAgICBkZXRhaWxzOiBzaWduYXR1cmUsXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJuYW1lXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiAnVW5rbm93blNpZ25hdHVyZUVycm9yJ1xuICAgICAgICB9KTtcbiAgICB9XG59XG5leHBvcnRzLlVua25vd25TaWduYXR1cmVFcnJvciA9IFVua25vd25TaWduYXR1cmVFcnJvcjtcbmNsYXNzIEludmFsaWRTdHJ1Y3RTaWduYXR1cmVFcnJvciBleHRlbmRzIGVycm9yc19qc18xLkJhc2VFcnJvciB7XG4gICAgY29uc3RydWN0b3IoeyBzaWduYXR1cmUgfSkge1xuICAgICAgICBzdXBlcignSW52YWxpZCBzdHJ1Y3Qgc2lnbmF0dXJlLicsIHtcbiAgICAgICAgICAgIGRldGFpbHM6IHNpZ25hdHVyZSxcbiAgICAgICAgICAgIG1ldGFNZXNzYWdlczogWydObyBwcm9wZXJ0aWVzIGV4aXN0LiddLFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwibmFtZVwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogJ0ludmFsaWRTdHJ1Y3RTaWduYXR1cmVFcnJvcidcbiAgICAgICAgfSk7XG4gICAgfVxufVxuZXhwb3J0cy5JbnZhbGlkU3RydWN0U2lnbmF0dXJlRXJyb3IgPSBJbnZhbGlkU3RydWN0U2lnbmF0dXJlRXJyb3I7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zaWduYXR1cmUuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiSW52YWxpZFN0cnVjdFNpZ25hdHVyZUVycm9yIiwiVW5rbm93blNpZ25hdHVyZUVycm9yIiwiSW52YWxpZFNpZ25hdHVyZUVycm9yIiwiZXJyb3JzX2pzXzEiLCJyZXF1aXJlIiwiQmFzZUVycm9yIiwiY29uc3RydWN0b3IiLCJzaWduYXR1cmUiLCJ0eXBlIiwiZGV0YWlscyIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIm1ldGFNZXNzYWdlcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ox/node_modules/abitype/dist/cjs/human-readable/errors/signature.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ox/node_modules/abitype/dist/cjs/human-readable/errors/splitParameters.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/ox/node_modules/abitype/dist/cjs/human-readable/errors/splitParameters.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.InvalidParenthesisError = void 0;\nconst errors_js_1 = __webpack_require__(/*! ../../errors.js */ \"(ssr)/./node_modules/ox/node_modules/abitype/dist/cjs/errors.js\");\nclass InvalidParenthesisError extends errors_js_1.BaseError {\n    constructor({ current, depth }){\n        super(\"Unbalanced parentheses.\", {\n            metaMessages: [\n                `\"${current.trim()}\" has too many ${depth > 0 ? \"opening\" : \"closing\"} parentheses.`\n            ],\n            details: `Depth \"${depth}\"`\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"InvalidParenthesisError\"\n        });\n    }\n}\nexports.InvalidParenthesisError = InvalidParenthesisError; //# sourceMappingURL=splitParameters.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb3gvbm9kZV9tb2R1bGVzL2FiaXR5cGUvZGlzdC9janMvaHVtYW4tcmVhZGFibGUvZXJyb3JzL3NwbGl0UGFyYW1ldGVycy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsK0JBQStCLEdBQUcsS0FBSztBQUN2QyxNQUFNRyxjQUFjQyxtQkFBT0EsQ0FBQyx3RkFBaUI7QUFDN0MsTUFBTUYsZ0NBQWdDQyxZQUFZRSxTQUFTO0lBQ3ZEQyxZQUFZLEVBQUVDLE9BQU8sRUFBRUMsS0FBSyxFQUFFLENBQUU7UUFDNUIsS0FBSyxDQUFDLDJCQUEyQjtZQUM3QkMsY0FBYztnQkFDVixDQUFDLENBQUMsRUFBRUYsUUFBUUcsSUFBSSxHQUFHLGVBQWUsRUFBRUYsUUFBUSxJQUFJLFlBQVksVUFBVSxhQUFhLENBQUM7YUFDdkY7WUFDREcsU0FBUyxDQUFDLE9BQU8sRUFBRUgsTUFBTSxDQUFDLENBQUM7UUFDL0I7UUFDQVYsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxRQUFRO1lBQ2hDYSxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWYixPQUFPO1FBQ1g7SUFDSjtBQUNKO0FBQ0FELCtCQUErQixHQUFHRSx5QkFDbEMsMkNBQTJDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd3N0b24tdWkvLi9ub2RlX21vZHVsZXMvb3gvbm9kZV9tb2R1bGVzL2FiaXR5cGUvZGlzdC9janMvaHVtYW4tcmVhZGFibGUvZXJyb3JzL3NwbGl0UGFyYW1ldGVycy5qcz8wNTY3Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5JbnZhbGlkUGFyZW50aGVzaXNFcnJvciA9IHZvaWQgMDtcbmNvbnN0IGVycm9yc19qc18xID0gcmVxdWlyZShcIi4uLy4uL2Vycm9ycy5qc1wiKTtcbmNsYXNzIEludmFsaWRQYXJlbnRoZXNpc0Vycm9yIGV4dGVuZHMgZXJyb3JzX2pzXzEuQmFzZUVycm9yIHtcbiAgICBjb25zdHJ1Y3Rvcih7IGN1cnJlbnQsIGRlcHRoIH0pIHtcbiAgICAgICAgc3VwZXIoJ1VuYmFsYW5jZWQgcGFyZW50aGVzZXMuJywge1xuICAgICAgICAgICAgbWV0YU1lc3NhZ2VzOiBbXG4gICAgICAgICAgICAgICAgYFwiJHtjdXJyZW50LnRyaW0oKX1cIiBoYXMgdG9vIG1hbnkgJHtkZXB0aCA+IDAgPyAnb3BlbmluZycgOiAnY2xvc2luZyd9IHBhcmVudGhlc2VzLmAsXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgZGV0YWlsczogYERlcHRoIFwiJHtkZXB0aH1cImAsXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJuYW1lXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiAnSW52YWxpZFBhcmVudGhlc2lzRXJyb3InXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbmV4cG9ydHMuSW52YWxpZFBhcmVudGhlc2lzRXJyb3IgPSBJbnZhbGlkUGFyZW50aGVzaXNFcnJvcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNwbGl0UGFyYW1ldGVycy5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJJbnZhbGlkUGFyZW50aGVzaXNFcnJvciIsImVycm9yc19qc18xIiwicmVxdWlyZSIsIkJhc2VFcnJvciIsImNvbnN0cnVjdG9yIiwiY3VycmVudCIsImRlcHRoIiwibWV0YU1lc3NhZ2VzIiwidHJpbSIsImRldGFpbHMiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ox/node_modules/abitype/dist/cjs/human-readable/errors/splitParameters.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ox/node_modules/abitype/dist/cjs/human-readable/errors/struct.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/ox/node_modules/abitype/dist/cjs/human-readable/errors/struct.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.CircularReferenceError = void 0;\nconst errors_js_1 = __webpack_require__(/*! ../../errors.js */ \"(ssr)/./node_modules/ox/node_modules/abitype/dist/cjs/errors.js\");\nclass CircularReferenceError extends errors_js_1.BaseError {\n    constructor({ type }){\n        super(\"Circular reference detected.\", {\n            metaMessages: [\n                `Struct \"${type}\" is a circular reference.`\n            ]\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"CircularReferenceError\"\n        });\n    }\n}\nexports.CircularReferenceError = CircularReferenceError; //# sourceMappingURL=struct.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb3gvbm9kZV9tb2R1bGVzL2FiaXR5cGUvZGlzdC9janMvaHVtYW4tcmVhZGFibGUvZXJyb3JzL3N0cnVjdC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsOEJBQThCLEdBQUcsS0FBSztBQUN0QyxNQUFNRyxjQUFjQyxtQkFBT0EsQ0FBQyx3RkFBaUI7QUFDN0MsTUFBTUYsK0JBQStCQyxZQUFZRSxTQUFTO0lBQ3REQyxZQUFZLEVBQUVDLElBQUksRUFBRSxDQUFFO1FBQ2xCLEtBQUssQ0FBQyxnQ0FBZ0M7WUFDbENDLGNBQWM7Z0JBQUMsQ0FBQyxRQUFRLEVBQUVELEtBQUssMEJBQTBCLENBQUM7YUFBQztRQUMvRDtRQUNBVCxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLFFBQVE7WUFDaENVLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZWLE9BQU87UUFDWDtJQUNKO0FBQ0o7QUFDQUQsOEJBQThCLEdBQUdFLHdCQUNqQyxrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93c3Rvbi11aS8uL25vZGVfbW9kdWxlcy9veC9ub2RlX21vZHVsZXMvYWJpdHlwZS9kaXN0L2Nqcy9odW1hbi1yZWFkYWJsZS9lcnJvcnMvc3RydWN0LmpzPzk3ZmIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkNpcmN1bGFyUmVmZXJlbmNlRXJyb3IgPSB2b2lkIDA7XG5jb25zdCBlcnJvcnNfanNfMSA9IHJlcXVpcmUoXCIuLi8uLi9lcnJvcnMuanNcIik7XG5jbGFzcyBDaXJjdWxhclJlZmVyZW5jZUVycm9yIGV4dGVuZHMgZXJyb3JzX2pzXzEuQmFzZUVycm9yIHtcbiAgICBjb25zdHJ1Y3Rvcih7IHR5cGUgfSkge1xuICAgICAgICBzdXBlcignQ2lyY3VsYXIgcmVmZXJlbmNlIGRldGVjdGVkLicsIHtcbiAgICAgICAgICAgIG1ldGFNZXNzYWdlczogW2BTdHJ1Y3QgXCIke3R5cGV9XCIgaXMgYSBjaXJjdWxhciByZWZlcmVuY2UuYF0sXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJuYW1lXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiAnQ2lyY3VsYXJSZWZlcmVuY2VFcnJvcidcbiAgICAgICAgfSk7XG4gICAgfVxufVxuZXhwb3J0cy5DaXJjdWxhclJlZmVyZW5jZUVycm9yID0gQ2lyY3VsYXJSZWZlcmVuY2VFcnJvcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN0cnVjdC5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJDaXJjdWxhclJlZmVyZW5jZUVycm9yIiwiZXJyb3JzX2pzXzEiLCJyZXF1aXJlIiwiQmFzZUVycm9yIiwiY29uc3RydWN0b3IiLCJ0eXBlIiwibWV0YU1lc3NhZ2VzIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ox/node_modules/abitype/dist/cjs/human-readable/errors/struct.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ox/node_modules/abitype/dist/cjs/human-readable/formatAbi.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/ox/node_modules/abitype/dist/cjs/human-readable/formatAbi.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.formatAbi = formatAbi;\nconst formatAbiItem_js_1 = __webpack_require__(/*! ./formatAbiItem.js */ \"(ssr)/./node_modules/ox/node_modules/abitype/dist/cjs/human-readable/formatAbiItem.js\");\nfunction formatAbi(abi) {\n    const signatures = [];\n    const length = abi.length;\n    for(let i = 0; i < length; i++){\n        const abiItem = abi[i];\n        const signature = (0, formatAbiItem_js_1.formatAbiItem)(abiItem);\n        signatures.push(signature);\n    }\n    return signatures;\n} //# sourceMappingURL=formatAbi.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb3gvbm9kZV9tb2R1bGVzL2FiaXR5cGUvZGlzdC9janMvaHVtYW4tcmVhZGFibGUvZm9ybWF0QWJpLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxpQkFBaUIsR0FBR0U7QUFDcEIsTUFBTUMscUJBQXFCQyxtQkFBT0EsQ0FBQyxpSEFBb0I7QUFDdkQsU0FBU0YsVUFBVUcsR0FBRztJQUNsQixNQUFNQyxhQUFhLEVBQUU7SUFDckIsTUFBTUMsU0FBU0YsSUFBSUUsTUFBTTtJQUN6QixJQUFLLElBQUlDLElBQUksR0FBR0EsSUFBSUQsUUFBUUMsSUFBSztRQUM3QixNQUFNQyxVQUFVSixHQUFHLENBQUNHLEVBQUU7UUFDdEIsTUFBTUUsWUFBWSxDQUFDLEdBQUdQLG1CQUFtQlEsYUFBYSxFQUFFRjtRQUN4REgsV0FBV00sSUFBSSxDQUFDRjtJQUNwQjtJQUNBLE9BQU9KO0FBQ1gsRUFDQSxxQ0FBcUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93c3Rvbi11aS8uL25vZGVfbW9kdWxlcy9veC9ub2RlX21vZHVsZXMvYWJpdHlwZS9kaXN0L2Nqcy9odW1hbi1yZWFkYWJsZS9mb3JtYXRBYmkuanM/NjMyYyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZm9ybWF0QWJpID0gZm9ybWF0QWJpO1xuY29uc3QgZm9ybWF0QWJpSXRlbV9qc18xID0gcmVxdWlyZShcIi4vZm9ybWF0QWJpSXRlbS5qc1wiKTtcbmZ1bmN0aW9uIGZvcm1hdEFiaShhYmkpIHtcbiAgICBjb25zdCBzaWduYXR1cmVzID0gW107XG4gICAgY29uc3QgbGVuZ3RoID0gYWJpLmxlbmd0aDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGFiaUl0ZW0gPSBhYmlbaV07XG4gICAgICAgIGNvbnN0IHNpZ25hdHVyZSA9ICgwLCBmb3JtYXRBYmlJdGVtX2pzXzEuZm9ybWF0QWJpSXRlbSkoYWJpSXRlbSk7XG4gICAgICAgIHNpZ25hdHVyZXMucHVzaChzaWduYXR1cmUpO1xuICAgIH1cbiAgICByZXR1cm4gc2lnbmF0dXJlcztcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZvcm1hdEFiaS5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJmb3JtYXRBYmkiLCJmb3JtYXRBYmlJdGVtX2pzXzEiLCJyZXF1aXJlIiwiYWJpIiwic2lnbmF0dXJlcyIsImxlbmd0aCIsImkiLCJhYmlJdGVtIiwic2lnbmF0dXJlIiwiZm9ybWF0QWJpSXRlbSIsInB1c2giXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ox/node_modules/abitype/dist/cjs/human-readable/formatAbi.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ox/node_modules/abitype/dist/cjs/human-readable/formatAbiItem.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/ox/node_modules/abitype/dist/cjs/human-readable/formatAbiItem.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.formatAbiItem = formatAbiItem;\nconst formatAbiParameters_js_1 = __webpack_require__(/*! ./formatAbiParameters.js */ \"(ssr)/./node_modules/ox/node_modules/abitype/dist/cjs/human-readable/formatAbiParameters.js\");\nfunction formatAbiItem(abiItem) {\n    if (abiItem.type === \"function\") return `function ${abiItem.name}(${(0, formatAbiParameters_js_1.formatAbiParameters)(abiItem.inputs)})${abiItem.stateMutability && abiItem.stateMutability !== \"nonpayable\" ? ` ${abiItem.stateMutability}` : \"\"}${abiItem.outputs?.length ? ` returns (${(0, formatAbiParameters_js_1.formatAbiParameters)(abiItem.outputs)})` : \"\"}`;\n    if (abiItem.type === \"event\") return `event ${abiItem.name}(${(0, formatAbiParameters_js_1.formatAbiParameters)(abiItem.inputs)})`;\n    if (abiItem.type === \"error\") return `error ${abiItem.name}(${(0, formatAbiParameters_js_1.formatAbiParameters)(abiItem.inputs)})`;\n    if (abiItem.type === \"constructor\") return `constructor(${(0, formatAbiParameters_js_1.formatAbiParameters)(abiItem.inputs)})${abiItem.stateMutability === \"payable\" ? \" payable\" : \"\"}`;\n    if (abiItem.type === \"fallback\") return `fallback() external${abiItem.stateMutability === \"payable\" ? \" payable\" : \"\"}`;\n    return \"receive() external payable\";\n} //# sourceMappingURL=formatAbiItem.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb3gvbm9kZV9tb2R1bGVzL2FiaXR5cGUvZGlzdC9janMvaHVtYW4tcmVhZGFibGUvZm9ybWF0QWJpSXRlbS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQscUJBQXFCLEdBQUdFO0FBQ3hCLE1BQU1DLDJCQUEyQkMsbUJBQU9BLENBQUMsNkhBQTBCO0FBQ25FLFNBQVNGLGNBQWNHLE9BQU87SUFDMUIsSUFBSUEsUUFBUUMsSUFBSSxLQUFLLFlBQ2pCLE9BQU8sQ0FBQyxTQUFTLEVBQUVELFFBQVFFLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHSix5QkFBeUJLLG1CQUFtQixFQUFFSCxRQUFRSSxNQUFNLEVBQUUsQ0FBQyxFQUFFSixRQUFRSyxlQUFlLElBQUlMLFFBQVFLLGVBQWUsS0FBSyxlQUN6SixDQUFDLENBQUMsRUFBRUwsUUFBUUssZUFBZSxDQUFDLENBQUMsR0FDN0IsR0FBRyxFQUFFTCxRQUFRTSxPQUFPLEVBQUVDLFNBQ3RCLENBQUMsVUFBVSxFQUFFLENBQUMsR0FBR1QseUJBQXlCSyxtQkFBbUIsRUFBRUgsUUFBUU0sT0FBTyxFQUFFLENBQUMsQ0FBQyxHQUNsRixHQUFHLENBQUM7SUFDZCxJQUFJTixRQUFRQyxJQUFJLEtBQUssU0FDakIsT0FBTyxDQUFDLE1BQU0sRUFBRUQsUUFBUUUsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUdKLHlCQUF5QkssbUJBQW1CLEVBQUVILFFBQVFJLE1BQU0sRUFBRSxDQUFDLENBQUM7SUFDeEcsSUFBSUosUUFBUUMsSUFBSSxLQUFLLFNBQ2pCLE9BQU8sQ0FBQyxNQUFNLEVBQUVELFFBQVFFLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHSix5QkFBeUJLLG1CQUFtQixFQUFFSCxRQUFRSSxNQUFNLEVBQUUsQ0FBQyxDQUFDO0lBQ3hHLElBQUlKLFFBQVFDLElBQUksS0FBSyxlQUNqQixPQUFPLENBQUMsWUFBWSxFQUFFLENBQUMsR0FBR0gseUJBQXlCSyxtQkFBbUIsRUFBRUgsUUFBUUksTUFBTSxFQUFFLENBQUMsRUFBRUosUUFBUUssZUFBZSxLQUFLLFlBQVksYUFBYSxHQUFHLENBQUM7SUFDeEosSUFBSUwsUUFBUUMsSUFBSSxLQUFLLFlBQ2pCLE9BQU8sQ0FBQyxtQkFBbUIsRUFBRUQsUUFBUUssZUFBZSxLQUFLLFlBQVksYUFBYSxHQUFHLENBQUM7SUFDMUYsT0FBTztBQUNYLEVBQ0EseUNBQXlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd3N0b24tdWkvLi9ub2RlX21vZHVsZXMvb3gvbm9kZV9tb2R1bGVzL2FiaXR5cGUvZGlzdC9janMvaHVtYW4tcmVhZGFibGUvZm9ybWF0QWJpSXRlbS5qcz9hYjgxIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5mb3JtYXRBYmlJdGVtID0gZm9ybWF0QWJpSXRlbTtcbmNvbnN0IGZvcm1hdEFiaVBhcmFtZXRlcnNfanNfMSA9IHJlcXVpcmUoXCIuL2Zvcm1hdEFiaVBhcmFtZXRlcnMuanNcIik7XG5mdW5jdGlvbiBmb3JtYXRBYmlJdGVtKGFiaUl0ZW0pIHtcbiAgICBpZiAoYWJpSXRlbS50eXBlID09PSAnZnVuY3Rpb24nKVxuICAgICAgICByZXR1cm4gYGZ1bmN0aW9uICR7YWJpSXRlbS5uYW1lfSgkeygwLCBmb3JtYXRBYmlQYXJhbWV0ZXJzX2pzXzEuZm9ybWF0QWJpUGFyYW1ldGVycykoYWJpSXRlbS5pbnB1dHMpfSkke2FiaUl0ZW0uc3RhdGVNdXRhYmlsaXR5ICYmIGFiaUl0ZW0uc3RhdGVNdXRhYmlsaXR5ICE9PSAnbm9ucGF5YWJsZSdcbiAgICAgICAgICAgID8gYCAke2FiaUl0ZW0uc3RhdGVNdXRhYmlsaXR5fWBcbiAgICAgICAgICAgIDogJyd9JHthYmlJdGVtLm91dHB1dHM/Lmxlbmd0aFxuICAgICAgICAgICAgPyBgIHJldHVybnMgKCR7KDAsIGZvcm1hdEFiaVBhcmFtZXRlcnNfanNfMS5mb3JtYXRBYmlQYXJhbWV0ZXJzKShhYmlJdGVtLm91dHB1dHMpfSlgXG4gICAgICAgICAgICA6ICcnfWA7XG4gICAgaWYgKGFiaUl0ZW0udHlwZSA9PT0gJ2V2ZW50JylcbiAgICAgICAgcmV0dXJuIGBldmVudCAke2FiaUl0ZW0ubmFtZX0oJHsoMCwgZm9ybWF0QWJpUGFyYW1ldGVyc19qc18xLmZvcm1hdEFiaVBhcmFtZXRlcnMpKGFiaUl0ZW0uaW5wdXRzKX0pYDtcbiAgICBpZiAoYWJpSXRlbS50eXBlID09PSAnZXJyb3InKVxuICAgICAgICByZXR1cm4gYGVycm9yICR7YWJpSXRlbS5uYW1lfSgkeygwLCBmb3JtYXRBYmlQYXJhbWV0ZXJzX2pzXzEuZm9ybWF0QWJpUGFyYW1ldGVycykoYWJpSXRlbS5pbnB1dHMpfSlgO1xuICAgIGlmIChhYmlJdGVtLnR5cGUgPT09ICdjb25zdHJ1Y3RvcicpXG4gICAgICAgIHJldHVybiBgY29uc3RydWN0b3IoJHsoMCwgZm9ybWF0QWJpUGFyYW1ldGVyc19qc18xLmZvcm1hdEFiaVBhcmFtZXRlcnMpKGFiaUl0ZW0uaW5wdXRzKX0pJHthYmlJdGVtLnN0YXRlTXV0YWJpbGl0eSA9PT0gJ3BheWFibGUnID8gJyBwYXlhYmxlJyA6ICcnfWA7XG4gICAgaWYgKGFiaUl0ZW0udHlwZSA9PT0gJ2ZhbGxiYWNrJylcbiAgICAgICAgcmV0dXJuIGBmYWxsYmFjaygpIGV4dGVybmFsJHthYmlJdGVtLnN0YXRlTXV0YWJpbGl0eSA9PT0gJ3BheWFibGUnID8gJyBwYXlhYmxlJyA6ICcnfWA7XG4gICAgcmV0dXJuICdyZWNlaXZlKCkgZXh0ZXJuYWwgcGF5YWJsZSc7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1mb3JtYXRBYmlJdGVtLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImZvcm1hdEFiaUl0ZW0iLCJmb3JtYXRBYmlQYXJhbWV0ZXJzX2pzXzEiLCJyZXF1aXJlIiwiYWJpSXRlbSIsInR5cGUiLCJuYW1lIiwiZm9ybWF0QWJpUGFyYW1ldGVycyIsImlucHV0cyIsInN0YXRlTXV0YWJpbGl0eSIsIm91dHB1dHMiLCJsZW5ndGgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ox/node_modules/abitype/dist/cjs/human-readable/formatAbiItem.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ox/node_modules/abitype/dist/cjs/human-readable/formatAbiParameter.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/ox/node_modules/abitype/dist/cjs/human-readable/formatAbiParameter.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.formatAbiParameter = formatAbiParameter;\nconst regex_js_1 = __webpack_require__(/*! ../regex.js */ \"(ssr)/./node_modules/ox/node_modules/abitype/dist/cjs/regex.js\");\nconst tupleRegex = /^tuple(?<array>(\\[(\\d*)\\])*)$/;\nfunction formatAbiParameter(abiParameter) {\n    let type = abiParameter.type;\n    if (tupleRegex.test(abiParameter.type) && \"components\" in abiParameter) {\n        type = \"(\";\n        const length = abiParameter.components.length;\n        for(let i = 0; i < length; i++){\n            const component = abiParameter.components[i];\n            type += formatAbiParameter(component);\n            if (i < length - 1) type += \", \";\n        }\n        const result = (0, regex_js_1.execTyped)(tupleRegex, abiParameter.type);\n        type += `)${result?.array ?? \"\"}`;\n        return formatAbiParameter({\n            ...abiParameter,\n            type\n        });\n    }\n    if (\"indexed\" in abiParameter && abiParameter.indexed) type = `${type} indexed`;\n    if (abiParameter.name) return `${type} ${abiParameter.name}`;\n    return type;\n} //# sourceMappingURL=formatAbiParameter.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb3gvbm9kZV9tb2R1bGVzL2FiaXR5cGUvZGlzdC9janMvaHVtYW4tcmVhZGFibGUvZm9ybWF0QWJpUGFyYW1ldGVyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCwwQkFBMEIsR0FBR0U7QUFDN0IsTUFBTUMsYUFBYUMsbUJBQU9BLENBQUMsbUZBQWE7QUFDeEMsTUFBTUMsYUFBYTtBQUNuQixTQUFTSCxtQkFBbUJJLFlBQVk7SUFDcEMsSUFBSUMsT0FBT0QsYUFBYUMsSUFBSTtJQUM1QixJQUFJRixXQUFXRyxJQUFJLENBQUNGLGFBQWFDLElBQUksS0FBSyxnQkFBZ0JELGNBQWM7UUFDcEVDLE9BQU87UUFDUCxNQUFNRSxTQUFTSCxhQUFhSSxVQUFVLENBQUNELE1BQU07UUFDN0MsSUFBSyxJQUFJRSxJQUFJLEdBQUdBLElBQUlGLFFBQVFFLElBQUs7WUFDN0IsTUFBTUMsWUFBWU4sYUFBYUksVUFBVSxDQUFDQyxFQUFFO1lBQzVDSixRQUFRTCxtQkFBbUJVO1lBQzNCLElBQUlELElBQUlGLFNBQVMsR0FDYkYsUUFBUTtRQUNoQjtRQUNBLE1BQU1NLFNBQVMsQ0FBQyxHQUFHVixXQUFXVyxTQUFTLEVBQUVULFlBQVlDLGFBQWFDLElBQUk7UUFDdEVBLFFBQVEsQ0FBQyxDQUFDLEVBQUVNLFFBQVFFLFNBQVMsR0FBRyxDQUFDO1FBQ2pDLE9BQU9iLG1CQUFtQjtZQUN0QixHQUFHSSxZQUFZO1lBQ2ZDO1FBQ0o7SUFDSjtJQUNBLElBQUksYUFBYUQsZ0JBQWdCQSxhQUFhVSxPQUFPLEVBQ2pEVCxPQUFPLENBQUMsRUFBRUEsS0FBSyxRQUFRLENBQUM7SUFDNUIsSUFBSUQsYUFBYVcsSUFBSSxFQUNqQixPQUFPLENBQUMsRUFBRVYsS0FBSyxDQUFDLEVBQUVELGFBQWFXLElBQUksQ0FBQyxDQUFDO0lBQ3pDLE9BQU9WO0FBQ1gsRUFDQSw4Q0FBOEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93c3Rvbi11aS8uL25vZGVfbW9kdWxlcy9veC9ub2RlX21vZHVsZXMvYWJpdHlwZS9kaXN0L2Nqcy9odW1hbi1yZWFkYWJsZS9mb3JtYXRBYmlQYXJhbWV0ZXIuanM/YzVhZiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZm9ybWF0QWJpUGFyYW1ldGVyID0gZm9ybWF0QWJpUGFyYW1ldGVyO1xuY29uc3QgcmVnZXhfanNfMSA9IHJlcXVpcmUoXCIuLi9yZWdleC5qc1wiKTtcbmNvbnN0IHR1cGxlUmVnZXggPSAvXnR1cGxlKD88YXJyYXk+KFxcWyhcXGQqKVxcXSkqKSQvO1xuZnVuY3Rpb24gZm9ybWF0QWJpUGFyYW1ldGVyKGFiaVBhcmFtZXRlcikge1xuICAgIGxldCB0eXBlID0gYWJpUGFyYW1ldGVyLnR5cGU7XG4gICAgaWYgKHR1cGxlUmVnZXgudGVzdChhYmlQYXJhbWV0ZXIudHlwZSkgJiYgJ2NvbXBvbmVudHMnIGluIGFiaVBhcmFtZXRlcikge1xuICAgICAgICB0eXBlID0gJygnO1xuICAgICAgICBjb25zdCBsZW5ndGggPSBhYmlQYXJhbWV0ZXIuY29tcG9uZW50cy5sZW5ndGg7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGNvbXBvbmVudCA9IGFiaVBhcmFtZXRlci5jb21wb25lbnRzW2ldO1xuICAgICAgICAgICAgdHlwZSArPSBmb3JtYXRBYmlQYXJhbWV0ZXIoY29tcG9uZW50KTtcbiAgICAgICAgICAgIGlmIChpIDwgbGVuZ3RoIC0gMSlcbiAgICAgICAgICAgICAgICB0eXBlICs9ICcsICc7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVzdWx0ID0gKDAsIHJlZ2V4X2pzXzEuZXhlY1R5cGVkKSh0dXBsZVJlZ2V4LCBhYmlQYXJhbWV0ZXIudHlwZSk7XG4gICAgICAgIHR5cGUgKz0gYCkke3Jlc3VsdD8uYXJyYXkgPz8gJyd9YDtcbiAgICAgICAgcmV0dXJuIGZvcm1hdEFiaVBhcmFtZXRlcih7XG4gICAgICAgICAgICAuLi5hYmlQYXJhbWV0ZXIsXG4gICAgICAgICAgICB0eXBlLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgaWYgKCdpbmRleGVkJyBpbiBhYmlQYXJhbWV0ZXIgJiYgYWJpUGFyYW1ldGVyLmluZGV4ZWQpXG4gICAgICAgIHR5cGUgPSBgJHt0eXBlfSBpbmRleGVkYDtcbiAgICBpZiAoYWJpUGFyYW1ldGVyLm5hbWUpXG4gICAgICAgIHJldHVybiBgJHt0eXBlfSAke2FiaVBhcmFtZXRlci5uYW1lfWA7XG4gICAgcmV0dXJuIHR5cGU7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1mb3JtYXRBYmlQYXJhbWV0ZXIuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZm9ybWF0QWJpUGFyYW1ldGVyIiwicmVnZXhfanNfMSIsInJlcXVpcmUiLCJ0dXBsZVJlZ2V4IiwiYWJpUGFyYW1ldGVyIiwidHlwZSIsInRlc3QiLCJsZW5ndGgiLCJjb21wb25lbnRzIiwiaSIsImNvbXBvbmVudCIsInJlc3VsdCIsImV4ZWNUeXBlZCIsImFycmF5IiwiaW5kZXhlZCIsIm5hbWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ox/node_modules/abitype/dist/cjs/human-readable/formatAbiParameter.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ox/node_modules/abitype/dist/cjs/human-readable/formatAbiParameters.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/ox/node_modules/abitype/dist/cjs/human-readable/formatAbiParameters.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.formatAbiParameters = formatAbiParameters;\nconst formatAbiParameter_js_1 = __webpack_require__(/*! ./formatAbiParameter.js */ \"(ssr)/./node_modules/ox/node_modules/abitype/dist/cjs/human-readable/formatAbiParameter.js\");\nfunction formatAbiParameters(abiParameters) {\n    let params = \"\";\n    const length = abiParameters.length;\n    for(let i = 0; i < length; i++){\n        const abiParameter = abiParameters[i];\n        params += (0, formatAbiParameter_js_1.formatAbiParameter)(abiParameter);\n        if (i !== length - 1) params += \", \";\n    }\n    return params;\n} //# sourceMappingURL=formatAbiParameters.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb3gvbm9kZV9tb2R1bGVzL2FiaXR5cGUvZGlzdC9janMvaHVtYW4tcmVhZGFibGUvZm9ybWF0QWJpUGFyYW1ldGVycy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsMkJBQTJCLEdBQUdFO0FBQzlCLE1BQU1DLDBCQUEwQkMsbUJBQU9BLENBQUMsMkhBQXlCO0FBQ2pFLFNBQVNGLG9CQUFvQkcsYUFBYTtJQUN0QyxJQUFJQyxTQUFTO0lBQ2IsTUFBTUMsU0FBU0YsY0FBY0UsTUFBTTtJQUNuQyxJQUFLLElBQUlDLElBQUksR0FBR0EsSUFBSUQsUUFBUUMsSUFBSztRQUM3QixNQUFNQyxlQUFlSixhQUFhLENBQUNHLEVBQUU7UUFDckNGLFVBQVUsQ0FBQyxHQUFHSCx3QkFBd0JPLGtCQUFrQixFQUFFRDtRQUMxRCxJQUFJRCxNQUFNRCxTQUFTLEdBQ2ZELFVBQVU7SUFDbEI7SUFDQSxPQUFPQTtBQUNYLEVBQ0EsK0NBQStDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd3N0b24tdWkvLi9ub2RlX21vZHVsZXMvb3gvbm9kZV9tb2R1bGVzL2FiaXR5cGUvZGlzdC9janMvaHVtYW4tcmVhZGFibGUvZm9ybWF0QWJpUGFyYW1ldGVycy5qcz82ZGU0Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5mb3JtYXRBYmlQYXJhbWV0ZXJzID0gZm9ybWF0QWJpUGFyYW1ldGVycztcbmNvbnN0IGZvcm1hdEFiaVBhcmFtZXRlcl9qc18xID0gcmVxdWlyZShcIi4vZm9ybWF0QWJpUGFyYW1ldGVyLmpzXCIpO1xuZnVuY3Rpb24gZm9ybWF0QWJpUGFyYW1ldGVycyhhYmlQYXJhbWV0ZXJzKSB7XG4gICAgbGV0IHBhcmFtcyA9ICcnO1xuICAgIGNvbnN0IGxlbmd0aCA9IGFiaVBhcmFtZXRlcnMubGVuZ3RoO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgYWJpUGFyYW1ldGVyID0gYWJpUGFyYW1ldGVyc1tpXTtcbiAgICAgICAgcGFyYW1zICs9ICgwLCBmb3JtYXRBYmlQYXJhbWV0ZXJfanNfMS5mb3JtYXRBYmlQYXJhbWV0ZXIpKGFiaVBhcmFtZXRlcik7XG4gICAgICAgIGlmIChpICE9PSBsZW5ndGggLSAxKVxuICAgICAgICAgICAgcGFyYW1zICs9ICcsICc7XG4gICAgfVxuICAgIHJldHVybiBwYXJhbXM7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1mb3JtYXRBYmlQYXJhbWV0ZXJzLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImZvcm1hdEFiaVBhcmFtZXRlcnMiLCJmb3JtYXRBYmlQYXJhbWV0ZXJfanNfMSIsInJlcXVpcmUiLCJhYmlQYXJhbWV0ZXJzIiwicGFyYW1zIiwibGVuZ3RoIiwiaSIsImFiaVBhcmFtZXRlciIsImZvcm1hdEFiaVBhcmFtZXRlciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ox/node_modules/abitype/dist/cjs/human-readable/formatAbiParameters.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ox/node_modules/abitype/dist/cjs/human-readable/parseAbi.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/ox/node_modules/abitype/dist/cjs/human-readable/parseAbi.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.parseAbi = parseAbi;\nconst signatures_js_1 = __webpack_require__(/*! ./runtime/signatures.js */ \"(ssr)/./node_modules/ox/node_modules/abitype/dist/cjs/human-readable/runtime/signatures.js\");\nconst structs_js_1 = __webpack_require__(/*! ./runtime/structs.js */ \"(ssr)/./node_modules/ox/node_modules/abitype/dist/cjs/human-readable/runtime/structs.js\");\nconst utils_js_1 = __webpack_require__(/*! ./runtime/utils.js */ \"(ssr)/./node_modules/ox/node_modules/abitype/dist/cjs/human-readable/runtime/utils.js\");\nfunction parseAbi(signatures) {\n    const structs = (0, structs_js_1.parseStructs)(signatures);\n    const abi = [];\n    const length = signatures.length;\n    for(let i = 0; i < length; i++){\n        const signature = signatures[i];\n        if ((0, signatures_js_1.isStructSignature)(signature)) continue;\n        abi.push((0, utils_js_1.parseSignature)(signature, structs));\n    }\n    return abi;\n} //# sourceMappingURL=parseAbi.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb3gvbm9kZV9tb2R1bGVzL2FiaXR5cGUvZGlzdC9janMvaHVtYW4tcmVhZGFibGUvcGFyc2VBYmkuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELGdCQUFnQixHQUFHRTtBQUNuQixNQUFNQyxrQkFBa0JDLG1CQUFPQSxDQUFDLDJIQUF5QjtBQUN6RCxNQUFNQyxlQUFlRCxtQkFBT0EsQ0FBQyxxSEFBc0I7QUFDbkQsTUFBTUUsYUFBYUYsbUJBQU9BLENBQUMsaUhBQW9CO0FBQy9DLFNBQVNGLFNBQVNLLFVBQVU7SUFDeEIsTUFBTUMsVUFBVSxDQUFDLEdBQUdILGFBQWFJLFlBQVksRUFBRUY7SUFDL0MsTUFBTUcsTUFBTSxFQUFFO0lBQ2QsTUFBTUMsU0FBU0osV0FBV0ksTUFBTTtJQUNoQyxJQUFLLElBQUlDLElBQUksR0FBR0EsSUFBSUQsUUFBUUMsSUFBSztRQUM3QixNQUFNQyxZQUFZTixVQUFVLENBQUNLLEVBQUU7UUFDL0IsSUFBSSxDQUFDLEdBQUdULGdCQUFnQlcsaUJBQWlCLEVBQUVELFlBQ3ZDO1FBQ0pILElBQUlLLElBQUksQ0FBQyxDQUFDLEdBQUdULFdBQVdVLGNBQWMsRUFBRUgsV0FBV0w7SUFDdkQ7SUFDQSxPQUFPRTtBQUNYLEVBQ0Esb0NBQW9DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd3N0b24tdWkvLi9ub2RlX21vZHVsZXMvb3gvbm9kZV9tb2R1bGVzL2FiaXR5cGUvZGlzdC9janMvaHVtYW4tcmVhZGFibGUvcGFyc2VBYmkuanM/ZWE0MSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucGFyc2VBYmkgPSBwYXJzZUFiaTtcbmNvbnN0IHNpZ25hdHVyZXNfanNfMSA9IHJlcXVpcmUoXCIuL3J1bnRpbWUvc2lnbmF0dXJlcy5qc1wiKTtcbmNvbnN0IHN0cnVjdHNfanNfMSA9IHJlcXVpcmUoXCIuL3J1bnRpbWUvc3RydWN0cy5qc1wiKTtcbmNvbnN0IHV0aWxzX2pzXzEgPSByZXF1aXJlKFwiLi9ydW50aW1lL3V0aWxzLmpzXCIpO1xuZnVuY3Rpb24gcGFyc2VBYmkoc2lnbmF0dXJlcykge1xuICAgIGNvbnN0IHN0cnVjdHMgPSAoMCwgc3RydWN0c19qc18xLnBhcnNlU3RydWN0cykoc2lnbmF0dXJlcyk7XG4gICAgY29uc3QgYWJpID0gW107XG4gICAgY29uc3QgbGVuZ3RoID0gc2lnbmF0dXJlcy5sZW5ndGg7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBzaWduYXR1cmUgPSBzaWduYXR1cmVzW2ldO1xuICAgICAgICBpZiAoKDAsIHNpZ25hdHVyZXNfanNfMS5pc1N0cnVjdFNpZ25hdHVyZSkoc2lnbmF0dXJlKSlcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBhYmkucHVzaCgoMCwgdXRpbHNfanNfMS5wYXJzZVNpZ25hdHVyZSkoc2lnbmF0dXJlLCBzdHJ1Y3RzKSk7XG4gICAgfVxuICAgIHJldHVybiBhYmk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYXJzZUFiaS5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJwYXJzZUFiaSIsInNpZ25hdHVyZXNfanNfMSIsInJlcXVpcmUiLCJzdHJ1Y3RzX2pzXzEiLCJ1dGlsc19qc18xIiwic2lnbmF0dXJlcyIsInN0cnVjdHMiLCJwYXJzZVN0cnVjdHMiLCJhYmkiLCJsZW5ndGgiLCJpIiwic2lnbmF0dXJlIiwiaXNTdHJ1Y3RTaWduYXR1cmUiLCJwdXNoIiwicGFyc2VTaWduYXR1cmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ox/node_modules/abitype/dist/cjs/human-readable/parseAbi.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ox/node_modules/abitype/dist/cjs/human-readable/parseAbiItem.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/ox/node_modules/abitype/dist/cjs/human-readable/parseAbiItem.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.parseAbiItem = parseAbiItem;\nconst abiItem_js_1 = __webpack_require__(/*! ./errors/abiItem.js */ \"(ssr)/./node_modules/ox/node_modules/abitype/dist/cjs/human-readable/errors/abiItem.js\");\nconst signatures_js_1 = __webpack_require__(/*! ./runtime/signatures.js */ \"(ssr)/./node_modules/ox/node_modules/abitype/dist/cjs/human-readable/runtime/signatures.js\");\nconst structs_js_1 = __webpack_require__(/*! ./runtime/structs.js */ \"(ssr)/./node_modules/ox/node_modules/abitype/dist/cjs/human-readable/runtime/structs.js\");\nconst utils_js_1 = __webpack_require__(/*! ./runtime/utils.js */ \"(ssr)/./node_modules/ox/node_modules/abitype/dist/cjs/human-readable/runtime/utils.js\");\nfunction parseAbiItem(signature) {\n    let abiItem;\n    if (typeof signature === \"string\") abiItem = (0, utils_js_1.parseSignature)(signature);\n    else {\n        const structs = (0, structs_js_1.parseStructs)(signature);\n        const length = signature.length;\n        for(let i = 0; i < length; i++){\n            const signature_ = signature[i];\n            if ((0, signatures_js_1.isStructSignature)(signature_)) continue;\n            abiItem = (0, utils_js_1.parseSignature)(signature_, structs);\n            break;\n        }\n    }\n    if (!abiItem) throw new abiItem_js_1.InvalidAbiItemError({\n        signature\n    });\n    return abiItem;\n} //# sourceMappingURL=parseAbiItem.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb3gvbm9kZV9tb2R1bGVzL2FiaXR5cGUvZGlzdC9janMvaHVtYW4tcmVhZGFibGUvcGFyc2VBYmlJdGVtLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxvQkFBb0IsR0FBR0U7QUFDdkIsTUFBTUMsZUFBZUMsbUJBQU9BLENBQUMsbUhBQXFCO0FBQ2xELE1BQU1DLGtCQUFrQkQsbUJBQU9BLENBQUMsMkhBQXlCO0FBQ3pELE1BQU1FLGVBQWVGLG1CQUFPQSxDQUFDLHFIQUFzQjtBQUNuRCxNQUFNRyxhQUFhSCxtQkFBT0EsQ0FBQyxpSEFBb0I7QUFDL0MsU0FBU0YsYUFBYU0sU0FBUztJQUMzQixJQUFJQztJQUNKLElBQUksT0FBT0QsY0FBYyxVQUNyQkMsVUFBVSxDQUFDLEdBQUdGLFdBQVdHLGNBQWMsRUFBRUY7U0FDeEM7UUFDRCxNQUFNRyxVQUFVLENBQUMsR0FBR0wsYUFBYU0sWUFBWSxFQUFFSjtRQUMvQyxNQUFNSyxTQUFTTCxVQUFVSyxNQUFNO1FBQy9CLElBQUssSUFBSUMsSUFBSSxHQUFHQSxJQUFJRCxRQUFRQyxJQUFLO1lBQzdCLE1BQU1DLGFBQWFQLFNBQVMsQ0FBQ00sRUFBRTtZQUMvQixJQUFJLENBQUMsR0FBR1QsZ0JBQWdCVyxpQkFBaUIsRUFBRUQsYUFDdkM7WUFDSk4sVUFBVSxDQUFDLEdBQUdGLFdBQVdHLGNBQWMsRUFBRUssWUFBWUo7WUFDckQ7UUFDSjtJQUNKO0lBQ0EsSUFBSSxDQUFDRixTQUNELE1BQU0sSUFBSU4sYUFBYWMsbUJBQW1CLENBQUM7UUFBRVQ7SUFBVTtJQUMzRCxPQUFPQztBQUNYLEVBQ0Esd0NBQXdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd3N0b24tdWkvLi9ub2RlX21vZHVsZXMvb3gvbm9kZV9tb2R1bGVzL2FiaXR5cGUvZGlzdC9janMvaHVtYW4tcmVhZGFibGUvcGFyc2VBYmlJdGVtLmpzPzlmM2MiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnBhcnNlQWJpSXRlbSA9IHBhcnNlQWJpSXRlbTtcbmNvbnN0IGFiaUl0ZW1fanNfMSA9IHJlcXVpcmUoXCIuL2Vycm9ycy9hYmlJdGVtLmpzXCIpO1xuY29uc3Qgc2lnbmF0dXJlc19qc18xID0gcmVxdWlyZShcIi4vcnVudGltZS9zaWduYXR1cmVzLmpzXCIpO1xuY29uc3Qgc3RydWN0c19qc18xID0gcmVxdWlyZShcIi4vcnVudGltZS9zdHJ1Y3RzLmpzXCIpO1xuY29uc3QgdXRpbHNfanNfMSA9IHJlcXVpcmUoXCIuL3J1bnRpbWUvdXRpbHMuanNcIik7XG5mdW5jdGlvbiBwYXJzZUFiaUl0ZW0oc2lnbmF0dXJlKSB7XG4gICAgbGV0IGFiaUl0ZW07XG4gICAgaWYgKHR5cGVvZiBzaWduYXR1cmUgPT09ICdzdHJpbmcnKVxuICAgICAgICBhYmlJdGVtID0gKDAsIHV0aWxzX2pzXzEucGFyc2VTaWduYXR1cmUpKHNpZ25hdHVyZSk7XG4gICAgZWxzZSB7XG4gICAgICAgIGNvbnN0IHN0cnVjdHMgPSAoMCwgc3RydWN0c19qc18xLnBhcnNlU3RydWN0cykoc2lnbmF0dXJlKTtcbiAgICAgICAgY29uc3QgbGVuZ3RoID0gc2lnbmF0dXJlLmxlbmd0aDtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3Qgc2lnbmF0dXJlXyA9IHNpZ25hdHVyZVtpXTtcbiAgICAgICAgICAgIGlmICgoMCwgc2lnbmF0dXJlc19qc18xLmlzU3RydWN0U2lnbmF0dXJlKShzaWduYXR1cmVfKSlcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIGFiaUl0ZW0gPSAoMCwgdXRpbHNfanNfMS5wYXJzZVNpZ25hdHVyZSkoc2lnbmF0dXJlXywgc3RydWN0cyk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoIWFiaUl0ZW0pXG4gICAgICAgIHRocm93IG5ldyBhYmlJdGVtX2pzXzEuSW52YWxpZEFiaUl0ZW1FcnJvcih7IHNpZ25hdHVyZSB9KTtcbiAgICByZXR1cm4gYWJpSXRlbTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhcnNlQWJpSXRlbS5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJwYXJzZUFiaUl0ZW0iLCJhYmlJdGVtX2pzXzEiLCJyZXF1aXJlIiwic2lnbmF0dXJlc19qc18xIiwic3RydWN0c19qc18xIiwidXRpbHNfanNfMSIsInNpZ25hdHVyZSIsImFiaUl0ZW0iLCJwYXJzZVNpZ25hdHVyZSIsInN0cnVjdHMiLCJwYXJzZVN0cnVjdHMiLCJsZW5ndGgiLCJpIiwic2lnbmF0dXJlXyIsImlzU3RydWN0U2lnbmF0dXJlIiwiSW52YWxpZEFiaUl0ZW1FcnJvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ox/node_modules/abitype/dist/cjs/human-readable/parseAbiItem.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ox/node_modules/abitype/dist/cjs/human-readable/parseAbiParameter.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/ox/node_modules/abitype/dist/cjs/human-readable/parseAbiParameter.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.parseAbiParameter = parseAbiParameter;\nconst abiParameter_js_1 = __webpack_require__(/*! ./errors/abiParameter.js */ \"(ssr)/./node_modules/ox/node_modules/abitype/dist/cjs/human-readable/errors/abiParameter.js\");\nconst signatures_js_1 = __webpack_require__(/*! ./runtime/signatures.js */ \"(ssr)/./node_modules/ox/node_modules/abitype/dist/cjs/human-readable/runtime/signatures.js\");\nconst structs_js_1 = __webpack_require__(/*! ./runtime/structs.js */ \"(ssr)/./node_modules/ox/node_modules/abitype/dist/cjs/human-readable/runtime/structs.js\");\nconst utils_js_1 = __webpack_require__(/*! ./runtime/utils.js */ \"(ssr)/./node_modules/ox/node_modules/abitype/dist/cjs/human-readable/runtime/utils.js\");\nfunction parseAbiParameter(param) {\n    let abiParameter;\n    if (typeof param === \"string\") abiParameter = (0, utils_js_1.parseAbiParameter)(param, {\n        modifiers: signatures_js_1.modifiers\n    });\n    else {\n        const structs = (0, structs_js_1.parseStructs)(param);\n        const length = param.length;\n        for(let i = 0; i < length; i++){\n            const signature = param[i];\n            if ((0, signatures_js_1.isStructSignature)(signature)) continue;\n            abiParameter = (0, utils_js_1.parseAbiParameter)(signature, {\n                modifiers: signatures_js_1.modifiers,\n                structs\n            });\n            break;\n        }\n    }\n    if (!abiParameter) throw new abiParameter_js_1.InvalidAbiParameterError({\n        param\n    });\n    return abiParameter;\n} //# sourceMappingURL=parseAbiParameter.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb3gvbm9kZV9tb2R1bGVzL2FiaXR5cGUvZGlzdC9janMvaHVtYW4tcmVhZGFibGUvcGFyc2VBYmlQYXJhbWV0ZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELHlCQUF5QixHQUFHRTtBQUM1QixNQUFNQyxvQkFBb0JDLG1CQUFPQSxDQUFDLDZIQUEwQjtBQUM1RCxNQUFNQyxrQkFBa0JELG1CQUFPQSxDQUFDLDJIQUF5QjtBQUN6RCxNQUFNRSxlQUFlRixtQkFBT0EsQ0FBQyxxSEFBc0I7QUFDbkQsTUFBTUcsYUFBYUgsbUJBQU9BLENBQUMsaUhBQW9CO0FBQy9DLFNBQVNGLGtCQUFrQk0sS0FBSztJQUM1QixJQUFJQztJQUNKLElBQUksT0FBT0QsVUFBVSxVQUNqQkMsZUFBZSxDQUFDLEdBQUdGLFdBQVdMLGlCQUFpQixFQUFFTSxPQUFPO1FBQ3BERSxXQUFXTCxnQkFBZ0JLLFNBQVM7SUFDeEM7U0FDQztRQUNELE1BQU1DLFVBQVUsQ0FBQyxHQUFHTCxhQUFhTSxZQUFZLEVBQUVKO1FBQy9DLE1BQU1LLFNBQVNMLE1BQU1LLE1BQU07UUFDM0IsSUFBSyxJQUFJQyxJQUFJLEdBQUdBLElBQUlELFFBQVFDLElBQUs7WUFDN0IsTUFBTUMsWUFBWVAsS0FBSyxDQUFDTSxFQUFFO1lBQzFCLElBQUksQ0FBQyxHQUFHVCxnQkFBZ0JXLGlCQUFpQixFQUFFRCxZQUN2QztZQUNKTixlQUFlLENBQUMsR0FBR0YsV0FBV0wsaUJBQWlCLEVBQUVhLFdBQVc7Z0JBQUVMLFdBQVdMLGdCQUFnQkssU0FBUztnQkFBRUM7WUFBUTtZQUM1RztRQUNKO0lBQ0o7SUFDQSxJQUFJLENBQUNGLGNBQ0QsTUFBTSxJQUFJTixrQkFBa0JjLHdCQUF3QixDQUFDO1FBQUVUO0lBQU07SUFDakUsT0FBT0M7QUFDWCxFQUNBLDZDQUE2QyIsInNvdXJjZXMiOlsid2VicGFjazovL3dzdG9uLXVpLy4vbm9kZV9tb2R1bGVzL294L25vZGVfbW9kdWxlcy9hYml0eXBlL2Rpc3QvY2pzL2h1bWFuLXJlYWRhYmxlL3BhcnNlQWJpUGFyYW1ldGVyLmpzP2Y2ZWYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnBhcnNlQWJpUGFyYW1ldGVyID0gcGFyc2VBYmlQYXJhbWV0ZXI7XG5jb25zdCBhYmlQYXJhbWV0ZXJfanNfMSA9IHJlcXVpcmUoXCIuL2Vycm9ycy9hYmlQYXJhbWV0ZXIuanNcIik7XG5jb25zdCBzaWduYXR1cmVzX2pzXzEgPSByZXF1aXJlKFwiLi9ydW50aW1lL3NpZ25hdHVyZXMuanNcIik7XG5jb25zdCBzdHJ1Y3RzX2pzXzEgPSByZXF1aXJlKFwiLi9ydW50aW1lL3N0cnVjdHMuanNcIik7XG5jb25zdCB1dGlsc19qc18xID0gcmVxdWlyZShcIi4vcnVudGltZS91dGlscy5qc1wiKTtcbmZ1bmN0aW9uIHBhcnNlQWJpUGFyYW1ldGVyKHBhcmFtKSB7XG4gICAgbGV0IGFiaVBhcmFtZXRlcjtcbiAgICBpZiAodHlwZW9mIHBhcmFtID09PSAnc3RyaW5nJylcbiAgICAgICAgYWJpUGFyYW1ldGVyID0gKDAsIHV0aWxzX2pzXzEucGFyc2VBYmlQYXJhbWV0ZXIpKHBhcmFtLCB7XG4gICAgICAgICAgICBtb2RpZmllcnM6IHNpZ25hdHVyZXNfanNfMS5tb2RpZmllcnMsXG4gICAgICAgIH0pO1xuICAgIGVsc2Uge1xuICAgICAgICBjb25zdCBzdHJ1Y3RzID0gKDAsIHN0cnVjdHNfanNfMS5wYXJzZVN0cnVjdHMpKHBhcmFtKTtcbiAgICAgICAgY29uc3QgbGVuZ3RoID0gcGFyYW0ubGVuZ3RoO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBzaWduYXR1cmUgPSBwYXJhbVtpXTtcbiAgICAgICAgICAgIGlmICgoMCwgc2lnbmF0dXJlc19qc18xLmlzU3RydWN0U2lnbmF0dXJlKShzaWduYXR1cmUpKVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgYWJpUGFyYW1ldGVyID0gKDAsIHV0aWxzX2pzXzEucGFyc2VBYmlQYXJhbWV0ZXIpKHNpZ25hdHVyZSwgeyBtb2RpZmllcnM6IHNpZ25hdHVyZXNfanNfMS5tb2RpZmllcnMsIHN0cnVjdHMgfSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoIWFiaVBhcmFtZXRlcilcbiAgICAgICAgdGhyb3cgbmV3IGFiaVBhcmFtZXRlcl9qc18xLkludmFsaWRBYmlQYXJhbWV0ZXJFcnJvcih7IHBhcmFtIH0pO1xuICAgIHJldHVybiBhYmlQYXJhbWV0ZXI7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYXJzZUFiaVBhcmFtZXRlci5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJwYXJzZUFiaVBhcmFtZXRlciIsImFiaVBhcmFtZXRlcl9qc18xIiwicmVxdWlyZSIsInNpZ25hdHVyZXNfanNfMSIsInN0cnVjdHNfanNfMSIsInV0aWxzX2pzXzEiLCJwYXJhbSIsImFiaVBhcmFtZXRlciIsIm1vZGlmaWVycyIsInN0cnVjdHMiLCJwYXJzZVN0cnVjdHMiLCJsZW5ndGgiLCJpIiwic2lnbmF0dXJlIiwiaXNTdHJ1Y3RTaWduYXR1cmUiLCJJbnZhbGlkQWJpUGFyYW1ldGVyRXJyb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ox/node_modules/abitype/dist/cjs/human-readable/parseAbiParameter.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ox/node_modules/abitype/dist/cjs/human-readable/parseAbiParameters.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/ox/node_modules/abitype/dist/cjs/human-readable/parseAbiParameters.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.parseAbiParameters = parseAbiParameters;\nconst abiParameter_js_1 = __webpack_require__(/*! ./errors/abiParameter.js */ \"(ssr)/./node_modules/ox/node_modules/abitype/dist/cjs/human-readable/errors/abiParameter.js\");\nconst signatures_js_1 = __webpack_require__(/*! ./runtime/signatures.js */ \"(ssr)/./node_modules/ox/node_modules/abitype/dist/cjs/human-readable/runtime/signatures.js\");\nconst structs_js_1 = __webpack_require__(/*! ./runtime/structs.js */ \"(ssr)/./node_modules/ox/node_modules/abitype/dist/cjs/human-readable/runtime/structs.js\");\nconst utils_js_1 = __webpack_require__(/*! ./runtime/utils.js */ \"(ssr)/./node_modules/ox/node_modules/abitype/dist/cjs/human-readable/runtime/utils.js\");\nconst utils_js_2 = __webpack_require__(/*! ./runtime/utils.js */ \"(ssr)/./node_modules/ox/node_modules/abitype/dist/cjs/human-readable/runtime/utils.js\");\nfunction parseAbiParameters(params) {\n    const abiParameters = [];\n    if (typeof params === \"string\") {\n        const parameters = (0, utils_js_1.splitParameters)(params);\n        const length = parameters.length;\n        for(let i = 0; i < length; i++){\n            abiParameters.push((0, utils_js_2.parseAbiParameter)(parameters[i], {\n                modifiers: signatures_js_1.modifiers\n            }));\n        }\n    } else {\n        const structs = (0, structs_js_1.parseStructs)(params);\n        const length = params.length;\n        for(let i = 0; i < length; i++){\n            const signature = params[i];\n            if ((0, signatures_js_1.isStructSignature)(signature)) continue;\n            const parameters = (0, utils_js_1.splitParameters)(signature);\n            const length = parameters.length;\n            for(let k = 0; k < length; k++){\n                abiParameters.push((0, utils_js_2.parseAbiParameter)(parameters[k], {\n                    modifiers: signatures_js_1.modifiers,\n                    structs\n                }));\n            }\n        }\n    }\n    if (abiParameters.length === 0) throw new abiParameter_js_1.InvalidAbiParametersError({\n        params\n    });\n    return abiParameters;\n} //# sourceMappingURL=parseAbiParameters.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb3gvbm9kZV9tb2R1bGVzL2FiaXR5cGUvZGlzdC9janMvaHVtYW4tcmVhZGFibGUvcGFyc2VBYmlQYXJhbWV0ZXJzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCwwQkFBMEIsR0FBR0U7QUFDN0IsTUFBTUMsb0JBQW9CQyxtQkFBT0EsQ0FBQyw2SEFBMEI7QUFDNUQsTUFBTUMsa0JBQWtCRCxtQkFBT0EsQ0FBQywySEFBeUI7QUFDekQsTUFBTUUsZUFBZUYsbUJBQU9BLENBQUMscUhBQXNCO0FBQ25ELE1BQU1HLGFBQWFILG1CQUFPQSxDQUFDLGlIQUFvQjtBQUMvQyxNQUFNSSxhQUFhSixtQkFBT0EsQ0FBQyxpSEFBb0I7QUFDL0MsU0FBU0YsbUJBQW1CTyxNQUFNO0lBQzlCLE1BQU1DLGdCQUFnQixFQUFFO0lBQ3hCLElBQUksT0FBT0QsV0FBVyxVQUFVO1FBQzVCLE1BQU1FLGFBQWEsQ0FBQyxHQUFHSixXQUFXSyxlQUFlLEVBQUVIO1FBQ25ELE1BQU1JLFNBQVNGLFdBQVdFLE1BQU07UUFDaEMsSUFBSyxJQUFJQyxJQUFJLEdBQUdBLElBQUlELFFBQVFDLElBQUs7WUFDN0JKLGNBQWNLLElBQUksQ0FBQyxDQUFDLEdBQUdQLFdBQVdRLGlCQUFpQixFQUFFTCxVQUFVLENBQUNHLEVBQUUsRUFBRTtnQkFBRUcsV0FBV1osZ0JBQWdCWSxTQUFTO1lBQUM7UUFDL0c7SUFDSixPQUNLO1FBQ0QsTUFBTUMsVUFBVSxDQUFDLEdBQUdaLGFBQWFhLFlBQVksRUFBRVY7UUFDL0MsTUFBTUksU0FBU0osT0FBT0ksTUFBTTtRQUM1QixJQUFLLElBQUlDLElBQUksR0FBR0EsSUFBSUQsUUFBUUMsSUFBSztZQUM3QixNQUFNTSxZQUFZWCxNQUFNLENBQUNLLEVBQUU7WUFDM0IsSUFBSSxDQUFDLEdBQUdULGdCQUFnQmdCLGlCQUFpQixFQUFFRCxZQUN2QztZQUNKLE1BQU1ULGFBQWEsQ0FBQyxHQUFHSixXQUFXSyxlQUFlLEVBQUVRO1lBQ25ELE1BQU1QLFNBQVNGLFdBQVdFLE1BQU07WUFDaEMsSUFBSyxJQUFJUyxJQUFJLEdBQUdBLElBQUlULFFBQVFTLElBQUs7Z0JBQzdCWixjQUFjSyxJQUFJLENBQUMsQ0FBQyxHQUFHUCxXQUFXUSxpQkFBaUIsRUFBRUwsVUFBVSxDQUFDVyxFQUFFLEVBQUU7b0JBQUVMLFdBQVdaLGdCQUFnQlksU0FBUztvQkFBRUM7Z0JBQVE7WUFDeEg7UUFDSjtJQUNKO0lBQ0EsSUFBSVIsY0FBY0csTUFBTSxLQUFLLEdBQ3pCLE1BQU0sSUFBSVYsa0JBQWtCb0IseUJBQXlCLENBQUM7UUFBRWQ7SUFBTztJQUNuRSxPQUFPQztBQUNYLEVBQ0EsOENBQThDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd3N0b24tdWkvLi9ub2RlX21vZHVsZXMvb3gvbm9kZV9tb2R1bGVzL2FiaXR5cGUvZGlzdC9janMvaHVtYW4tcmVhZGFibGUvcGFyc2VBYmlQYXJhbWV0ZXJzLmpzP2Q0NTIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnBhcnNlQWJpUGFyYW1ldGVycyA9IHBhcnNlQWJpUGFyYW1ldGVycztcbmNvbnN0IGFiaVBhcmFtZXRlcl9qc18xID0gcmVxdWlyZShcIi4vZXJyb3JzL2FiaVBhcmFtZXRlci5qc1wiKTtcbmNvbnN0IHNpZ25hdHVyZXNfanNfMSA9IHJlcXVpcmUoXCIuL3J1bnRpbWUvc2lnbmF0dXJlcy5qc1wiKTtcbmNvbnN0IHN0cnVjdHNfanNfMSA9IHJlcXVpcmUoXCIuL3J1bnRpbWUvc3RydWN0cy5qc1wiKTtcbmNvbnN0IHV0aWxzX2pzXzEgPSByZXF1aXJlKFwiLi9ydW50aW1lL3V0aWxzLmpzXCIpO1xuY29uc3QgdXRpbHNfanNfMiA9IHJlcXVpcmUoXCIuL3J1bnRpbWUvdXRpbHMuanNcIik7XG5mdW5jdGlvbiBwYXJzZUFiaVBhcmFtZXRlcnMocGFyYW1zKSB7XG4gICAgY29uc3QgYWJpUGFyYW1ldGVycyA9IFtdO1xuICAgIGlmICh0eXBlb2YgcGFyYW1zID09PSAnc3RyaW5nJykge1xuICAgICAgICBjb25zdCBwYXJhbWV0ZXJzID0gKDAsIHV0aWxzX2pzXzEuc3BsaXRQYXJhbWV0ZXJzKShwYXJhbXMpO1xuICAgICAgICBjb25zdCBsZW5ndGggPSBwYXJhbWV0ZXJzLmxlbmd0aDtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYWJpUGFyYW1ldGVycy5wdXNoKCgwLCB1dGlsc19qc18yLnBhcnNlQWJpUGFyYW1ldGVyKShwYXJhbWV0ZXJzW2ldLCB7IG1vZGlmaWVyczogc2lnbmF0dXJlc19qc18xLm1vZGlmaWVycyB9KSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNvbnN0IHN0cnVjdHMgPSAoMCwgc3RydWN0c19qc18xLnBhcnNlU3RydWN0cykocGFyYW1zKTtcbiAgICAgICAgY29uc3QgbGVuZ3RoID0gcGFyYW1zLmxlbmd0aDtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3Qgc2lnbmF0dXJlID0gcGFyYW1zW2ldO1xuICAgICAgICAgICAgaWYgKCgwLCBzaWduYXR1cmVzX2pzXzEuaXNTdHJ1Y3RTaWduYXR1cmUpKHNpZ25hdHVyZSkpXG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICBjb25zdCBwYXJhbWV0ZXJzID0gKDAsIHV0aWxzX2pzXzEuc3BsaXRQYXJhbWV0ZXJzKShzaWduYXR1cmUpO1xuICAgICAgICAgICAgY29uc3QgbGVuZ3RoID0gcGFyYW1ldGVycy5sZW5ndGg7XG4gICAgICAgICAgICBmb3IgKGxldCBrID0gMDsgayA8IGxlbmd0aDsgaysrKSB7XG4gICAgICAgICAgICAgICAgYWJpUGFyYW1ldGVycy5wdXNoKCgwLCB1dGlsc19qc18yLnBhcnNlQWJpUGFyYW1ldGVyKShwYXJhbWV0ZXJzW2tdLCB7IG1vZGlmaWVyczogc2lnbmF0dXJlc19qc18xLm1vZGlmaWVycywgc3RydWN0cyB9KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKGFiaVBhcmFtZXRlcnMubGVuZ3RoID09PSAwKVxuICAgICAgICB0aHJvdyBuZXcgYWJpUGFyYW1ldGVyX2pzXzEuSW52YWxpZEFiaVBhcmFtZXRlcnNFcnJvcih7IHBhcmFtcyB9KTtcbiAgICByZXR1cm4gYWJpUGFyYW1ldGVycztcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhcnNlQWJpUGFyYW1ldGVycy5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJwYXJzZUFiaVBhcmFtZXRlcnMiLCJhYmlQYXJhbWV0ZXJfanNfMSIsInJlcXVpcmUiLCJzaWduYXR1cmVzX2pzXzEiLCJzdHJ1Y3RzX2pzXzEiLCJ1dGlsc19qc18xIiwidXRpbHNfanNfMiIsInBhcmFtcyIsImFiaVBhcmFtZXRlcnMiLCJwYXJhbWV0ZXJzIiwic3BsaXRQYXJhbWV0ZXJzIiwibGVuZ3RoIiwiaSIsInB1c2giLCJwYXJzZUFiaVBhcmFtZXRlciIsIm1vZGlmaWVycyIsInN0cnVjdHMiLCJwYXJzZVN0cnVjdHMiLCJzaWduYXR1cmUiLCJpc1N0cnVjdFNpZ25hdHVyZSIsImsiLCJJbnZhbGlkQWJpUGFyYW1ldGVyc0Vycm9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ox/node_modules/abitype/dist/cjs/human-readable/parseAbiParameters.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ox/node_modules/abitype/dist/cjs/human-readable/runtime/cache.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/ox/node_modules/abitype/dist/cjs/human-readable/runtime/cache.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.parameterCache = void 0;\nexports.getParameterCacheKey = getParameterCacheKey;\nfunction getParameterCacheKey(param, type, structs) {\n    let structKey = \"\";\n    if (structs) for (const struct of Object.entries(structs)){\n        if (!struct) continue;\n        let propertyKey = \"\";\n        for (const property of struct[1]){\n            propertyKey += `[${property.type}${property.name ? `:${property.name}` : \"\"}]`;\n        }\n        structKey += `(${struct[0]}{${propertyKey}})`;\n    }\n    if (type) return `${type}:${param}${structKey}`;\n    return param;\n}\nexports.parameterCache = new Map([\n    [\n        \"address\",\n        {\n            type: \"address\"\n        }\n    ],\n    [\n        \"bool\",\n        {\n            type: \"bool\"\n        }\n    ],\n    [\n        \"bytes\",\n        {\n            type: \"bytes\"\n        }\n    ],\n    [\n        \"bytes32\",\n        {\n            type: \"bytes32\"\n        }\n    ],\n    [\n        \"int\",\n        {\n            type: \"int256\"\n        }\n    ],\n    [\n        \"int256\",\n        {\n            type: \"int256\"\n        }\n    ],\n    [\n        \"string\",\n        {\n            type: \"string\"\n        }\n    ],\n    [\n        \"uint\",\n        {\n            type: \"uint256\"\n        }\n    ],\n    [\n        \"uint8\",\n        {\n            type: \"uint8\"\n        }\n    ],\n    [\n        \"uint16\",\n        {\n            type: \"uint16\"\n        }\n    ],\n    [\n        \"uint24\",\n        {\n            type: \"uint24\"\n        }\n    ],\n    [\n        \"uint32\",\n        {\n            type: \"uint32\"\n        }\n    ],\n    [\n        \"uint64\",\n        {\n            type: \"uint64\"\n        }\n    ],\n    [\n        \"uint96\",\n        {\n            type: \"uint96\"\n        }\n    ],\n    [\n        \"uint112\",\n        {\n            type: \"uint112\"\n        }\n    ],\n    [\n        \"uint160\",\n        {\n            type: \"uint160\"\n        }\n    ],\n    [\n        \"uint192\",\n        {\n            type: \"uint192\"\n        }\n    ],\n    [\n        \"uint256\",\n        {\n            type: \"uint256\"\n        }\n    ],\n    [\n        \"address owner\",\n        {\n            type: \"address\",\n            name: \"owner\"\n        }\n    ],\n    [\n        \"address to\",\n        {\n            type: \"address\",\n            name: \"to\"\n        }\n    ],\n    [\n        \"bool approved\",\n        {\n            type: \"bool\",\n            name: \"approved\"\n        }\n    ],\n    [\n        \"bytes _data\",\n        {\n            type: \"bytes\",\n            name: \"_data\"\n        }\n    ],\n    [\n        \"bytes data\",\n        {\n            type: \"bytes\",\n            name: \"data\"\n        }\n    ],\n    [\n        \"bytes signature\",\n        {\n            type: \"bytes\",\n            name: \"signature\"\n        }\n    ],\n    [\n        \"bytes32 hash\",\n        {\n            type: \"bytes32\",\n            name: \"hash\"\n        }\n    ],\n    [\n        \"bytes32 r\",\n        {\n            type: \"bytes32\",\n            name: \"r\"\n        }\n    ],\n    [\n        \"bytes32 root\",\n        {\n            type: \"bytes32\",\n            name: \"root\"\n        }\n    ],\n    [\n        \"bytes32 s\",\n        {\n            type: \"bytes32\",\n            name: \"s\"\n        }\n    ],\n    [\n        \"string name\",\n        {\n            type: \"string\",\n            name: \"name\"\n        }\n    ],\n    [\n        \"string symbol\",\n        {\n            type: \"string\",\n            name: \"symbol\"\n        }\n    ],\n    [\n        \"string tokenURI\",\n        {\n            type: \"string\",\n            name: \"tokenURI\"\n        }\n    ],\n    [\n        \"uint tokenId\",\n        {\n            type: \"uint256\",\n            name: \"tokenId\"\n        }\n    ],\n    [\n        \"uint8 v\",\n        {\n            type: \"uint8\",\n            name: \"v\"\n        }\n    ],\n    [\n        \"uint256 balance\",\n        {\n            type: \"uint256\",\n            name: \"balance\"\n        }\n    ],\n    [\n        \"uint256 tokenId\",\n        {\n            type: \"uint256\",\n            name: \"tokenId\"\n        }\n    ],\n    [\n        \"uint256 value\",\n        {\n            type: \"uint256\",\n            name: \"value\"\n        }\n    ],\n    [\n        \"event:address indexed from\",\n        {\n            type: \"address\",\n            name: \"from\",\n            indexed: true\n        }\n    ],\n    [\n        \"event:address indexed to\",\n        {\n            type: \"address\",\n            name: \"to\",\n            indexed: true\n        }\n    ],\n    [\n        \"event:uint indexed tokenId\",\n        {\n            type: \"uint256\",\n            name: \"tokenId\",\n            indexed: true\n        }\n    ],\n    [\n        \"event:uint256 indexed tokenId\",\n        {\n            type: \"uint256\",\n            name: \"tokenId\",\n            indexed: true\n        }\n    ]\n]); //# sourceMappingURL=cache.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb3gvbm9kZV9tb2R1bGVzL2FiaXR5cGUvZGlzdC9janMvaHVtYW4tcmVhZGFibGUvcnVudGltZS9jYWNoZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsc0JBQXNCLEdBQUcsS0FBSztBQUM5QkEsNEJBQTRCLEdBQUdHO0FBQy9CLFNBQVNBLHFCQUFxQkMsS0FBSyxFQUFFQyxJQUFJLEVBQUVDLE9BQU87SUFDOUMsSUFBSUMsWUFBWTtJQUNoQixJQUFJRCxTQUNBLEtBQUssTUFBTUUsVUFBVVYsT0FBT1csT0FBTyxDQUFDSCxTQUFVO1FBQzFDLElBQUksQ0FBQ0UsUUFDRDtRQUNKLElBQUlFLGNBQWM7UUFDbEIsS0FBSyxNQUFNQyxZQUFZSCxNQUFNLENBQUMsRUFBRSxDQUFFO1lBQzlCRSxlQUFlLENBQUMsQ0FBQyxFQUFFQyxTQUFTTixJQUFJLENBQUMsRUFBRU0sU0FBU0MsSUFBSSxHQUFHLENBQUMsQ0FBQyxFQUFFRCxTQUFTQyxJQUFJLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDO1FBQ2xGO1FBQ0FMLGFBQWEsQ0FBQyxDQUFDLEVBQUVDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFRSxZQUFZLEVBQUUsQ0FBQztJQUNqRDtJQUNKLElBQUlMLE1BQ0EsT0FBTyxDQUFDLEVBQUVBLEtBQUssQ0FBQyxFQUFFRCxNQUFNLEVBQUVHLFVBQVUsQ0FBQztJQUN6QyxPQUFPSDtBQUNYO0FBQ0FKLHNCQUFzQixHQUFHLElBQUlhLElBQUk7SUFDN0I7UUFBQztRQUFXO1lBQUVSLE1BQU07UUFBVTtLQUFFO0lBQ2hDO1FBQUM7UUFBUTtZQUFFQSxNQUFNO1FBQU87S0FBRTtJQUMxQjtRQUFDO1FBQVM7WUFBRUEsTUFBTTtRQUFRO0tBQUU7SUFDNUI7UUFBQztRQUFXO1lBQUVBLE1BQU07UUFBVTtLQUFFO0lBQ2hDO1FBQUM7UUFBTztZQUFFQSxNQUFNO1FBQVM7S0FBRTtJQUMzQjtRQUFDO1FBQVU7WUFBRUEsTUFBTTtRQUFTO0tBQUU7SUFDOUI7UUFBQztRQUFVO1lBQUVBLE1BQU07UUFBUztLQUFFO0lBQzlCO1FBQUM7UUFBUTtZQUFFQSxNQUFNO1FBQVU7S0FBRTtJQUM3QjtRQUFDO1FBQVM7WUFBRUEsTUFBTTtRQUFRO0tBQUU7SUFDNUI7UUFBQztRQUFVO1lBQUVBLE1BQU07UUFBUztLQUFFO0lBQzlCO1FBQUM7UUFBVTtZQUFFQSxNQUFNO1FBQVM7S0FBRTtJQUM5QjtRQUFDO1FBQVU7WUFBRUEsTUFBTTtRQUFTO0tBQUU7SUFDOUI7UUFBQztRQUFVO1lBQUVBLE1BQU07UUFBUztLQUFFO0lBQzlCO1FBQUM7UUFBVTtZQUFFQSxNQUFNO1FBQVM7S0FBRTtJQUM5QjtRQUFDO1FBQVc7WUFBRUEsTUFBTTtRQUFVO0tBQUU7SUFDaEM7UUFBQztRQUFXO1lBQUVBLE1BQU07UUFBVTtLQUFFO0lBQ2hDO1FBQUM7UUFBVztZQUFFQSxNQUFNO1FBQVU7S0FBRTtJQUNoQztRQUFDO1FBQVc7WUFBRUEsTUFBTTtRQUFVO0tBQUU7SUFDaEM7UUFBQztRQUFpQjtZQUFFQSxNQUFNO1lBQVdPLE1BQU07UUFBUTtLQUFFO0lBQ3JEO1FBQUM7UUFBYztZQUFFUCxNQUFNO1lBQVdPLE1BQU07UUFBSztLQUFFO0lBQy9DO1FBQUM7UUFBaUI7WUFBRVAsTUFBTTtZQUFRTyxNQUFNO1FBQVc7S0FBRTtJQUNyRDtRQUFDO1FBQWU7WUFBRVAsTUFBTTtZQUFTTyxNQUFNO1FBQVE7S0FBRTtJQUNqRDtRQUFDO1FBQWM7WUFBRVAsTUFBTTtZQUFTTyxNQUFNO1FBQU87S0FBRTtJQUMvQztRQUFDO1FBQW1CO1lBQUVQLE1BQU07WUFBU08sTUFBTTtRQUFZO0tBQUU7SUFDekQ7UUFBQztRQUFnQjtZQUFFUCxNQUFNO1lBQVdPLE1BQU07UUFBTztLQUFFO0lBQ25EO1FBQUM7UUFBYTtZQUFFUCxNQUFNO1lBQVdPLE1BQU07UUFBSTtLQUFFO0lBQzdDO1FBQUM7UUFBZ0I7WUFBRVAsTUFBTTtZQUFXTyxNQUFNO1FBQU87S0FBRTtJQUNuRDtRQUFDO1FBQWE7WUFBRVAsTUFBTTtZQUFXTyxNQUFNO1FBQUk7S0FBRTtJQUM3QztRQUFDO1FBQWU7WUFBRVAsTUFBTTtZQUFVTyxNQUFNO1FBQU87S0FBRTtJQUNqRDtRQUFDO1FBQWlCO1lBQUVQLE1BQU07WUFBVU8sTUFBTTtRQUFTO0tBQUU7SUFDckQ7UUFBQztRQUFtQjtZQUFFUCxNQUFNO1lBQVVPLE1BQU07UUFBVztLQUFFO0lBQ3pEO1FBQUM7UUFBZ0I7WUFBRVAsTUFBTTtZQUFXTyxNQUFNO1FBQVU7S0FBRTtJQUN0RDtRQUFDO1FBQVc7WUFBRVAsTUFBTTtZQUFTTyxNQUFNO1FBQUk7S0FBRTtJQUN6QztRQUFDO1FBQW1CO1lBQUVQLE1BQU07WUFBV08sTUFBTTtRQUFVO0tBQUU7SUFDekQ7UUFBQztRQUFtQjtZQUFFUCxNQUFNO1lBQVdPLE1BQU07UUFBVTtLQUFFO0lBQ3pEO1FBQUM7UUFBaUI7WUFBRVAsTUFBTTtZQUFXTyxNQUFNO1FBQVE7S0FBRTtJQUNyRDtRQUNJO1FBQ0E7WUFBRVAsTUFBTTtZQUFXTyxNQUFNO1lBQVFFLFNBQVM7UUFBSztLQUNsRDtJQUNEO1FBQUM7UUFBNEI7WUFBRVQsTUFBTTtZQUFXTyxNQUFNO1lBQU1FLFNBQVM7UUFBSztLQUFFO0lBQzVFO1FBQ0k7UUFDQTtZQUFFVCxNQUFNO1lBQVdPLE1BQU07WUFBV0UsU0FBUztRQUFLO0tBQ3JEO0lBQ0Q7UUFDSTtRQUNBO1lBQUVULE1BQU07WUFBV08sTUFBTTtZQUFXRSxTQUFTO1FBQUs7S0FDckQ7Q0FDSixHQUNELGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL3dzdG9uLXVpLy4vbm9kZV9tb2R1bGVzL294L25vZGVfbW9kdWxlcy9hYml0eXBlL2Rpc3QvY2pzL2h1bWFuLXJlYWRhYmxlL3J1bnRpbWUvY2FjaGUuanM/NzM1OSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucGFyYW1ldGVyQ2FjaGUgPSB2b2lkIDA7XG5leHBvcnRzLmdldFBhcmFtZXRlckNhY2hlS2V5ID0gZ2V0UGFyYW1ldGVyQ2FjaGVLZXk7XG5mdW5jdGlvbiBnZXRQYXJhbWV0ZXJDYWNoZUtleShwYXJhbSwgdHlwZSwgc3RydWN0cykge1xuICAgIGxldCBzdHJ1Y3RLZXkgPSAnJztcbiAgICBpZiAoc3RydWN0cylcbiAgICAgICAgZm9yIChjb25zdCBzdHJ1Y3Qgb2YgT2JqZWN0LmVudHJpZXMoc3RydWN0cykpIHtcbiAgICAgICAgICAgIGlmICghc3RydWN0KVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgbGV0IHByb3BlcnR5S2V5ID0gJyc7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHByb3BlcnR5IG9mIHN0cnVjdFsxXSkge1xuICAgICAgICAgICAgICAgIHByb3BlcnR5S2V5ICs9IGBbJHtwcm9wZXJ0eS50eXBlfSR7cHJvcGVydHkubmFtZSA/IGA6JHtwcm9wZXJ0eS5uYW1lfWAgOiAnJ31dYDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN0cnVjdEtleSArPSBgKCR7c3RydWN0WzBdfXske3Byb3BlcnR5S2V5fX0pYDtcbiAgICAgICAgfVxuICAgIGlmICh0eXBlKVxuICAgICAgICByZXR1cm4gYCR7dHlwZX06JHtwYXJhbX0ke3N0cnVjdEtleX1gO1xuICAgIHJldHVybiBwYXJhbTtcbn1cbmV4cG9ydHMucGFyYW1ldGVyQ2FjaGUgPSBuZXcgTWFwKFtcbiAgICBbJ2FkZHJlc3MnLCB7IHR5cGU6ICdhZGRyZXNzJyB9XSxcbiAgICBbJ2Jvb2wnLCB7IHR5cGU6ICdib29sJyB9XSxcbiAgICBbJ2J5dGVzJywgeyB0eXBlOiAnYnl0ZXMnIH1dLFxuICAgIFsnYnl0ZXMzMicsIHsgdHlwZTogJ2J5dGVzMzInIH1dLFxuICAgIFsnaW50JywgeyB0eXBlOiAnaW50MjU2JyB9XSxcbiAgICBbJ2ludDI1NicsIHsgdHlwZTogJ2ludDI1NicgfV0sXG4gICAgWydzdHJpbmcnLCB7IHR5cGU6ICdzdHJpbmcnIH1dLFxuICAgIFsndWludCcsIHsgdHlwZTogJ3VpbnQyNTYnIH1dLFxuICAgIFsndWludDgnLCB7IHR5cGU6ICd1aW50OCcgfV0sXG4gICAgWyd1aW50MTYnLCB7IHR5cGU6ICd1aW50MTYnIH1dLFxuICAgIFsndWludDI0JywgeyB0eXBlOiAndWludDI0JyB9XSxcbiAgICBbJ3VpbnQzMicsIHsgdHlwZTogJ3VpbnQzMicgfV0sXG4gICAgWyd1aW50NjQnLCB7IHR5cGU6ICd1aW50NjQnIH1dLFxuICAgIFsndWludDk2JywgeyB0eXBlOiAndWludDk2JyB9XSxcbiAgICBbJ3VpbnQxMTInLCB7IHR5cGU6ICd1aW50MTEyJyB9XSxcbiAgICBbJ3VpbnQxNjAnLCB7IHR5cGU6ICd1aW50MTYwJyB9XSxcbiAgICBbJ3VpbnQxOTInLCB7IHR5cGU6ICd1aW50MTkyJyB9XSxcbiAgICBbJ3VpbnQyNTYnLCB7IHR5cGU6ICd1aW50MjU2JyB9XSxcbiAgICBbJ2FkZHJlc3Mgb3duZXInLCB7IHR5cGU6ICdhZGRyZXNzJywgbmFtZTogJ293bmVyJyB9XSxcbiAgICBbJ2FkZHJlc3MgdG8nLCB7IHR5cGU6ICdhZGRyZXNzJywgbmFtZTogJ3RvJyB9XSxcbiAgICBbJ2Jvb2wgYXBwcm92ZWQnLCB7IHR5cGU6ICdib29sJywgbmFtZTogJ2FwcHJvdmVkJyB9XSxcbiAgICBbJ2J5dGVzIF9kYXRhJywgeyB0eXBlOiAnYnl0ZXMnLCBuYW1lOiAnX2RhdGEnIH1dLFxuICAgIFsnYnl0ZXMgZGF0YScsIHsgdHlwZTogJ2J5dGVzJywgbmFtZTogJ2RhdGEnIH1dLFxuICAgIFsnYnl0ZXMgc2lnbmF0dXJlJywgeyB0eXBlOiAnYnl0ZXMnLCBuYW1lOiAnc2lnbmF0dXJlJyB9XSxcbiAgICBbJ2J5dGVzMzIgaGFzaCcsIHsgdHlwZTogJ2J5dGVzMzInLCBuYW1lOiAnaGFzaCcgfV0sXG4gICAgWydieXRlczMyIHInLCB7IHR5cGU6ICdieXRlczMyJywgbmFtZTogJ3InIH1dLFxuICAgIFsnYnl0ZXMzMiByb290JywgeyB0eXBlOiAnYnl0ZXMzMicsIG5hbWU6ICdyb290JyB9XSxcbiAgICBbJ2J5dGVzMzIgcycsIHsgdHlwZTogJ2J5dGVzMzInLCBuYW1lOiAncycgfV0sXG4gICAgWydzdHJpbmcgbmFtZScsIHsgdHlwZTogJ3N0cmluZycsIG5hbWU6ICduYW1lJyB9XSxcbiAgICBbJ3N0cmluZyBzeW1ib2wnLCB7IHR5cGU6ICdzdHJpbmcnLCBuYW1lOiAnc3ltYm9sJyB9XSxcbiAgICBbJ3N0cmluZyB0b2tlblVSSScsIHsgdHlwZTogJ3N0cmluZycsIG5hbWU6ICd0b2tlblVSSScgfV0sXG4gICAgWyd1aW50IHRva2VuSWQnLCB7IHR5cGU6ICd1aW50MjU2JywgbmFtZTogJ3Rva2VuSWQnIH1dLFxuICAgIFsndWludDggdicsIHsgdHlwZTogJ3VpbnQ4JywgbmFtZTogJ3YnIH1dLFxuICAgIFsndWludDI1NiBiYWxhbmNlJywgeyB0eXBlOiAndWludDI1NicsIG5hbWU6ICdiYWxhbmNlJyB9XSxcbiAgICBbJ3VpbnQyNTYgdG9rZW5JZCcsIHsgdHlwZTogJ3VpbnQyNTYnLCBuYW1lOiAndG9rZW5JZCcgfV0sXG4gICAgWyd1aW50MjU2IHZhbHVlJywgeyB0eXBlOiAndWludDI1NicsIG5hbWU6ICd2YWx1ZScgfV0sXG4gICAgW1xuICAgICAgICAnZXZlbnQ6YWRkcmVzcyBpbmRleGVkIGZyb20nLFxuICAgICAgICB7IHR5cGU6ICdhZGRyZXNzJywgbmFtZTogJ2Zyb20nLCBpbmRleGVkOiB0cnVlIH0sXG4gICAgXSxcbiAgICBbJ2V2ZW50OmFkZHJlc3MgaW5kZXhlZCB0bycsIHsgdHlwZTogJ2FkZHJlc3MnLCBuYW1lOiAndG8nLCBpbmRleGVkOiB0cnVlIH1dLFxuICAgIFtcbiAgICAgICAgJ2V2ZW50OnVpbnQgaW5kZXhlZCB0b2tlbklkJyxcbiAgICAgICAgeyB0eXBlOiAndWludDI1NicsIG5hbWU6ICd0b2tlbklkJywgaW5kZXhlZDogdHJ1ZSB9LFxuICAgIF0sXG4gICAgW1xuICAgICAgICAnZXZlbnQ6dWludDI1NiBpbmRleGVkIHRva2VuSWQnLFxuICAgICAgICB7IHR5cGU6ICd1aW50MjU2JywgbmFtZTogJ3Rva2VuSWQnLCBpbmRleGVkOiB0cnVlIH0sXG4gICAgXSxcbl0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2FjaGUuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwicGFyYW1ldGVyQ2FjaGUiLCJnZXRQYXJhbWV0ZXJDYWNoZUtleSIsInBhcmFtIiwidHlwZSIsInN0cnVjdHMiLCJzdHJ1Y3RLZXkiLCJzdHJ1Y3QiLCJlbnRyaWVzIiwicHJvcGVydHlLZXkiLCJwcm9wZXJ0eSIsIm5hbWUiLCJNYXAiLCJpbmRleGVkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ox/node_modules/abitype/dist/cjs/human-readable/runtime/cache.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ox/node_modules/abitype/dist/cjs/human-readable/runtime/signatures.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/ox/node_modules/abitype/dist/cjs/human-readable/runtime/signatures.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.functionModifiers = exports.eventModifiers = exports.modifiers = void 0;\nexports.isErrorSignature = isErrorSignature;\nexports.execErrorSignature = execErrorSignature;\nexports.isEventSignature = isEventSignature;\nexports.execEventSignature = execEventSignature;\nexports.isFunctionSignature = isFunctionSignature;\nexports.execFunctionSignature = execFunctionSignature;\nexports.isStructSignature = isStructSignature;\nexports.execStructSignature = execStructSignature;\nexports.isConstructorSignature = isConstructorSignature;\nexports.execConstructorSignature = execConstructorSignature;\nexports.isFallbackSignature = isFallbackSignature;\nexports.execFallbackSignature = execFallbackSignature;\nexports.isReceiveSignature = isReceiveSignature;\nconst regex_js_1 = __webpack_require__(/*! ../../regex.js */ \"(ssr)/./node_modules/ox/node_modules/abitype/dist/cjs/regex.js\");\nconst errorSignatureRegex = /^error (?<name>[a-zA-Z$_][a-zA-Z0-9$_]*)\\((?<parameters>.*?)\\)$/;\nfunction isErrorSignature(signature) {\n    return errorSignatureRegex.test(signature);\n}\nfunction execErrorSignature(signature) {\n    return (0, regex_js_1.execTyped)(errorSignatureRegex, signature);\n}\nconst eventSignatureRegex = /^event (?<name>[a-zA-Z$_][a-zA-Z0-9$_]*)\\((?<parameters>.*?)\\)$/;\nfunction isEventSignature(signature) {\n    return eventSignatureRegex.test(signature);\n}\nfunction execEventSignature(signature) {\n    return (0, regex_js_1.execTyped)(eventSignatureRegex, signature);\n}\nconst functionSignatureRegex = /^function (?<name>[a-zA-Z$_][a-zA-Z0-9$_]*)\\((?<parameters>.*?)\\)(?: (?<scope>external|public{1}))?(?: (?<stateMutability>pure|view|nonpayable|payable{1}))?(?: returns\\s?\\((?<returns>.*?)\\))?$/;\nfunction isFunctionSignature(signature) {\n    return functionSignatureRegex.test(signature);\n}\nfunction execFunctionSignature(signature) {\n    return (0, regex_js_1.execTyped)(functionSignatureRegex, signature);\n}\nconst structSignatureRegex = /^struct (?<name>[a-zA-Z$_][a-zA-Z0-9$_]*) \\{(?<properties>.*?)\\}$/;\nfunction isStructSignature(signature) {\n    return structSignatureRegex.test(signature);\n}\nfunction execStructSignature(signature) {\n    return (0, regex_js_1.execTyped)(structSignatureRegex, signature);\n}\nconst constructorSignatureRegex = /^constructor\\((?<parameters>.*?)\\)(?:\\s(?<stateMutability>payable{1}))?$/;\nfunction isConstructorSignature(signature) {\n    return constructorSignatureRegex.test(signature);\n}\nfunction execConstructorSignature(signature) {\n    return (0, regex_js_1.execTyped)(constructorSignatureRegex, signature);\n}\nconst fallbackSignatureRegex = /^fallback\\(\\) external(?:\\s(?<stateMutability>payable{1}))?$/;\nfunction isFallbackSignature(signature) {\n    return fallbackSignatureRegex.test(signature);\n}\nfunction execFallbackSignature(signature) {\n    return (0, regex_js_1.execTyped)(fallbackSignatureRegex, signature);\n}\nconst receiveSignatureRegex = /^receive\\(\\) external payable$/;\nfunction isReceiveSignature(signature) {\n    return receiveSignatureRegex.test(signature);\n}\nexports.modifiers = new Set([\n    \"memory\",\n    \"indexed\",\n    \"storage\",\n    \"calldata\"\n]);\nexports.eventModifiers = new Set([\n    \"indexed\"\n]);\nexports.functionModifiers = new Set([\n    \"calldata\",\n    \"memory\",\n    \"storage\"\n]); //# sourceMappingURL=signatures.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb3gvbm9kZV9tb2R1bGVzL2FiaXR5cGUvZGlzdC9janMvaHVtYW4tcmVhZGFibGUvcnVudGltZS9zaWduYXR1cmVzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCx5QkFBeUIsR0FBR0Esc0JBQXNCLEdBQUdBLGlCQUFpQixHQUFHLEtBQUs7QUFDOUVBLHdCQUF3QixHQUFHSztBQUMzQkwsMEJBQTBCLEdBQUdNO0FBQzdCTix3QkFBd0IsR0FBR087QUFDM0JQLDBCQUEwQixHQUFHUTtBQUM3QlIsMkJBQTJCLEdBQUdTO0FBQzlCVCw2QkFBNkIsR0FBR1U7QUFDaENWLHlCQUF5QixHQUFHVztBQUM1QlgsMkJBQTJCLEdBQUdZO0FBQzlCWiw4QkFBOEIsR0FBR2E7QUFDakNiLGdDQUFnQyxHQUFHYztBQUNuQ2QsMkJBQTJCLEdBQUdlO0FBQzlCZiw2QkFBNkIsR0FBR2dCO0FBQ2hDaEIsMEJBQTBCLEdBQUdpQjtBQUM3QixNQUFNQyxhQUFhQyxtQkFBT0EsQ0FBQyxzRkFBZ0I7QUFDM0MsTUFBTUMsc0JBQXNCO0FBQzVCLFNBQVNmLGlCQUFpQmdCLFNBQVM7SUFDL0IsT0FBT0Qsb0JBQW9CRSxJQUFJLENBQUNEO0FBQ3BDO0FBQ0EsU0FBU2YsbUJBQW1CZSxTQUFTO0lBQ2pDLE9BQU8sQ0FBQyxHQUFHSCxXQUFXSyxTQUFTLEVBQUVILHFCQUFxQkM7QUFDMUQ7QUFDQSxNQUFNRyxzQkFBc0I7QUFDNUIsU0FBU2pCLGlCQUFpQmMsU0FBUztJQUMvQixPQUFPRyxvQkFBb0JGLElBQUksQ0FBQ0Q7QUFDcEM7QUFDQSxTQUFTYixtQkFBbUJhLFNBQVM7SUFDakMsT0FBTyxDQUFDLEdBQUdILFdBQVdLLFNBQVMsRUFBRUMscUJBQXFCSDtBQUMxRDtBQUNBLE1BQU1JLHlCQUF5QjtBQUMvQixTQUFTaEIsb0JBQW9CWSxTQUFTO0lBQ2xDLE9BQU9JLHVCQUF1QkgsSUFBSSxDQUFDRDtBQUN2QztBQUNBLFNBQVNYLHNCQUFzQlcsU0FBUztJQUNwQyxPQUFPLENBQUMsR0FBR0gsV0FBV0ssU0FBUyxFQUFFRSx3QkFBd0JKO0FBQzdEO0FBQ0EsTUFBTUssdUJBQXVCO0FBQzdCLFNBQVNmLGtCQUFrQlUsU0FBUztJQUNoQyxPQUFPSyxxQkFBcUJKLElBQUksQ0FBQ0Q7QUFDckM7QUFDQSxTQUFTVCxvQkFBb0JTLFNBQVM7SUFDbEMsT0FBTyxDQUFDLEdBQUdILFdBQVdLLFNBQVMsRUFBRUcsc0JBQXNCTDtBQUMzRDtBQUNBLE1BQU1NLDRCQUE0QjtBQUNsQyxTQUFTZCx1QkFBdUJRLFNBQVM7SUFDckMsT0FBT00sMEJBQTBCTCxJQUFJLENBQUNEO0FBQzFDO0FBQ0EsU0FBU1AseUJBQXlCTyxTQUFTO0lBQ3ZDLE9BQU8sQ0FBQyxHQUFHSCxXQUFXSyxTQUFTLEVBQUVJLDJCQUEyQk47QUFDaEU7QUFDQSxNQUFNTyx5QkFBeUI7QUFDL0IsU0FBU2Isb0JBQW9CTSxTQUFTO0lBQ2xDLE9BQU9PLHVCQUF1Qk4sSUFBSSxDQUFDRDtBQUN2QztBQUNBLFNBQVNMLHNCQUFzQkssU0FBUztJQUNwQyxPQUFPLENBQUMsR0FBR0gsV0FBV0ssU0FBUyxFQUFFSyx3QkFBd0JQO0FBQzdEO0FBQ0EsTUFBTVEsd0JBQXdCO0FBQzlCLFNBQVNaLG1CQUFtQkksU0FBUztJQUNqQyxPQUFPUSxzQkFBc0JQLElBQUksQ0FBQ0Q7QUFDdEM7QUFDQXJCLGlCQUFpQixHQUFHLElBQUk4QixJQUFJO0lBQ3hCO0lBQ0E7SUFDQTtJQUNBO0NBQ0g7QUFDRDlCLHNCQUFzQixHQUFHLElBQUk4QixJQUFJO0lBQUM7Q0FBVTtBQUM1QzlCLHlCQUF5QixHQUFHLElBQUk4QixJQUFJO0lBQ2hDO0lBQ0E7SUFDQTtDQUNILEdBQ0Qsc0NBQXNDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd3N0b24tdWkvLi9ub2RlX21vZHVsZXMvb3gvbm9kZV9tb2R1bGVzL2FiaXR5cGUvZGlzdC9janMvaHVtYW4tcmVhZGFibGUvcnVudGltZS9zaWduYXR1cmVzLmpzP2Q4MTUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmZ1bmN0aW9uTW9kaWZpZXJzID0gZXhwb3J0cy5ldmVudE1vZGlmaWVycyA9IGV4cG9ydHMubW9kaWZpZXJzID0gdm9pZCAwO1xuZXhwb3J0cy5pc0Vycm9yU2lnbmF0dXJlID0gaXNFcnJvclNpZ25hdHVyZTtcbmV4cG9ydHMuZXhlY0Vycm9yU2lnbmF0dXJlID0gZXhlY0Vycm9yU2lnbmF0dXJlO1xuZXhwb3J0cy5pc0V2ZW50U2lnbmF0dXJlID0gaXNFdmVudFNpZ25hdHVyZTtcbmV4cG9ydHMuZXhlY0V2ZW50U2lnbmF0dXJlID0gZXhlY0V2ZW50U2lnbmF0dXJlO1xuZXhwb3J0cy5pc0Z1bmN0aW9uU2lnbmF0dXJlID0gaXNGdW5jdGlvblNpZ25hdHVyZTtcbmV4cG9ydHMuZXhlY0Z1bmN0aW9uU2lnbmF0dXJlID0gZXhlY0Z1bmN0aW9uU2lnbmF0dXJlO1xuZXhwb3J0cy5pc1N0cnVjdFNpZ25hdHVyZSA9IGlzU3RydWN0U2lnbmF0dXJlO1xuZXhwb3J0cy5leGVjU3RydWN0U2lnbmF0dXJlID0gZXhlY1N0cnVjdFNpZ25hdHVyZTtcbmV4cG9ydHMuaXNDb25zdHJ1Y3RvclNpZ25hdHVyZSA9IGlzQ29uc3RydWN0b3JTaWduYXR1cmU7XG5leHBvcnRzLmV4ZWNDb25zdHJ1Y3RvclNpZ25hdHVyZSA9IGV4ZWNDb25zdHJ1Y3RvclNpZ25hdHVyZTtcbmV4cG9ydHMuaXNGYWxsYmFja1NpZ25hdHVyZSA9IGlzRmFsbGJhY2tTaWduYXR1cmU7XG5leHBvcnRzLmV4ZWNGYWxsYmFja1NpZ25hdHVyZSA9IGV4ZWNGYWxsYmFja1NpZ25hdHVyZTtcbmV4cG9ydHMuaXNSZWNlaXZlU2lnbmF0dXJlID0gaXNSZWNlaXZlU2lnbmF0dXJlO1xuY29uc3QgcmVnZXhfanNfMSA9IHJlcXVpcmUoXCIuLi8uLi9yZWdleC5qc1wiKTtcbmNvbnN0IGVycm9yU2lnbmF0dXJlUmVnZXggPSAvXmVycm9yICg/PG5hbWU+W2EtekEtWiRfXVthLXpBLVowLTkkX10qKVxcKCg/PHBhcmFtZXRlcnM+Lio/KVxcKSQvO1xuZnVuY3Rpb24gaXNFcnJvclNpZ25hdHVyZShzaWduYXR1cmUpIHtcbiAgICByZXR1cm4gZXJyb3JTaWduYXR1cmVSZWdleC50ZXN0KHNpZ25hdHVyZSk7XG59XG5mdW5jdGlvbiBleGVjRXJyb3JTaWduYXR1cmUoc2lnbmF0dXJlKSB7XG4gICAgcmV0dXJuICgwLCByZWdleF9qc18xLmV4ZWNUeXBlZCkoZXJyb3JTaWduYXR1cmVSZWdleCwgc2lnbmF0dXJlKTtcbn1cbmNvbnN0IGV2ZW50U2lnbmF0dXJlUmVnZXggPSAvXmV2ZW50ICg/PG5hbWU+W2EtekEtWiRfXVthLXpBLVowLTkkX10qKVxcKCg/PHBhcmFtZXRlcnM+Lio/KVxcKSQvO1xuZnVuY3Rpb24gaXNFdmVudFNpZ25hdHVyZShzaWduYXR1cmUpIHtcbiAgICByZXR1cm4gZXZlbnRTaWduYXR1cmVSZWdleC50ZXN0KHNpZ25hdHVyZSk7XG59XG5mdW5jdGlvbiBleGVjRXZlbnRTaWduYXR1cmUoc2lnbmF0dXJlKSB7XG4gICAgcmV0dXJuICgwLCByZWdleF9qc18xLmV4ZWNUeXBlZCkoZXZlbnRTaWduYXR1cmVSZWdleCwgc2lnbmF0dXJlKTtcbn1cbmNvbnN0IGZ1bmN0aW9uU2lnbmF0dXJlUmVnZXggPSAvXmZ1bmN0aW9uICg/PG5hbWU+W2EtekEtWiRfXVthLXpBLVowLTkkX10qKVxcKCg/PHBhcmFtZXRlcnM+Lio/KVxcKSg/OiAoPzxzY29wZT5leHRlcm5hbHxwdWJsaWN7MX0pKT8oPzogKD88c3RhdGVNdXRhYmlsaXR5PnB1cmV8dmlld3xub25wYXlhYmxlfHBheWFibGV7MX0pKT8oPzogcmV0dXJuc1xccz9cXCgoPzxyZXR1cm5zPi4qPylcXCkpPyQvO1xuZnVuY3Rpb24gaXNGdW5jdGlvblNpZ25hdHVyZShzaWduYXR1cmUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb25TaWduYXR1cmVSZWdleC50ZXN0KHNpZ25hdHVyZSk7XG59XG5mdW5jdGlvbiBleGVjRnVuY3Rpb25TaWduYXR1cmUoc2lnbmF0dXJlKSB7XG4gICAgcmV0dXJuICgwLCByZWdleF9qc18xLmV4ZWNUeXBlZCkoZnVuY3Rpb25TaWduYXR1cmVSZWdleCwgc2lnbmF0dXJlKTtcbn1cbmNvbnN0IHN0cnVjdFNpZ25hdHVyZVJlZ2V4ID0gL15zdHJ1Y3QgKD88bmFtZT5bYS16QS1aJF9dW2EtekEtWjAtOSRfXSopIFxceyg/PHByb3BlcnRpZXM+Lio/KVxcfSQvO1xuZnVuY3Rpb24gaXNTdHJ1Y3RTaWduYXR1cmUoc2lnbmF0dXJlKSB7XG4gICAgcmV0dXJuIHN0cnVjdFNpZ25hdHVyZVJlZ2V4LnRlc3Qoc2lnbmF0dXJlKTtcbn1cbmZ1bmN0aW9uIGV4ZWNTdHJ1Y3RTaWduYXR1cmUoc2lnbmF0dXJlKSB7XG4gICAgcmV0dXJuICgwLCByZWdleF9qc18xLmV4ZWNUeXBlZCkoc3RydWN0U2lnbmF0dXJlUmVnZXgsIHNpZ25hdHVyZSk7XG59XG5jb25zdCBjb25zdHJ1Y3RvclNpZ25hdHVyZVJlZ2V4ID0gL15jb25zdHJ1Y3RvclxcKCg/PHBhcmFtZXRlcnM+Lio/KVxcKSg/Olxccyg/PHN0YXRlTXV0YWJpbGl0eT5wYXlhYmxlezF9KSk/JC87XG5mdW5jdGlvbiBpc0NvbnN0cnVjdG9yU2lnbmF0dXJlKHNpZ25hdHVyZSkge1xuICAgIHJldHVybiBjb25zdHJ1Y3RvclNpZ25hdHVyZVJlZ2V4LnRlc3Qoc2lnbmF0dXJlKTtcbn1cbmZ1bmN0aW9uIGV4ZWNDb25zdHJ1Y3RvclNpZ25hdHVyZShzaWduYXR1cmUpIHtcbiAgICByZXR1cm4gKDAsIHJlZ2V4X2pzXzEuZXhlY1R5cGVkKShjb25zdHJ1Y3RvclNpZ25hdHVyZVJlZ2V4LCBzaWduYXR1cmUpO1xufVxuY29uc3QgZmFsbGJhY2tTaWduYXR1cmVSZWdleCA9IC9eZmFsbGJhY2tcXChcXCkgZXh0ZXJuYWwoPzpcXHMoPzxzdGF0ZU11dGFiaWxpdHk+cGF5YWJsZXsxfSkpPyQvO1xuZnVuY3Rpb24gaXNGYWxsYmFja1NpZ25hdHVyZShzaWduYXR1cmUpIHtcbiAgICByZXR1cm4gZmFsbGJhY2tTaWduYXR1cmVSZWdleC50ZXN0KHNpZ25hdHVyZSk7XG59XG5mdW5jdGlvbiBleGVjRmFsbGJhY2tTaWduYXR1cmUoc2lnbmF0dXJlKSB7XG4gICAgcmV0dXJuICgwLCByZWdleF9qc18xLmV4ZWNUeXBlZCkoZmFsbGJhY2tTaWduYXR1cmVSZWdleCwgc2lnbmF0dXJlKTtcbn1cbmNvbnN0IHJlY2VpdmVTaWduYXR1cmVSZWdleCA9IC9ecmVjZWl2ZVxcKFxcKSBleHRlcm5hbCBwYXlhYmxlJC87XG5mdW5jdGlvbiBpc1JlY2VpdmVTaWduYXR1cmUoc2lnbmF0dXJlKSB7XG4gICAgcmV0dXJuIHJlY2VpdmVTaWduYXR1cmVSZWdleC50ZXN0KHNpZ25hdHVyZSk7XG59XG5leHBvcnRzLm1vZGlmaWVycyA9IG5ldyBTZXQoW1xuICAgICdtZW1vcnknLFxuICAgICdpbmRleGVkJyxcbiAgICAnc3RvcmFnZScsXG4gICAgJ2NhbGxkYXRhJyxcbl0pO1xuZXhwb3J0cy5ldmVudE1vZGlmaWVycyA9IG5ldyBTZXQoWydpbmRleGVkJ10pO1xuZXhwb3J0cy5mdW5jdGlvbk1vZGlmaWVycyA9IG5ldyBTZXQoW1xuICAgICdjYWxsZGF0YScsXG4gICAgJ21lbW9yeScsXG4gICAgJ3N0b3JhZ2UnLFxuXSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zaWduYXR1cmVzLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImZ1bmN0aW9uTW9kaWZpZXJzIiwiZXZlbnRNb2RpZmllcnMiLCJtb2RpZmllcnMiLCJpc0Vycm9yU2lnbmF0dXJlIiwiZXhlY0Vycm9yU2lnbmF0dXJlIiwiaXNFdmVudFNpZ25hdHVyZSIsImV4ZWNFdmVudFNpZ25hdHVyZSIsImlzRnVuY3Rpb25TaWduYXR1cmUiLCJleGVjRnVuY3Rpb25TaWduYXR1cmUiLCJpc1N0cnVjdFNpZ25hdHVyZSIsImV4ZWNTdHJ1Y3RTaWduYXR1cmUiLCJpc0NvbnN0cnVjdG9yU2lnbmF0dXJlIiwiZXhlY0NvbnN0cnVjdG9yU2lnbmF0dXJlIiwiaXNGYWxsYmFja1NpZ25hdHVyZSIsImV4ZWNGYWxsYmFja1NpZ25hdHVyZSIsImlzUmVjZWl2ZVNpZ25hdHVyZSIsInJlZ2V4X2pzXzEiLCJyZXF1aXJlIiwiZXJyb3JTaWduYXR1cmVSZWdleCIsInNpZ25hdHVyZSIsInRlc3QiLCJleGVjVHlwZWQiLCJldmVudFNpZ25hdHVyZVJlZ2V4IiwiZnVuY3Rpb25TaWduYXR1cmVSZWdleCIsInN0cnVjdFNpZ25hdHVyZVJlZ2V4IiwiY29uc3RydWN0b3JTaWduYXR1cmVSZWdleCIsImZhbGxiYWNrU2lnbmF0dXJlUmVnZXgiLCJyZWNlaXZlU2lnbmF0dXJlUmVnZXgiLCJTZXQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ox/node_modules/abitype/dist/cjs/human-readable/runtime/signatures.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ox/node_modules/abitype/dist/cjs/human-readable/runtime/structs.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/ox/node_modules/abitype/dist/cjs/human-readable/runtime/structs.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.parseStructs = parseStructs;\nconst regex_js_1 = __webpack_require__(/*! ../../regex.js */ \"(ssr)/./node_modules/ox/node_modules/abitype/dist/cjs/regex.js\");\nconst abiItem_js_1 = __webpack_require__(/*! ../errors/abiItem.js */ \"(ssr)/./node_modules/ox/node_modules/abitype/dist/cjs/human-readable/errors/abiItem.js\");\nconst abiParameter_js_1 = __webpack_require__(/*! ../errors/abiParameter.js */ \"(ssr)/./node_modules/ox/node_modules/abitype/dist/cjs/human-readable/errors/abiParameter.js\");\nconst signature_js_1 = __webpack_require__(/*! ../errors/signature.js */ \"(ssr)/./node_modules/ox/node_modules/abitype/dist/cjs/human-readable/errors/signature.js\");\nconst struct_js_1 = __webpack_require__(/*! ../errors/struct.js */ \"(ssr)/./node_modules/ox/node_modules/abitype/dist/cjs/human-readable/errors/struct.js\");\nconst signatures_js_1 = __webpack_require__(/*! ./signatures.js */ \"(ssr)/./node_modules/ox/node_modules/abitype/dist/cjs/human-readable/runtime/signatures.js\");\nconst utils_js_1 = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/ox/node_modules/abitype/dist/cjs/human-readable/runtime/utils.js\");\nfunction parseStructs(signatures) {\n    const shallowStructs = {};\n    const signaturesLength = signatures.length;\n    for(let i = 0; i < signaturesLength; i++){\n        const signature = signatures[i];\n        if (!(0, signatures_js_1.isStructSignature)(signature)) continue;\n        const match = (0, signatures_js_1.execStructSignature)(signature);\n        if (!match) throw new signature_js_1.InvalidSignatureError({\n            signature,\n            type: \"struct\"\n        });\n        const properties = match.properties.split(\";\");\n        const components = [];\n        const propertiesLength = properties.length;\n        for(let k = 0; k < propertiesLength; k++){\n            const property = properties[k];\n            const trimmed = property.trim();\n            if (!trimmed) continue;\n            const abiParameter = (0, utils_js_1.parseAbiParameter)(trimmed, {\n                type: \"struct\"\n            });\n            components.push(abiParameter);\n        }\n        if (!components.length) throw new signature_js_1.InvalidStructSignatureError({\n            signature\n        });\n        shallowStructs[match.name] = components;\n    }\n    const resolvedStructs = {};\n    const entries = Object.entries(shallowStructs);\n    const entriesLength = entries.length;\n    for(let i = 0; i < entriesLength; i++){\n        const [name, parameters] = entries[i];\n        resolvedStructs[name] = resolveStructs(parameters, shallowStructs);\n    }\n    return resolvedStructs;\n}\nconst typeWithoutTupleRegex = /^(?<type>[a-zA-Z$_][a-zA-Z0-9$_]*)(?<array>(?:\\[\\d*?\\])+?)?$/;\nfunction resolveStructs(abiParameters, structs, ancestors = new Set()) {\n    const components = [];\n    const length = abiParameters.length;\n    for(let i = 0; i < length; i++){\n        const abiParameter = abiParameters[i];\n        const isTuple = regex_js_1.isTupleRegex.test(abiParameter.type);\n        if (isTuple) components.push(abiParameter);\n        else {\n            const match = (0, regex_js_1.execTyped)(typeWithoutTupleRegex, abiParameter.type);\n            if (!match?.type) throw new abiParameter_js_1.InvalidAbiTypeParameterError({\n                abiParameter\n            });\n            const { array, type } = match;\n            if (type in structs) {\n                if (ancestors.has(type)) throw new struct_js_1.CircularReferenceError({\n                    type\n                });\n                components.push({\n                    ...abiParameter,\n                    type: `tuple${array ?? \"\"}`,\n                    components: resolveStructs(structs[type] ?? [], structs, new Set([\n                        ...ancestors,\n                        type\n                    ]))\n                });\n            } else {\n                if ((0, utils_js_1.isSolidityType)(type)) components.push(abiParameter);\n                else throw new abiItem_js_1.UnknownTypeError({\n                    type\n                });\n            }\n        }\n    }\n    return components;\n} //# sourceMappingURL=structs.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb3gvbm9kZV9tb2R1bGVzL2FiaXR5cGUvZGlzdC9janMvaHVtYW4tcmVhZGFibGUvcnVudGltZS9zdHJ1Y3RzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxvQkFBb0IsR0FBR0U7QUFDdkIsTUFBTUMsYUFBYUMsbUJBQU9BLENBQUMsc0ZBQWdCO0FBQzNDLE1BQU1DLGVBQWVELG1CQUFPQSxDQUFDLG9IQUFzQjtBQUNuRCxNQUFNRSxvQkFBb0JGLG1CQUFPQSxDQUFDLDhIQUEyQjtBQUM3RCxNQUFNRyxpQkFBaUJILG1CQUFPQSxDQUFDLHdIQUF3QjtBQUN2RCxNQUFNSSxjQUFjSixtQkFBT0EsQ0FBQyxrSEFBcUI7QUFDakQsTUFBTUssa0JBQWtCTCxtQkFBT0EsQ0FBQyxtSEFBaUI7QUFDakQsTUFBTU0sYUFBYU4sbUJBQU9BLENBQUMseUdBQVk7QUFDdkMsU0FBU0YsYUFBYVMsVUFBVTtJQUM1QixNQUFNQyxpQkFBaUIsQ0FBQztJQUN4QixNQUFNQyxtQkFBbUJGLFdBQVdHLE1BQU07SUFDMUMsSUFBSyxJQUFJQyxJQUFJLEdBQUdBLElBQUlGLGtCQUFrQkUsSUFBSztRQUN2QyxNQUFNQyxZQUFZTCxVQUFVLENBQUNJLEVBQUU7UUFDL0IsSUFBSSxDQUFDLENBQUMsR0FBR04sZ0JBQWdCUSxpQkFBaUIsRUFBRUQsWUFDeEM7UUFDSixNQUFNRSxRQUFRLENBQUMsR0FBR1QsZ0JBQWdCVSxtQkFBbUIsRUFBRUg7UUFDdkQsSUFBSSxDQUFDRSxPQUNELE1BQU0sSUFBSVgsZUFBZWEscUJBQXFCLENBQUM7WUFBRUo7WUFBV0ssTUFBTTtRQUFTO1FBQy9FLE1BQU1DLGFBQWFKLE1BQU1JLFVBQVUsQ0FBQ0MsS0FBSyxDQUFDO1FBQzFDLE1BQU1DLGFBQWEsRUFBRTtRQUNyQixNQUFNQyxtQkFBbUJILFdBQVdSLE1BQU07UUFDMUMsSUFBSyxJQUFJWSxJQUFJLEdBQUdBLElBQUlELGtCQUFrQkMsSUFBSztZQUN2QyxNQUFNQyxXQUFXTCxVQUFVLENBQUNJLEVBQUU7WUFDOUIsTUFBTUUsVUFBVUQsU0FBU0UsSUFBSTtZQUM3QixJQUFJLENBQUNELFNBQ0Q7WUFDSixNQUFNRSxlQUFlLENBQUMsR0FBR3BCLFdBQVdxQixpQkFBaUIsRUFBRUgsU0FBUztnQkFDNURQLE1BQU07WUFDVjtZQUNBRyxXQUFXUSxJQUFJLENBQUNGO1FBQ3BCO1FBQ0EsSUFBSSxDQUFDTixXQUFXVixNQUFNLEVBQ2xCLE1BQU0sSUFBSVAsZUFBZTBCLDJCQUEyQixDQUFDO1lBQUVqQjtRQUFVO1FBQ3JFSixjQUFjLENBQUNNLE1BQU1nQixJQUFJLENBQUMsR0FBR1Y7SUFDakM7SUFDQSxNQUFNVyxrQkFBa0IsQ0FBQztJQUN6QixNQUFNQyxVQUFVdEMsT0FBT3NDLE9BQU8sQ0FBQ3hCO0lBQy9CLE1BQU15QixnQkFBZ0JELFFBQVF0QixNQUFNO0lBQ3BDLElBQUssSUFBSUMsSUFBSSxHQUFHQSxJQUFJc0IsZUFBZXRCLElBQUs7UUFDcEMsTUFBTSxDQUFDbUIsTUFBTUksV0FBVyxHQUFHRixPQUFPLENBQUNyQixFQUFFO1FBQ3JDb0IsZUFBZSxDQUFDRCxLQUFLLEdBQUdLLGVBQWVELFlBQVkxQjtJQUN2RDtJQUNBLE9BQU91QjtBQUNYO0FBQ0EsTUFBTUssd0JBQXdCO0FBQzlCLFNBQVNELGVBQWVFLGFBQWEsRUFBRUMsT0FBTyxFQUFFQyxZQUFZLElBQUlDLEtBQUs7SUFDakUsTUFBTXBCLGFBQWEsRUFBRTtJQUNyQixNQUFNVixTQUFTMkIsY0FBYzNCLE1BQU07SUFDbkMsSUFBSyxJQUFJQyxJQUFJLEdBQUdBLElBQUlELFFBQVFDLElBQUs7UUFDN0IsTUFBTWUsZUFBZVcsYUFBYSxDQUFDMUIsRUFBRTtRQUNyQyxNQUFNOEIsVUFBVTFDLFdBQVcyQyxZQUFZLENBQUNDLElBQUksQ0FBQ2pCLGFBQWFULElBQUk7UUFDOUQsSUFBSXdCLFNBQ0FyQixXQUFXUSxJQUFJLENBQUNGO2FBQ2Y7WUFDRCxNQUFNWixRQUFRLENBQUMsR0FBR2YsV0FBVzZDLFNBQVMsRUFBRVIsdUJBQXVCVixhQUFhVCxJQUFJO1lBQ2hGLElBQUksQ0FBQ0gsT0FBT0csTUFDUixNQUFNLElBQUlmLGtCQUFrQjJDLDRCQUE0QixDQUFDO2dCQUFFbkI7WUFBYTtZQUM1RSxNQUFNLEVBQUVvQixLQUFLLEVBQUU3QixJQUFJLEVBQUUsR0FBR0g7WUFDeEIsSUFBSUcsUUFBUXFCLFNBQVM7Z0JBQ2pCLElBQUlDLFVBQVVRLEdBQUcsQ0FBQzlCLE9BQ2QsTUFBTSxJQUFJYixZQUFZNEMsc0JBQXNCLENBQUM7b0JBQUUvQjtnQkFBSztnQkFDeERHLFdBQVdRLElBQUksQ0FBQztvQkFDWixHQUFHRixZQUFZO29CQUNmVCxNQUFNLENBQUMsS0FBSyxFQUFFNkIsU0FBUyxHQUFHLENBQUM7b0JBQzNCMUIsWUFBWWUsZUFBZUcsT0FBTyxDQUFDckIsS0FBSyxJQUFJLEVBQUUsRUFBRXFCLFNBQVMsSUFBSUUsSUFBSTsyQkFBSUQ7d0JBQVd0QjtxQkFBSztnQkFDekY7WUFDSixPQUNLO2dCQUNELElBQUksQ0FBQyxHQUFHWCxXQUFXMkMsY0FBYyxFQUFFaEMsT0FDL0JHLFdBQVdRLElBQUksQ0FBQ0Y7cUJBRWhCLE1BQU0sSUFBSXpCLGFBQWFpRCxnQkFBZ0IsQ0FBQztvQkFBRWpDO2dCQUFLO1lBQ3ZEO1FBQ0o7SUFDSjtJQUNBLE9BQU9HO0FBQ1gsRUFDQSxtQ0FBbUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93c3Rvbi11aS8uL25vZGVfbW9kdWxlcy9veC9ub2RlX21vZHVsZXMvYWJpdHlwZS9kaXN0L2Nqcy9odW1hbi1yZWFkYWJsZS9ydW50aW1lL3N0cnVjdHMuanM/NjBjYSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucGFyc2VTdHJ1Y3RzID0gcGFyc2VTdHJ1Y3RzO1xuY29uc3QgcmVnZXhfanNfMSA9IHJlcXVpcmUoXCIuLi8uLi9yZWdleC5qc1wiKTtcbmNvbnN0IGFiaUl0ZW1fanNfMSA9IHJlcXVpcmUoXCIuLi9lcnJvcnMvYWJpSXRlbS5qc1wiKTtcbmNvbnN0IGFiaVBhcmFtZXRlcl9qc18xID0gcmVxdWlyZShcIi4uL2Vycm9ycy9hYmlQYXJhbWV0ZXIuanNcIik7XG5jb25zdCBzaWduYXR1cmVfanNfMSA9IHJlcXVpcmUoXCIuLi9lcnJvcnMvc2lnbmF0dXJlLmpzXCIpO1xuY29uc3Qgc3RydWN0X2pzXzEgPSByZXF1aXJlKFwiLi4vZXJyb3JzL3N0cnVjdC5qc1wiKTtcbmNvbnN0IHNpZ25hdHVyZXNfanNfMSA9IHJlcXVpcmUoXCIuL3NpZ25hdHVyZXMuanNcIik7XG5jb25zdCB1dGlsc19qc18xID0gcmVxdWlyZShcIi4vdXRpbHMuanNcIik7XG5mdW5jdGlvbiBwYXJzZVN0cnVjdHMoc2lnbmF0dXJlcykge1xuICAgIGNvbnN0IHNoYWxsb3dTdHJ1Y3RzID0ge307XG4gICAgY29uc3Qgc2lnbmF0dXJlc0xlbmd0aCA9IHNpZ25hdHVyZXMubGVuZ3RoO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2lnbmF0dXJlc0xlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IHNpZ25hdHVyZSA9IHNpZ25hdHVyZXNbaV07XG4gICAgICAgIGlmICghKDAsIHNpZ25hdHVyZXNfanNfMS5pc1N0cnVjdFNpZ25hdHVyZSkoc2lnbmF0dXJlKSlcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBjb25zdCBtYXRjaCA9ICgwLCBzaWduYXR1cmVzX2pzXzEuZXhlY1N0cnVjdFNpZ25hdHVyZSkoc2lnbmF0dXJlKTtcbiAgICAgICAgaWYgKCFtYXRjaClcbiAgICAgICAgICAgIHRocm93IG5ldyBzaWduYXR1cmVfanNfMS5JbnZhbGlkU2lnbmF0dXJlRXJyb3IoeyBzaWduYXR1cmUsIHR5cGU6ICdzdHJ1Y3QnIH0pO1xuICAgICAgICBjb25zdCBwcm9wZXJ0aWVzID0gbWF0Y2gucHJvcGVydGllcy5zcGxpdCgnOycpO1xuICAgICAgICBjb25zdCBjb21wb25lbnRzID0gW107XG4gICAgICAgIGNvbnN0IHByb3BlcnRpZXNMZW5ndGggPSBwcm9wZXJ0aWVzLmxlbmd0aDtcbiAgICAgICAgZm9yIChsZXQgayA9IDA7IGsgPCBwcm9wZXJ0aWVzTGVuZ3RoOyBrKyspIHtcbiAgICAgICAgICAgIGNvbnN0IHByb3BlcnR5ID0gcHJvcGVydGllc1trXTtcbiAgICAgICAgICAgIGNvbnN0IHRyaW1tZWQgPSBwcm9wZXJ0eS50cmltKCk7XG4gICAgICAgICAgICBpZiAoIXRyaW1tZWQpXG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICBjb25zdCBhYmlQYXJhbWV0ZXIgPSAoMCwgdXRpbHNfanNfMS5wYXJzZUFiaVBhcmFtZXRlcikodHJpbW1lZCwge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdzdHJ1Y3QnLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjb21wb25lbnRzLnB1c2goYWJpUGFyYW1ldGVyKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWNvbXBvbmVudHMubGVuZ3RoKVxuICAgICAgICAgICAgdGhyb3cgbmV3IHNpZ25hdHVyZV9qc18xLkludmFsaWRTdHJ1Y3RTaWduYXR1cmVFcnJvcih7IHNpZ25hdHVyZSB9KTtcbiAgICAgICAgc2hhbGxvd1N0cnVjdHNbbWF0Y2gubmFtZV0gPSBjb21wb25lbnRzO1xuICAgIH1cbiAgICBjb25zdCByZXNvbHZlZFN0cnVjdHMgPSB7fTtcbiAgICBjb25zdCBlbnRyaWVzID0gT2JqZWN0LmVudHJpZXMoc2hhbGxvd1N0cnVjdHMpO1xuICAgIGNvbnN0IGVudHJpZXNMZW5ndGggPSBlbnRyaWVzLmxlbmd0aDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGVudHJpZXNMZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBbbmFtZSwgcGFyYW1ldGVyc10gPSBlbnRyaWVzW2ldO1xuICAgICAgICByZXNvbHZlZFN0cnVjdHNbbmFtZV0gPSByZXNvbHZlU3RydWN0cyhwYXJhbWV0ZXJzLCBzaGFsbG93U3RydWN0cyk7XG4gICAgfVxuICAgIHJldHVybiByZXNvbHZlZFN0cnVjdHM7XG59XG5jb25zdCB0eXBlV2l0aG91dFR1cGxlUmVnZXggPSAvXig/PHR5cGU+W2EtekEtWiRfXVthLXpBLVowLTkkX10qKSg/PGFycmF5Pig/OlxcW1xcZCo/XFxdKSs/KT8kLztcbmZ1bmN0aW9uIHJlc29sdmVTdHJ1Y3RzKGFiaVBhcmFtZXRlcnMsIHN0cnVjdHMsIGFuY2VzdG9ycyA9IG5ldyBTZXQoKSkge1xuICAgIGNvbnN0IGNvbXBvbmVudHMgPSBbXTtcbiAgICBjb25zdCBsZW5ndGggPSBhYmlQYXJhbWV0ZXJzLmxlbmd0aDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGFiaVBhcmFtZXRlciA9IGFiaVBhcmFtZXRlcnNbaV07XG4gICAgICAgIGNvbnN0IGlzVHVwbGUgPSByZWdleF9qc18xLmlzVHVwbGVSZWdleC50ZXN0KGFiaVBhcmFtZXRlci50eXBlKTtcbiAgICAgICAgaWYgKGlzVHVwbGUpXG4gICAgICAgICAgICBjb21wb25lbnRzLnB1c2goYWJpUGFyYW1ldGVyKTtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBtYXRjaCA9ICgwLCByZWdleF9qc18xLmV4ZWNUeXBlZCkodHlwZVdpdGhvdXRUdXBsZVJlZ2V4LCBhYmlQYXJhbWV0ZXIudHlwZSk7XG4gICAgICAgICAgICBpZiAoIW1hdGNoPy50eXBlKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBhYmlQYXJhbWV0ZXJfanNfMS5JbnZhbGlkQWJpVHlwZVBhcmFtZXRlckVycm9yKHsgYWJpUGFyYW1ldGVyIH0pO1xuICAgICAgICAgICAgY29uc3QgeyBhcnJheSwgdHlwZSB9ID0gbWF0Y2g7XG4gICAgICAgICAgICBpZiAodHlwZSBpbiBzdHJ1Y3RzKSB7XG4gICAgICAgICAgICAgICAgaWYgKGFuY2VzdG9ycy5oYXModHlwZSkpXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBzdHJ1Y3RfanNfMS5DaXJjdWxhclJlZmVyZW5jZUVycm9yKHsgdHlwZSB9KTtcbiAgICAgICAgICAgICAgICBjb21wb25lbnRzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAuLi5hYmlQYXJhbWV0ZXIsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IGB0dXBsZSR7YXJyYXkgPz8gJyd9YCxcbiAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50czogcmVzb2x2ZVN0cnVjdHMoc3RydWN0c1t0eXBlXSA/PyBbXSwgc3RydWN0cywgbmV3IFNldChbLi4uYW5jZXN0b3JzLCB0eXBlXSkpLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKCgwLCB1dGlsc19qc18xLmlzU29saWRpdHlUeXBlKSh0eXBlKSlcbiAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50cy5wdXNoKGFiaVBhcmFtZXRlcik7XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgYWJpSXRlbV9qc18xLlVua25vd25UeXBlRXJyb3IoeyB0eXBlIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBjb21wb25lbnRzO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3RydWN0cy5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJwYXJzZVN0cnVjdHMiLCJyZWdleF9qc18xIiwicmVxdWlyZSIsImFiaUl0ZW1fanNfMSIsImFiaVBhcmFtZXRlcl9qc18xIiwic2lnbmF0dXJlX2pzXzEiLCJzdHJ1Y3RfanNfMSIsInNpZ25hdHVyZXNfanNfMSIsInV0aWxzX2pzXzEiLCJzaWduYXR1cmVzIiwic2hhbGxvd1N0cnVjdHMiLCJzaWduYXR1cmVzTGVuZ3RoIiwibGVuZ3RoIiwiaSIsInNpZ25hdHVyZSIsImlzU3RydWN0U2lnbmF0dXJlIiwibWF0Y2giLCJleGVjU3RydWN0U2lnbmF0dXJlIiwiSW52YWxpZFNpZ25hdHVyZUVycm9yIiwidHlwZSIsInByb3BlcnRpZXMiLCJzcGxpdCIsImNvbXBvbmVudHMiLCJwcm9wZXJ0aWVzTGVuZ3RoIiwiayIsInByb3BlcnR5IiwidHJpbW1lZCIsInRyaW0iLCJhYmlQYXJhbWV0ZXIiLCJwYXJzZUFiaVBhcmFtZXRlciIsInB1c2giLCJJbnZhbGlkU3RydWN0U2lnbmF0dXJlRXJyb3IiLCJuYW1lIiwicmVzb2x2ZWRTdHJ1Y3RzIiwiZW50cmllcyIsImVudHJpZXNMZW5ndGgiLCJwYXJhbWV0ZXJzIiwicmVzb2x2ZVN0cnVjdHMiLCJ0eXBlV2l0aG91dFR1cGxlUmVnZXgiLCJhYmlQYXJhbWV0ZXJzIiwic3RydWN0cyIsImFuY2VzdG9ycyIsIlNldCIsImlzVHVwbGUiLCJpc1R1cGxlUmVnZXgiLCJ0ZXN0IiwiZXhlY1R5cGVkIiwiSW52YWxpZEFiaVR5cGVQYXJhbWV0ZXJFcnJvciIsImFycmF5IiwiaGFzIiwiQ2lyY3VsYXJSZWZlcmVuY2VFcnJvciIsImlzU29saWRpdHlUeXBlIiwiVW5rbm93blR5cGVFcnJvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ox/node_modules/abitype/dist/cjs/human-readable/runtime/structs.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ox/node_modules/abitype/dist/cjs/human-readable/runtime/utils.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/ox/node_modules/abitype/dist/cjs/human-readable/runtime/utils.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.parseSignature = parseSignature;\nexports.parseFunctionSignature = parseFunctionSignature;\nexports.parseEventSignature = parseEventSignature;\nexports.parseErrorSignature = parseErrorSignature;\nexports.parseConstructorSignature = parseConstructorSignature;\nexports.parseFallbackSignature = parseFallbackSignature;\nexports.parseAbiParameter = parseAbiParameter;\nexports.splitParameters = splitParameters;\nexports.isSolidityType = isSolidityType;\nexports.isSolidityKeyword = isSolidityKeyword;\nexports.isValidDataLocation = isValidDataLocation;\nconst regex_js_1 = __webpack_require__(/*! ../../regex.js */ \"(ssr)/./node_modules/ox/node_modules/abitype/dist/cjs/regex.js\");\nconst abiItem_js_1 = __webpack_require__(/*! ../errors/abiItem.js */ \"(ssr)/./node_modules/ox/node_modules/abitype/dist/cjs/human-readable/errors/abiItem.js\");\nconst abiParameter_js_1 = __webpack_require__(/*! ../errors/abiParameter.js */ \"(ssr)/./node_modules/ox/node_modules/abitype/dist/cjs/human-readable/errors/abiParameter.js\");\nconst signature_js_1 = __webpack_require__(/*! ../errors/signature.js */ \"(ssr)/./node_modules/ox/node_modules/abitype/dist/cjs/human-readable/errors/signature.js\");\nconst splitParameters_js_1 = __webpack_require__(/*! ../errors/splitParameters.js */ \"(ssr)/./node_modules/ox/node_modules/abitype/dist/cjs/human-readable/errors/splitParameters.js\");\nconst cache_js_1 = __webpack_require__(/*! ./cache.js */ \"(ssr)/./node_modules/ox/node_modules/abitype/dist/cjs/human-readable/runtime/cache.js\");\nconst signatures_js_1 = __webpack_require__(/*! ./signatures.js */ \"(ssr)/./node_modules/ox/node_modules/abitype/dist/cjs/human-readable/runtime/signatures.js\");\nfunction parseSignature(signature, structs = {}) {\n    if ((0, signatures_js_1.isFunctionSignature)(signature)) return parseFunctionSignature(signature, structs);\n    if ((0, signatures_js_1.isEventSignature)(signature)) return parseEventSignature(signature, structs);\n    if ((0, signatures_js_1.isErrorSignature)(signature)) return parseErrorSignature(signature, structs);\n    if ((0, signatures_js_1.isConstructorSignature)(signature)) return parseConstructorSignature(signature, structs);\n    if ((0, signatures_js_1.isFallbackSignature)(signature)) return parseFallbackSignature(signature);\n    if ((0, signatures_js_1.isReceiveSignature)(signature)) return {\n        type: \"receive\",\n        stateMutability: \"payable\"\n    };\n    throw new signature_js_1.UnknownSignatureError({\n        signature\n    });\n}\nfunction parseFunctionSignature(signature, structs = {}) {\n    const match = (0, signatures_js_1.execFunctionSignature)(signature);\n    if (!match) throw new signature_js_1.InvalidSignatureError({\n        signature,\n        type: \"function\"\n    });\n    const inputParams = splitParameters(match.parameters);\n    const inputs = [];\n    const inputLength = inputParams.length;\n    for(let i = 0; i < inputLength; i++){\n        inputs.push(parseAbiParameter(inputParams[i], {\n            modifiers: signatures_js_1.functionModifiers,\n            structs,\n            type: \"function\"\n        }));\n    }\n    const outputs = [];\n    if (match.returns) {\n        const outputParams = splitParameters(match.returns);\n        const outputLength = outputParams.length;\n        for(let i = 0; i < outputLength; i++){\n            outputs.push(parseAbiParameter(outputParams[i], {\n                modifiers: signatures_js_1.functionModifiers,\n                structs,\n                type: \"function\"\n            }));\n        }\n    }\n    return {\n        name: match.name,\n        type: \"function\",\n        stateMutability: match.stateMutability ?? \"nonpayable\",\n        inputs,\n        outputs\n    };\n}\nfunction parseEventSignature(signature, structs = {}) {\n    const match = (0, signatures_js_1.execEventSignature)(signature);\n    if (!match) throw new signature_js_1.InvalidSignatureError({\n        signature,\n        type: \"event\"\n    });\n    const params = splitParameters(match.parameters);\n    const abiParameters = [];\n    const length = params.length;\n    for(let i = 0; i < length; i++)abiParameters.push(parseAbiParameter(params[i], {\n        modifiers: signatures_js_1.eventModifiers,\n        structs,\n        type: \"event\"\n    }));\n    return {\n        name: match.name,\n        type: \"event\",\n        inputs: abiParameters\n    };\n}\nfunction parseErrorSignature(signature, structs = {}) {\n    const match = (0, signatures_js_1.execErrorSignature)(signature);\n    if (!match) throw new signature_js_1.InvalidSignatureError({\n        signature,\n        type: \"error\"\n    });\n    const params = splitParameters(match.parameters);\n    const abiParameters = [];\n    const length = params.length;\n    for(let i = 0; i < length; i++)abiParameters.push(parseAbiParameter(params[i], {\n        structs,\n        type: \"error\"\n    }));\n    return {\n        name: match.name,\n        type: \"error\",\n        inputs: abiParameters\n    };\n}\nfunction parseConstructorSignature(signature, structs = {}) {\n    const match = (0, signatures_js_1.execConstructorSignature)(signature);\n    if (!match) throw new signature_js_1.InvalidSignatureError({\n        signature,\n        type: \"constructor\"\n    });\n    const params = splitParameters(match.parameters);\n    const abiParameters = [];\n    const length = params.length;\n    for(let i = 0; i < length; i++)abiParameters.push(parseAbiParameter(params[i], {\n        structs,\n        type: \"constructor\"\n    }));\n    return {\n        type: \"constructor\",\n        stateMutability: match.stateMutability ?? \"nonpayable\",\n        inputs: abiParameters\n    };\n}\nfunction parseFallbackSignature(signature) {\n    const match = (0, signatures_js_1.execFallbackSignature)(signature);\n    if (!match) throw new signature_js_1.InvalidSignatureError({\n        signature,\n        type: \"fallback\"\n    });\n    return {\n        type: \"fallback\",\n        stateMutability: match.stateMutability ?? \"nonpayable\"\n    };\n}\nconst abiParameterWithoutTupleRegex = /^(?<type>[a-zA-Z$_][a-zA-Z0-9$_]*(?:\\spayable)?)(?<array>(?:\\[\\d*?\\])+?)?(?:\\s(?<modifier>calldata|indexed|memory|storage{1}))?(?:\\s(?<name>[a-zA-Z$_][a-zA-Z0-9$_]*))?$/;\nconst abiParameterWithTupleRegex = /^\\((?<type>.+?)\\)(?<array>(?:\\[\\d*?\\])+?)?(?:\\s(?<modifier>calldata|indexed|memory|storage{1}))?(?:\\s(?<name>[a-zA-Z$_][a-zA-Z0-9$_]*))?$/;\nconst dynamicIntegerRegex = /^u?int$/;\nfunction parseAbiParameter(param, options) {\n    const parameterCacheKey = (0, cache_js_1.getParameterCacheKey)(param, options?.type, options?.structs);\n    if (cache_js_1.parameterCache.has(parameterCacheKey)) return cache_js_1.parameterCache.get(parameterCacheKey);\n    const isTuple = regex_js_1.isTupleRegex.test(param);\n    const match = (0, regex_js_1.execTyped)(isTuple ? abiParameterWithTupleRegex : abiParameterWithoutTupleRegex, param);\n    if (!match) throw new abiParameter_js_1.InvalidParameterError({\n        param\n    });\n    if (match.name && isSolidityKeyword(match.name)) throw new abiParameter_js_1.SolidityProtectedKeywordError({\n        param,\n        name: match.name\n    });\n    const name = match.name ? {\n        name: match.name\n    } : {};\n    const indexed = match.modifier === \"indexed\" ? {\n        indexed: true\n    } : {};\n    const structs = options?.structs ?? {};\n    let type;\n    let components = {};\n    if (isTuple) {\n        type = \"tuple\";\n        const params = splitParameters(match.type);\n        const components_ = [];\n        const length = params.length;\n        for(let i = 0; i < length; i++){\n            components_.push(parseAbiParameter(params[i], {\n                structs\n            }));\n        }\n        components = {\n            components: components_\n        };\n    } else if (match.type in structs) {\n        type = \"tuple\";\n        components = {\n            components: structs[match.type]\n        };\n    } else if (dynamicIntegerRegex.test(match.type)) {\n        type = `${match.type}256`;\n    } else if (match.type === \"address payable\") {\n        type = \"address\";\n    } else {\n        type = match.type;\n        if (!(options?.type === \"struct\") && !isSolidityType(type)) throw new abiItem_js_1.UnknownSolidityTypeError({\n            type\n        });\n    }\n    if (match.modifier) {\n        if (!options?.modifiers?.has?.(match.modifier)) throw new abiParameter_js_1.InvalidModifierError({\n            param,\n            type: options?.type,\n            modifier: match.modifier\n        });\n        if (signatures_js_1.functionModifiers.has(match.modifier) && !isValidDataLocation(type, !!match.array)) throw new abiParameter_js_1.InvalidFunctionModifierError({\n            param,\n            type: options?.type,\n            modifier: match.modifier\n        });\n    }\n    const abiParameter = {\n        type: `${type}${match.array ?? \"\"}`,\n        ...name,\n        ...indexed,\n        ...components\n    };\n    cache_js_1.parameterCache.set(parameterCacheKey, abiParameter);\n    return abiParameter;\n}\nfunction splitParameters(params, result = [], current = \"\", depth = 0) {\n    const length = params.trim().length;\n    for(let i = 0; i < length; i++){\n        const char = params[i];\n        const tail = params.slice(i + 1);\n        switch(char){\n            case \",\":\n                return depth === 0 ? splitParameters(tail, [\n                    ...result,\n                    current.trim()\n                ]) : splitParameters(tail, result, `${current}${char}`, depth);\n            case \"(\":\n                return splitParameters(tail, result, `${current}${char}`, depth + 1);\n            case \")\":\n                return splitParameters(tail, result, `${current}${char}`, depth - 1);\n            default:\n                return splitParameters(tail, result, `${current}${char}`, depth);\n        }\n    }\n    if (current === \"\") return result;\n    if (depth !== 0) throw new splitParameters_js_1.InvalidParenthesisError({\n        current,\n        depth\n    });\n    result.push(current.trim());\n    return result;\n}\nfunction isSolidityType(type) {\n    return type === \"address\" || type === \"bool\" || type === \"function\" || type === \"string\" || regex_js_1.bytesRegex.test(type) || regex_js_1.integerRegex.test(type);\n}\nconst protectedKeywordsRegex = /^(?:after|alias|anonymous|apply|auto|byte|calldata|case|catch|constant|copyof|default|defined|error|event|external|false|final|function|immutable|implements|in|indexed|inline|internal|let|mapping|match|memory|mutable|null|of|override|partial|private|promise|public|pure|reference|relocatable|return|returns|sizeof|static|storage|struct|super|supports|switch|this|true|try|typedef|typeof|var|view|virtual)$/;\nfunction isSolidityKeyword(name) {\n    return name === \"address\" || name === \"bool\" || name === \"function\" || name === \"string\" || name === \"tuple\" || regex_js_1.bytesRegex.test(name) || regex_js_1.integerRegex.test(name) || protectedKeywordsRegex.test(name);\n}\nfunction isValidDataLocation(type, isArray) {\n    return isArray || type === \"bytes\" || type === \"string\" || type === \"tuple\";\n} //# sourceMappingURL=utils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ox/node_modules/abitype/dist/cjs/human-readable/runtime/utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ox/node_modules/abitype/dist/cjs/narrow.js":
/*!*****************************************************************!*\
  !*** ./node_modules/ox/node_modules/abitype/dist/cjs/narrow.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.narrow = narrow;\nfunction narrow(value) {\n    return value;\n} //# sourceMappingURL=narrow.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb3gvbm9kZV9tb2R1bGVzL2FiaXR5cGUvZGlzdC9janMvbmFycm93LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxjQUFjLEdBQUdFO0FBQ2pCLFNBQVNBLE9BQU9ELEtBQUs7SUFDakIsT0FBT0E7QUFDWCxFQUNBLGtDQUFrQyIsInNvdXJjZXMiOlsid2VicGFjazovL3dzdG9uLXVpLy4vbm9kZV9tb2R1bGVzL294L25vZGVfbW9kdWxlcy9hYml0eXBlL2Rpc3QvY2pzL25hcnJvdy5qcz9mMDMyIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5uYXJyb3cgPSBuYXJyb3c7XG5mdW5jdGlvbiBuYXJyb3codmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWU7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1uYXJyb3cuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwibmFycm93Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ox/node_modules/abitype/dist/cjs/narrow.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ox/node_modules/abitype/dist/cjs/regex.js":
/*!****************************************************************!*\
  !*** ./node_modules/ox/node_modules/abitype/dist/cjs/regex.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.isTupleRegex = exports.integerRegex = exports.bytesRegex = void 0;\nexports.execTyped = execTyped;\nfunction execTyped(regex, string) {\n    const match = regex.exec(string);\n    return match?.groups;\n}\nexports.bytesRegex = /^bytes([1-9]|1[0-9]|2[0-9]|3[0-2])?$/;\nexports.integerRegex = /^u?int(8|16|24|32|40|48|56|64|72|80|88|96|104|112|120|128|136|144|152|160|168|176|184|192|200|208|216|224|232|240|248|256)?$/;\nexports.isTupleRegex = /^\\(.+?\\).*?$/; //# sourceMappingURL=regex.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb3gvbm9kZV9tb2R1bGVzL2FiaXR5cGUvZGlzdC9janMvcmVnZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELG9CQUFvQixHQUFHQSxvQkFBb0IsR0FBR0Esa0JBQWtCLEdBQUcsS0FBSztBQUN4RUEsaUJBQWlCLEdBQUdLO0FBQ3BCLFNBQVNBLFVBQVVDLEtBQUssRUFBRUMsTUFBTTtJQUM1QixNQUFNQyxRQUFRRixNQUFNRyxJQUFJLENBQUNGO0lBQ3pCLE9BQU9DLE9BQU9FO0FBQ2xCO0FBQ0FWLGtCQUFrQixHQUFHO0FBQ3JCQSxvQkFBb0IsR0FBRztBQUN2QkEsb0JBQW9CLEdBQUcsZ0JBQ3ZCLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL3dzdG9uLXVpLy4vbm9kZV9tb2R1bGVzL294L25vZGVfbW9kdWxlcy9hYml0eXBlL2Rpc3QvY2pzL3JlZ2V4LmpzP2NlMWQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmlzVHVwbGVSZWdleCA9IGV4cG9ydHMuaW50ZWdlclJlZ2V4ID0gZXhwb3J0cy5ieXRlc1JlZ2V4ID0gdm9pZCAwO1xuZXhwb3J0cy5leGVjVHlwZWQgPSBleGVjVHlwZWQ7XG5mdW5jdGlvbiBleGVjVHlwZWQocmVnZXgsIHN0cmluZykge1xuICAgIGNvbnN0IG1hdGNoID0gcmVnZXguZXhlYyhzdHJpbmcpO1xuICAgIHJldHVybiBtYXRjaD8uZ3JvdXBzO1xufVxuZXhwb3J0cy5ieXRlc1JlZ2V4ID0gL15ieXRlcyhbMS05XXwxWzAtOV18MlswLTldfDNbMC0yXSk/JC87XG5leHBvcnRzLmludGVnZXJSZWdleCA9IC9edT9pbnQoOHwxNnwyNHwzMnw0MHw0OHw1Nnw2NHw3Mnw4MHw4OHw5NnwxMDR8MTEyfDEyMHwxMjh8MTM2fDE0NHwxNTJ8MTYwfDE2OHwxNzZ8MTg0fDE5MnwyMDB8MjA4fDIxNnwyMjR8MjMyfDI0MHwyNDh8MjU2KT8kLztcbmV4cG9ydHMuaXNUdXBsZVJlZ2V4ID0gL15cXCguKz9cXCkuKj8kLztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlZ2V4LmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImlzVHVwbGVSZWdleCIsImludGVnZXJSZWdleCIsImJ5dGVzUmVnZXgiLCJleGVjVHlwZWQiLCJyZWdleCIsInN0cmluZyIsIm1hdGNoIiwiZXhlYyIsImdyb3VwcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ox/node_modules/abitype/dist/cjs/regex.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ox/node_modules/abitype/dist/cjs/version.js":
/*!******************************************************************!*\
  !*** ./node_modules/ox/node_modules/abitype/dist/cjs/version.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.version = void 0;\nexports.version = \"1.1.1\"; //# sourceMappingURL=version.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb3gvbm9kZV9tb2R1bGVzL2FiaXR5cGUvZGlzdC9janMvdmVyc2lvbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsZUFBZSxHQUFHLEtBQUs7QUFDdkJBLGVBQWUsR0FBRyxTQUNsQixtQ0FBbUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93c3Rvbi11aS8uL25vZGVfbW9kdWxlcy9veC9ub2RlX21vZHVsZXMvYWJpdHlwZS9kaXN0L2Nqcy92ZXJzaW9uLmpzP2UzYWQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnZlcnNpb24gPSB2b2lkIDA7XG5leHBvcnRzLnZlcnNpb24gPSAnMS4xLjEnO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dmVyc2lvbi5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJ2ZXJzaW9uIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ox/node_modules/abitype/dist/cjs/version.js\n");

/***/ })

};
;